<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shinran</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-01T06:07:01.692Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript</title>
    <link href="http://yoursite.com/2020/03/21/JavaScript/"/>
    <id>http://yoursite.com/2020/03/21/JavaScript/</id>
    <published>2020-03-21T10:53:12.000Z</published>
    <updated>2020-04-01T06:07:01.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript-历史及历程"><a href="#JavaScript-历史及历程" class="headerlink" title="JavaScript 历史及历程"></a>JavaScript 历史及历程</h1><h2 id="web-发展史"><a href="#web-发展史" class="headerlink" title="web 发展史"></a>web 发展史</h2><p>Mosaic,是互上第一个获普遍使用和能够显示图片的网页浏览器。于 1993 年问世。</p><p>1994 年 4 月，马克.安德森和 Silicon Graphics（简称为 SGI，中译为“视算科技”或“硅图”）公司的创始人吉姆·克拉克（Jim Clark）在美国加州设立了“Mosaic CommunicationCorporation”。</p><p>Mosaic 公司成立后，由于伊利诺伊大学拥有 Mosaic 的商标权，且伊利诺伊大学已将技术转让给 Spy Glass 公司，开发团队必须彻底重新撰写浏览器程式码，且浏览器名称更改为 NetscapeNavigator，公司名字于 1994 年 11 月改名为“NetscapeCommunication Corporation”，此后沿用至今，中译为“网景”。</p><p>微软的 Internet Explorer 及 Mozilla Firefox 等，其早期版本皆以 Mosaic 为基础而开发。微软随后买下 Spy Glass 公司的技术开发出 Internet Explorer 浏览器，而 Mozilla Firefox则是网景通讯家开放源代码后所衍生出的版本。</p><h2 id="JS-历史"><a href="#JS-历史" class="headerlink" title="JS 历史"></a>JS 历史</h2><p>JavaScript 作为 Netscape Navigator 浏览器的一部分首次出现在 1996 年。它最初的设计目标是改善网页的用户体验。</p><p>作者：Brendan Eich</p><p>期初 JavaScript 被命名为 LiveScript，后因和 Sun 公司合作，因市场宣传需要改名,JavaScript。后来 Sun 公司被 Oracle 收购，JavaScript 版权归 Oracle 所有。</p><h2 id="浏览器组成"><a href="#浏览器组成" class="headerlink" title="浏览器组成"></a>浏览器组成</h2><ol><li><p>shell 部分——用户能操作部分(壳)</p></li><li><p>内核部分——用户看不到的部分</p><p>1 ) 渲染引擎（语法规则和渲染）</p><p>2 ) JS 引擎</p><p>3 ) 其他模块（如异步)</p></li></ol><h2 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h2><p>2001 年发布 ie6，首次实现对 JS 引擎的优化。</p><p>2008 年 Google 发布最新浏览器 Chrome，它是采用优化后的 javascript 引擎，引擎代号 V8，因能把 JS 代码直接转化为机械码来执行，进而以速度快而闻名。</p><p>后 Firefox 也推出了具备强大功能的 JS 引擎</p><p>Firefox3.5 TraceMonkey（对频繁执行的代码做了路径优化）</p><p>Firefox4.0 JeagerMonkey</p><h2 id="JS-的逼格（特有特色）"><a href="#JS-的逼格（特有特色）" class="headerlink" title="JS 的逼格（特有特色）"></a>JS 的逼格（特有特色）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">编译型语言: 通篇翻译后，生成翻译完的文件，程序执行翻译后的文件</span><br><span class="line">代表语言 : C,C++</span><br><span class="line">优点 : 快(常用于系统，游戏)</span><br><span class="line">缺点 : 移植性不好（不跨平台，<span class="built_in">window</span> 和 Linux 不能混用）</span><br><span class="line"></span><br><span class="line">解释性语言 看一行翻译一行，不生成特定文件</span><br><span class="line">代表语言 : JS,PHP，python 带尖角号</span><br><span class="line">优点 : 可以跨平台</span><br><span class="line">缺点 : 稍微慢点</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">主流浏览器（必须有独立内核）市场份额大于 <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内核名称:</span></span><br><span class="line">IE ：trident</span><br><span class="line"></span><br><span class="line">chrome ： webkit / blink</span><br><span class="line"></span><br><span class="line">firefox ： gecko</span><br><span class="line"></span><br><span class="line">opera ： presto / Blink</span><br><span class="line"></span><br><span class="line">safari ： webkit</span><br></pre></td></tr></table></figure><p>1、JS 是解释性语言：(不需要编译成文件）跨平台</p><p>java 先通过 javac，编译成.class 文件，通过 jvm（Java 虚拟机）进行解释执行<br>.java→java→ 编译 →.class→jvm→ 解释执行（java 可以跨平台）（java 是 oak 语言）</p><p><code>&lt;link rel = &quot;&quot;&gt;</code> 是异步加载</p><p>2、单线程：同一时间只能做一件事——JS 引擎是单线程（同一时间做很多事叫多线程）</p><p>ECMA（欧洲计算机制造联合会）标注：为了取得技术优势，微软推出了 JScript，</p><p>CEnvi 推出 ScriptEase，与 JavaScript 同样可在浏览器上运行。为了统一规格 JavaScript</p><p>兼容于 ECMA 标准，因此也称为 ECMAScript。</p><h1 id="开始学习-JS"><a href="#开始学习-JS" class="headerlink" title="开始学习 JS"></a>开始学习 JS</h1><h2 id="JS-三大部分-ECMAScript、DOM、BOM"><a href="#JS-三大部分-ECMAScript、DOM、BOM" class="headerlink" title="JS 三大部分 ECMAScript、DOM、BOM"></a>JS 三大部分 ECMAScript、DOM、BOM</h2><h2 id="如何引入-JS"><a href="#如何引入-JS" class="headerlink" title="如何引入 JS"></a>如何引入 JS</h2><p>1、页面内嵌<code>&lt;script&gt;&lt;/script&gt;</code>标签,写 head 里面也行,写 body 里面也行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//告诉浏览器我们是 js</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、外部 JS 文件，引入<code>&lt;script src=“location.js”&gt;&lt;/script&gt;</code></p><p>例如：以 lesson.js 保存文件，再引入到 html 中,为符合 web 标准（w3c 标准中的一项）结构（html）、行为（js）、样式（css）相分离，通常会采用外部引入。</p><p>一个文件中可以包括多个 css，js——不混用特殊写页面，大部分写在外部——不混用,如果同时写了内部的 js 和外部的 js，那么是外部的 js 文件显示出来</p><h1 id="js-变量"><a href="#js-变量" class="headerlink" title="js 变量"></a>js 变量</h1><h2 id="变量-variable"><a href="#变量-variable" class="headerlink" title="变量(variable)"></a>变量(variable)</h2><p>HTML，css 不是编程语言，是计算机语言，编程语言需要有变量和函数<br>变量是存放东西，方便后续使用的框</p><h2 id="1）变量声明"><a href="#1）变量声明" class="headerlink" title="1）变量声明"></a>1）变量声明</h2><p>1、 声明、赋值分解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> a; <span class="comment">//这个叫变量声明。我们向系统中申请了 var 这个框，命名叫 a,给 a 赋值 100，写作 a =100，这里不是等号是赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a ；a =<span class="number">100</span>；可以简化写成 <span class="keyword">var</span> a=<span class="number">100</span>；</span><br></pre></td></tr></table></figure><p>2、 单一 var 声明法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c,d;————单一 <span class="keyword">var</span> 模式</span><br><span class="line"></span><br><span class="line"><span class="comment">// var a = 100;                                            var a = 100;</span></span><br><span class="line"><span class="comment">// var a = 200;        var a,b,c,d,e;                          b = 100;</span></span><br><span class="line"><span class="comment">// var a = 300;   &gt;                       &gt;   标准写法:         c = 100;</span></span><br><span class="line"><span class="comment">// var a = 400;        a = 100;                                d = 100;</span></span><br><span class="line"><span class="comment">// var a = 500;                                                e = 100;</span></span><br><span class="line"></span><br><span class="line">如写做：<span class="keyword">var</span> a = <span class="number">10</span>；a=<span class="number">20</span>;那么后面的 <span class="number">20</span> 就会覆盖掉前面的 <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="命名规则（用接近的英文单词）————-起变量名一定要以英文语义化"><a href="#命名规则（用接近的英文单词）————-起变量名一定要以英文语义化" class="headerlink" title="命名规则（用接近的英文单词）———— 起变量名一定要以英文语义化"></a>命名规则（用接近的英文单词）———— 起变量名一定要以英文语义化</h2><ol><li>变量名必须以英文字母、_、$ 开头</li><li>变量名可以包括英文字母、_、$、数字</li><li>不可以用系统的关键字、保留字作为变量名</li></ol><h1 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h1><h2 id="关键字（有特殊语法含义的字）"><a href="#关键字（有特殊语法含义的字）" class="headerlink" title="关键字（有特殊语法含义的字）"></a>关键字（有特殊语法含义的字）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>       <span class="keyword">else</span>        <span class="keyword">new</span>         <span class="keyword">var</span></span><br><span class="line"><span class="keyword">case</span>        <span class="keyword">finally</span>     <span class="keyword">return</span>      <span class="keyword">void</span></span><br><span class="line"><span class="keyword">catch</span>       <span class="keyword">for</span>         <span class="keyword">switch</span>      <span class="keyword">while</span></span><br><span class="line"><span class="keyword">default</span>     <span class="keyword">if</span>          <span class="keyword">throw</span>       <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">in</span>          <span class="keyword">try</span>         <span class="keyword">do</span>          <span class="keyword">instanceof</span></span><br><span class="line"><span class="keyword">typeof</span></span><br></pre></td></tr></table></figure><h2 id="保留字（未来可能当做关键字的词）"><a href="#保留字（未来可能当做关键字的词）" class="headerlink" title="保留字（未来可能当做关键字的词）"></a>保留字（未来可能当做关键字的词）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abstract    enum        int         short</span><br><span class="line"><span class="built_in">Boolean</span>     <span class="keyword">export</span>      interface   <span class="keyword">static</span></span><br><span class="line">byte        extends     long        <span class="keyword">super</span></span><br><span class="line">char        final       native      synchronize</span><br><span class="line"><span class="class"><span class="keyword">class</span>       <span class="title">float</span>       <span class="title">package</span>     <span class="title">throws</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>       <span class="title">goto</span>        <span class="title">private</span>     <span class="title">transient</span></span></span><br><span class="line"><span class="class"><span class="title">debugger</span>    <span class="title">implements</span>  <span class="title">pritected</span>   <span class="title">volatile</span></span></span><br><span class="line"><span class="class"><span class="title">double</span>      <span class="title">import</span>      <span class="title">public</span></span></span><br></pre></td></tr></table></figure><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    c = a + b;</span><br></pre></td></tr></table></figure><p>先运算等号右边的 a+b，运算完后，再赋值给左边 c<br>先取值，再赋值</p><blockquote><p>运算大于赋值的优先级</p></blockquote><p>js 是动态语言，动态语言基本上都是解释性语言，解释性语言基本上都是脚本语言</p><p>js 是浮点型语言（带小数点）</p><h2 id="值类型（数据类型）"><a href="#值类型（数据类型）" class="headerlink" title="值类型（数据类型）"></a>值类型（数据类型）</h2><p>1、不可改变的原始值（栈数据）栈 stack<br>Number String Boolean undefined null<br>已经放进去的值不可改变，只会改房间编号为 null(硬盘原理)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number 数字类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串类型,语言放双引号里</span></span><br><span class="line">例: <span class="keyword">var</span> a=”语言”，““是空串</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean 布尔数字</span></span><br><span class="line">就两个值，<span class="literal">false</span>，<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined：</span></span><br><span class="line">是没有定义的，表示还没赋值,仅一个值 underfined</span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">代表空，占位用，用空值来覆盖</span><br></pre></td></tr></table></figure><h2 id="栈、堆"><a href="#栈、堆" class="headerlink" title="栈、堆"></a>栈、堆</h2><p>array、Object、function、…date、RegExp</p><p>原始值存于 stack(栈) 里面的</p><p>引用值存于 heap(堆) 里面的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = a;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line"></span><br><span class="line">    答案：<span class="number">10</span></span><br><span class="line">    原始值是我把一个值放到另一个值里面，改了第一个值，第二个值不变</span><br></pre></td></tr></table></figure><p>2、引用值（堆数据）大致上放堆 heap 里面</p><blockquote><p>array 数组, Object, function … data,RegExp 正则</p></blockquote><p>var arr = [1,2,3,4,5,false,”abc”]; //这是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr1);</span><br><span class="line"></span><br><span class="line">答案：arr 是 <span class="number">1</span>,<span class="number">2</span>。arr1 是 <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line">引用值是把第一个值放到第二个值里面，改第一个值，第二个值也改变</span><br><span class="line">js 由值决定类型。原始值和引用值唯一的不同是赋值形式不同</span><br></pre></td></tr></table></figure><p>1、 栈 stack</p><p><code>先进去的东西最后出来，有底没有顶。</code></p><blockquote><p>在栈内存里面放东西，先放在底部</p></blockquote><p>2、 堆 heap</p><blockquote><p>怎么放怎么拿，散列结构</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;<span class="keyword">var</span> b = a；是 a 先取出 <span class="number">10</span>，copy 一份放到 b 里面，改变 a 的值，b 的值是不变的，再把 a=<span class="number">20</span>;时 b 的值还是 <span class="number">10</span>，不发生改变</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 =arr;</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br><span class="line">答案：这往[<span class="number">1</span>,<span class="number">2</span>]放 <span class="number">3</span>，arr 和 arr1 都是[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">引用值是在栈内存里面放堆的地址，拷贝的也是地址，所以改变 arr，arr1 也改变了</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 =arr;</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">document</span>.write(arr1);</span><br><span class="line">答案：arr = [<span class="number">1</span>,<span class="number">3</span>];是新建了一个新的房间。arr1 是 <span class="number">1</span>,<span class="number">2</span>,现在是插入新引入值”房间”,</span><br></pre></td></tr></table></figure><h2 id="js-语句基本规则"><a href="#js-语句基本规则" class="headerlink" title="js 语句基本规则"></a>js 语句基本规则</h2><ol><li><p>语句后面要用分号结束“；”但 function test(){}，for(){}，if(){}后面都不用加分号</p></li><li><p>js 语法错误会引发后续代码终止，但不会影响其它 js 代码块</p></li></ol><p>错误分为两种:</p><ol><li><p>低级错误（语法解析错误），不能写中文</p></li><li><p>逻辑错误（标准错误，情有可原，错的那个执行不了）</p></li><li><p>书写格式要规范，“= + / -”两边都应该有空格</p></li></ol><h2 id="js-输出"><a href="#js-输出" class="headerlink" title="js 输出"></a>js 输出</h2><p>console.log();是把信息展示（输出）在控制台</p><p>document.write();是把信息（输出）展示到网页</p><h1 id="js-运算符"><a href="#js-运算符" class="headerlink" title="js 运算符"></a>js 运算符</h1><h2 id="一、运算操作符"><a href="#一、运算操作符" class="headerlink" title="一、运算操作符"></a>一、运算操作符</h2><h3 id="“-”，“-”，“-“，“-”，”-“，“-”"><a href="#“-”，“-”，“-“，“-”，”-“，“-”" class="headerlink" title="“-”，“*”，“/“，“%”，”=“，“()”"></a>“-”，“*”，“/“，“%”，”=“，“()”</h3><blockquote><p>运算符除了 + 号两边的是转换为字符串，其他的运算符全部是转换为 Number 数字类型的</p></blockquote><h4 id="（加号）"><a href="#（加号）" class="headerlink" title="+（加号）"></a>+（加号）</h4><ol><li>“+”作用：数学运算、字符串链接</li></ol><blockquote><p>任何数据类型加字符串都等于字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = “a”+ <span class="literal">true</span> + <span class="number">1</span>; <span class="comment">//打印 atrue1</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> + “a” + <span class="number">1</span> + <span class="number">1</span>; <span class="comment">//打印 1a11</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">1</span> + “a” + <span class="number">1</span> + <span class="number">1</span>; <span class="comment">//打印 2a11，从左向右运算</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">1</span> + “a” +( <span class="number">1</span> + <span class="number">2</span>); <span class="comment">//打印 2a3</span></span><br></pre></td></tr></table></figure><h4 id="（减号、乘号、除号）"><a href="#（减号、乘号、除号）" class="headerlink" title="- * /（减号、乘号、除号）"></a>- * /（减号、乘号、除号）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span> – <span class="number">1</span>； <span class="comment">//等于-1</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">2</span> * <span class="number">1</span>； <span class="comment">//等于 2</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span> / <span class="number">0</span>； <span class="comment">//答案是 NaN，应该得出一个数字类型的数，但是没法表达，</span></span><br><span class="line">就用 <span class="literal">NaN</span> (<span class="literal">NaN</span> 是 Not a <span class="built_in">Number</span> 非数，不是数，但是是数字类型</span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//是 infinity</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">-1</span> / <span class="number">0</span>; <span class="comment">//是-infinity(无穷)</span></span><br></pre></td></tr></table></figure><h4 id="，（摩尔，模，是取余数的意思）"><a href="#，（摩尔，模，是取余数的意思）" class="headerlink" title="%，（摩尔，模，是取余数的意思）"></a>%，（摩尔，模，是取余数的意思）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =<span class="number">5</span>%<span class="number">2</span> <span class="comment">//5%2 是五除二的余数，商二余一</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">5</span>%<span class="number">1</span> <span class="comment">//是五除一的余数，结果是 0</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> % <span class="number">5</span>; <span class="comment">//意思是 1 除以 5 的余数。商 0 余 1</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">4</span>%<span class="number">6</span> <span class="comment">//是四除六的余数，结果是 4</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">4</span>;a % = <span class="number">5</span>;<span class="built_in">document</span>.write(a); <span class="comment">// 4</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span>;a % = <span class="number">5</span>;<span class="built_in">document</span>.write(a); <span class="comment">//0</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">10</span>;a %= <span class="number">2</span>;<span class="built_in">document</span>.write(a); <span class="comment">//0</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">3</span>;a % = <span class="number">4</span>; <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p><code>优先级”=“最弱【赋值符号优先级最低】，”()”优先级较高</code></p><h3 id="“-”，“-”，”-“，“-”，“-“，“-”，“-”"><a href="#“-”，“-”，”-“，“-”，“-“，“-”，“-”" class="headerlink" title="“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”"></a>“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”</h3><h4 id="（加加）"><a href="#（加加）" class="headerlink" title="++（加加）"></a>++（加加）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">10</span>; a = a + <span class="number">1</span>; <span class="comment">//结果 11</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = a + <span class="number">1</span>;写成 a ++是一种简化形式 “++”，是自身加一，再赋值给自身</span><br><span class="line">a ++ 是 a = a + <span class="number">1</span> 的简化形式</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>；<span class="built_in">document</span>.write(++a );<span class="built_in">document</span>.write(a); <span class="comment">//答案 11；11</span></span><br><span class="line">是先执行++，再执行本条语句 <span class="built_in">document</span>.write(++a)</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="built_in">document</span>.write(a ++);<span class="built_in">document</span>.write(a); <span class="comment">//答案 1；2。是先执行</span></span><br><span class="line">语句(<span class="built_in">document</span>.write(a))，再++，所以第一次打印的还是 a，第二次打印 a++后的值</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>；<span class="keyword">var</span> b=++a <span class="number">-1</span>+a++;<span class="built_in">document</span>.write(b + “ ” + a) <span class="comment">//答案 21 12</span></span><br><span class="line">先++a，这个时候 a=<span class="number">11</span>，再<span class="number">-1</span>，再加 a，b 就是 <span class="number">21</span>，最后++，a 就是 <span class="number">12</span></span><br><span class="line">赋值的顺序自右向左，计算的顺序自左向右（按数学来）</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="keyword">var</span> b = a ++ + <span class="number">1</span>；<span class="built_in">document</span>.write(b)； <span class="comment">//答案 2，先执行 var b =a+1，</span></span><br><span class="line">再 a++</span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="keyword">var</span> b = a ++ + <span class="number">1</span>；<span class="built_in">document</span>.write(a)；<span class="built_in">document</span>.write(b)； <span class="comment">//答案 2，2</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="keyword">var</span> b = ++a + <span class="number">1</span>；<span class="built_in">document</span>.write(a)；<span class="built_in">document</span>.write(b)； <span class="comment">//答案 2，3</span></span><br><span class="line">例 <span class="keyword">var</span> i = <span class="number">1</span>;<span class="keyword">var</span> a = i++; <span class="comment">//答案 a = 1; 此时 i 先将值 1 赋给 a,然后自己+1，i=2;</span></span><br><span class="line"><span class="keyword">var</span> b = ++i; <span class="comment">//答案 b = 3；此时 i 先自己+1 为 3.再给 b 赋值，b=3;</span></span><br></pre></td></tr></table></figure><h4 id="–（减减）"><a href="#–（减减）" class="headerlink" title="–（减减）"></a>–（减减）</h4><p><code>“--”，是自身减一，在赋值给自身</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="keyword">var</span> b = a-- + -- a;<span class="built_in">document</span>.write(b); <span class="comment">//答案 0，先执行--a;此时 a 变成</span></span><br><span class="line"><span class="number">0</span>，然后第一个 a 也变成 <span class="number">0</span>，那么 b = <span class="number">0</span>-- + --a</span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="keyword">var</span> b = --a + --a;<span class="built_in">document</span>.write(b); <span class="comment">//答案-1</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="built_in">document</span>.write(a++);<span class="built_in">document</span>.write(a); <span class="comment">//答案 1；2</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="built_in">document</span>.write(++a);<span class="built_in">document</span>.write(a); <span class="comment">//答案 2；2</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>; <span class="keyword">var</span> b = a ++ +<span class="number">1</span>;<span class="built_in">document</span>.write(b); <span class="comment">//答案 2</span></span><br></pre></td></tr></table></figure><p>a 写在后面就后运行，先计算 a+1=2 赋值给 b 后再++</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="keyword">var</span> b = ++a + <span class="number">1</span>;<span class="built_in">document</span>.write(a);<span class="built_in">document</span>.write(b); <span class="comment">//答案 2；3</span></span><br></pre></td></tr></table></figure><h4 id="，-（加等于、减等于）"><a href="#，-（加等于、减等于）" class="headerlink" title="+= ， -=（加等于、减等于）"></a>+= ， -=（加等于、减等于）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>;a ++;a ++;a ++;加十个      简化写法：a +=<span class="number">10</span>;也是 a = a+<span class="number">10</span>;</span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>;a += <span class="number">10</span> + <span class="number">1</span>; <span class="comment">//答案 21</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;a = a + <span class="number">10</span>;等于 a+=<span class="number">10</span></span><br><span class="line">a++是 a +=<span class="number">1</span> 的写法</span><br></pre></td></tr></table></figure><h4 id="（除等于）"><a href="#（除等于）" class="headerlink" title="/=（除等于）"></a>/=（除等于）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">2</span>; <span class="comment">//答案 5，是除二赋给自身的意思</span></span><br></pre></td></tr></table></figure><h4 id="（乘等于）"><a href="#（乘等于）" class="headerlink" title="*=（乘等于）"></a>*=（乘等于）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>;a *=<span class="number">2</span>; <span class="comment">//答案：20，是乘二赋给自身的意思</span></span><br></pre></td></tr></table></figure><h4 id="（模等于）"><a href="#（模等于）" class="headerlink" title="%=（模等于）"></a>%=（模等于）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a=<span class="number">10</span>;a%=<span class="number">2</span>; <span class="comment">//答案：0， 10 能整除 2,余数是 0,取余，余数赋给自身。</span></span><br><span class="line">例 <span class="keyword">var</span> a=<span class="number">3</span>;a%=<span class="number">4</span>; <span class="comment">//答案：3，3 除以 4，余数为 3，余数赋给自身。</span></span><br><span class="line">例 <span class="keyword">var</span> a=<span class="number">0</span>;a%=<span class="number">4</span>; <span class="comment">//答案：0，0 除以 4，余数为 0，余数赋给自身。</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;a% =<span class="number">10</span>; <span class="comment">//答案：1，1 除以 10，余数为 1，余数赋给自身。</span></span><br></pre></td></tr></table></figure><p><strong>作业：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、写出打印结果</span><br><span class="line">    <span class="keyword">var</span> a =(<span class="number">10</span> * <span class="number">3</span> – <span class="number">4</span> / <span class="number">2</span> + <span class="number">1</span>)%<span class="number">2</span>,b=<span class="number">3</span>;b %= a + <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(a++);</span><br><span class="line">    <span class="built_in">document</span>.wtite(“&lt;br&gt;”);</span><br><span class="line">    <span class="built_in">document</span>.write(--b);</span><br><span class="line"><span class="number">2</span>、<span class="keyword">var</span> a =<span class="number">123</span>; <span class="keyword">var</span> b =<span class="number">234</span>;经过计算交换 a，b 的值</span><br><span class="line"></span><br><span class="line">作业答案</span><br><span class="line"><span class="number">1</span>、 <span class="built_in">document</span>.write(a++);是 <span class="number">1</span>（先打出 <span class="number">1</span> 再++）</span><br><span class="line">    <span class="built_in">document</span>.write(--b);是 <span class="number">2</span></span><br><span class="line">    b % =a + <span class="number">3</span>,的模等于 <span class="number">4</span>，除不开再赋值给 b，b 还是 <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、 方法一普通方法：<span class="keyword">var</span> c = a; a = b; b = c;<span class="built_in">document</span>.write(a ,b);</span><br><span class="line"></span><br><span class="line">    方法二 a = a + b; b = a – b; a = a – b; <span class="built_in">document</span>.write(a ,b);</span><br></pre></td></tr></table></figure><h2 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h2><blockquote><p>“&gt;”，”&lt;”，”==”，“&gt;=”，“&lt;=”，”!=”比较结果为 boolean 值</p></blockquote><p>但凡是运算符，都是要有运算的</p><p>用到布尔值，true 或 false</p><p>字符串的比较，比的是 ASCII 码（七位二进制 0000000）</p><h3 id="gt-，-lt-（大于、小于）"><a href="#gt-，-lt-（大于、小于）" class="headerlink" title="&gt;， &lt;（大于、小于）"></a>&gt;， &lt;（大于、小于）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="string">"a"</span>&gt;<span class="string">"b"</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &gt; <span class="number">2</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &lt; <span class="number">2</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="string">"1"</span>&gt;<span class="string">"8"</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="string">"10"</span>&gt;<span class="string">"8"</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案 false，不是十和八比，是字符串一</span></span><br><span class="line">零和八比，先用开头的一和八比，比不过就不看第二位了；一样的就拿零和八比</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案 false</span></span><br><span class="line">    运算结果为真实的值</span><br></pre></td></tr></table></figure><h3 id="，等于"><a href="#，等于" class="headerlink" title="==，等于"></a>==，等于</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> == <span class="number">2</span>; <span class="comment">//答案是说 1 等不等于 2，因为 1 肯定不等于 2，所以值为 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">NaN</span> == <span class="literal">NaN</span>; <span class="comment">//答案是 false，NaN 不等于任何东西，包括他自己</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">undefined</span> == underfined; <span class="comment">//答案是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = infinity == infinity; <span class="comment">//答案是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">NaN</span> == <span class="literal">NaN</span>; <span class="comment">//答案是 false。非数 NaN 是不等于自己的</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>NaN 得不出数，又是数字类型，就是 NaN</strong></p></blockquote><h3 id="gt-、-lt-、-（大于等于、小于等于、非等于）"><a href="#gt-、-lt-、-（大于等于、小于等于、非等于）" class="headerlink" title="&gt;=、&lt;=、!=（大于等于、小于等于、非等于）"></a>&gt;=、&lt;=、!=（大于等于、小于等于、非等于）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比较结果为 boolean 值：<span class="literal">true</span> 和 <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="三、逻辑运算符：“-amp-amp-”，“-”，“-“运算结果为真实的值"><a href="#三、逻辑运算符：“-amp-amp-”，“-”，“-“运算结果为真实的值" class="headerlink" title="三、逻辑运算符：“&amp;&amp;”，“||”，“!“运算结果为真实的值"></a>三、逻辑运算符：“&amp;&amp;”，“||”，“!“运算结果为真实的值</h2><h3 id="“-amp-amp-”与运算符（与、并且）"><a href="#“-amp-amp-”与运算符（与、并且）" class="headerlink" title="“&amp;&amp;”与运算符（与、并且）"></a>“&amp;&amp;”与运算符（与、并且）</h3><blockquote><p>两个表达式：先看第一个表达式转换成布尔值的结果是否为真，如果结果为真，那么它会看第二个表达式转换为布尔值的结果，然后如果只有两个表达式的话，只看<br>看第二个表达式，就可以返回该表达式的值了，如果第一位布尔值为 false，不看后面的，返回第一个表达式的值就可以了</p></blockquote><p><code>运算符就是要求结果</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span>;  <span class="comment">//答案 2，如果第一位 1 为真，结果就为第二位的值 2</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span> + <span class="number">2</span>; <span class="comment">//答案 4，如果 1 为真，结果就为 4</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span> &amp;&amp; <span class="number">2</span> + <span class="number">2</span>; <span class="comment">//答案 0</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">1</span> &amp;&amp; <span class="number">8</span>; <span class="comment">//答案 8，先看第一个是否为真，为真再看第二个，</span></span><br><span class="line"></span><br><span class="line">中途如果遇到 <span class="literal">false</span>，那就返回 <span class="literal">false</span> 的值</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span> + <span class="number">1</span> &amp;&amp; <span class="number">1</span> – <span class="number">1</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案 0</span></span><br></pre></td></tr></table></figure><p><code>如果是三个或多个表达式，会先看第一个表达式是否为真，如果为真，就看第二个表达式，如果第二个也为真，就看第三个表达式（如果为真就往后看，一旦遇到假就返回到假的值），如果第三个是最后一个表达式，那就直接返回第三个的结果</code></p><blockquote><p>如果第一个是假，就返回第一个值，当是真的时候就往后走，一旦遇到假，就返回被认定为 false(假) 的值：转换为布尔值会被认定为 false 的值 undefined， null， NaN， “”（空串）， 0， false</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="number">2</span>&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">document</span>.write(‘成哥很帅’) <span class="comment">//意思是如果 2 大于 1，那么就打印成哥很帅，如果前面真才能执行后面的（相当于短路语句使用）</span></span><br><span class="line">   &amp;&amp;与 运算符是有中断作用的，当短路语句使用(如果。。那么。。)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = ...; <span class="comment">//执行一个语句，会用到 data</span></span><br><span class="line">    data&amp;&amp;执行一个语句全用到 data</span><br><span class="line">data &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params">data</span>);</span></span><br></pre></td></tr></table></figure><h3 id="amp-与运算-我们一般不用"><a href="#amp-与运算-我们一般不用" class="headerlink" title="&amp;与运算 我们一般不用"></a>&amp;与运算 我们一般不用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> &amp; <span class="number">2</span>;<span class="built_in">document</span>.write(num); <span class="comment">//答案 0</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> &amp; <span class="number">1</span>;<span class="built_in">document</span>.write(num); <span class="comment">//答案 1</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> &amp; <span class="number">3</span>;<span class="built_in">document</span>.write(num); <span class="comment">//答案 1</span></span><br></pre></td></tr></table></figure><ol><li>上下一与，不同为 0，相同为 1</li></ol><ul><li>在二进制中，是 1（为了对齐补的 0） 0 1</li><li>在二进制中，是 11 1 1</li><li>运算结果 0 1</li></ul><h3 id="“-”或运算符（或者）"><a href="#“-”或运算符（或者）" class="headerlink" title="“||”或运算符（或者）"></a>“||”或运算符（或者）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> || <span class="number">3</span>; <span class="comment">//答案 1</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">0</span> || <span class="number">3</span>; <span class="comment">//答案 3</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">0</span> || <span class="literal">false</span>; <span class="comment">//答案是 false</span></span><br></pre></td></tr></table></figure><p><code>看第一个表达式是否为真，如果为真，则返回第一个值，碰到真就返回</code></p><p><code>如果第一个表达式是假，就看第二个表达式，如果第二个是最后一个，就返回第二个的值</code></p><p><code>关注真假的说法：全假才为假，有一个真就为真</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">0</span> || <span class="literal">false</span> || <span class="number">1</span>; <span class="built_in">document</span>.write(num); <span class="comment">//答案 1</span></span><br><span class="line">例:</span><br><span class="line">    div .onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    非 IE 浏览器直接取 e 值</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> event = e;</span><br><span class="line">    IE 浏览器存在 <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    写成下面这样就解决了兼容性。在所有的浏览器中都好使</span><br><span class="line">    div .onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;&#125;</span><br></pre></td></tr></table></figure><h3 id="“-“非运算符，否的意思"><a href="#“-“非运算符，否的意思" class="headerlink" title="“!“非运算符，否的意思"></a>“!“非运算符，否的意思</h3><p>先转成布尔值，再取反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = !<span class="number">123</span>; <span class="built_in">document</span>.write(a); <span class="comment">//答案 false。123 的布尔值是 true，取反是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = !<span class="string">""</span>;  <span class="built_in">document</span>.write(a); <span class="comment">//答案 true。空串””布尔值是 false，取反是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = !!<span class="string">""</span>; <span class="built_in">document</span>.write(a); <span class="comment">//答案 false，取反后，再反过来，结果不变</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">true</span>; a =!a; <span class="built_in">document</span>.write(a) <span class="comment">//答案 false，自身取反，再赋值给自身</span></span><br></pre></td></tr></table></figure><p><code>!=（非等于）是表达它们不等于</code></p><p><code>被认定为 false 的值：转换为布尔值会被认定为 false 的值 undefined， null， NaN，&quot;&quot;（空串）， 0， false</code></p><h2 id="（逗号）操作符"><a href="#（逗号）操作符" class="headerlink" title=", （逗号）操作符"></a>, （逗号）操作符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> a = (<span class="number">1</span> - <span class="number">1</span>, <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line">    答案：<span class="number">2</span>；</span><br><span class="line"></span><br><span class="line">，逗号 是一个运算符，由于有 括号() 的加持，所以先执行 (，逗号运算符)</span><br><span class="line"></span><br><span class="line">逗号 操作符的意思是先看前面的表达式，如果前面的表达式需要‘计算’的话，可以先计算，然后在计算后面的表达式(如果后面的表达式用计算的话)，都计算完之后，把后面的表达式计算结果返回回去。</span><br></pre></td></tr></table></figure><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="一、If-语句-if、if-else-if-if-lt-—-gt-amp-amp-转换"><a href="#一、If-语句-if、if-else-if-if-lt-—-gt-amp-amp-转换" class="headerlink" title="一、If 语句 if、if else if if &lt;—&gt; &amp;&amp; 转换"></a>一、If 语句 if、if else if if &lt;—&gt; &amp;&amp; 转换</h2><p><code>if(条件判断){ 当条件成立时，执行里面的执行语句 } 当 if() 中的条件成立时，才能执行{}内的语句 当条件转化为布尔值，如果为 true 就执行；如果为 false 就不执行</code></p><h3 id="放在-if-中是或者的意思，有一个是真就可以了"><a href="#放在-if-中是或者的意思，有一个是真就可以了" class="headerlink" title="|| 放在 if 中是或者的意思，有一个是真就可以了"></a><strong>|| 放在 if 中是或者的意思，有一个是真就可以了</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">if</span>(<span class="number">1</span> &lt; <span class="number">2</span>)&#123;<span class="built_in">document</span>.write(“老邓很丑”);&#125;</span><br><span class="line">例 <span class="keyword">if</span> ( <span class="number">1</span> &gt; <span class="number">0</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">9</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="amp-amp-放在-if-中的，全真才为真，-amp-amp-是并且的意思"><a href="#amp-amp-放在-if-中的，全真才为真，-amp-amp-是并且的意思" class="headerlink" title="&amp;&amp;放在 if 中的，全真才为真，&amp;&amp;是并且的意思"></a><strong>&amp;&amp;放在 if 中的，全真才为真，&amp;&amp;是并且的意思</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">if</span> ( <span class="number">1</span> &gt; <span class="number">0</span> || <span class="number">8</span> &gt; <span class="number">9</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="if-和-amp-amp-的互相转化"><a href="#if-和-amp-amp-的互相转化" class="headerlink" title="if 和&amp;&amp;的互相转化"></a><strong>if 和&amp;&amp;的互相转化</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html</span><br><span class="line">&lt;!-- </span><br><span class="line">    <span class="number">90</span>一<span class="number">100</span>       alibaba</span><br><span class="line">    <span class="number">80</span>一<span class="number">90</span>        tencent toutiao meituan 滴滴</span><br><span class="line">    <span class="number">70</span>一<span class="number">80</span>        baidu eleme xiecheng <span class="number">58</span>赶集</span><br><span class="line">    <span class="number">60</span>一<span class="number">70</span>        蘑菇街</span><br><span class="line">    <span class="number">60</span>以下        你肯定不是我教的!!! </span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> score = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">"input"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"alibaba"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"tencent"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"baidu"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"mogujie"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"Oh my god!!! "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><code>不能写 (90 &lt; score &lt; 100),这样写会先比 90 &lt; score,等于 true 以后再跟 100 比</code></p><p><code>else if 满足了第一条就不看第二条了，用 else if 要满足条件与条件之间互斥，不能有交叉点。除了上面所有以外的。else if 除了这个以外，满足第一个就不看了，不满足就看后面的</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    else if 除了这以外在看这个满不满足。满足条件后就不看了，上面的写法不够简洁</span></span><br><span class="line"><span class="comment">    下面 是 上面这个条件的补集</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> score = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">"input"</span>));</span></span><br><span class="line"></span><br><span class="line">  if (score &gt; 90 &amp;&amp; score &lt;= 100) &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"alibaba"</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">90</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"tencent"</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">80</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"baidu"</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"mogujie"</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"Oh my god!!! "</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="amp-amp-和-比较常用在条件判断中"><a href="#amp-amp-和-比较常用在条件判断中" class="headerlink" title="&amp;&amp;和 || 比较常用在条件判断中"></a><strong>&amp;&amp;和 || 比较常用在条件判断中</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span> &gt; <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上面与右边效果完全一样 <span class="number">1</span> &gt; <span class="number">2</span> &amp;&amp; <span class="built_in">document</span>.write(<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure><h2 id="二、for-循环-for-循环不固定，非常灵活"><a href="#二、for-循环-for-循环不固定，非常灵活" class="headerlink" title="二、for 循环(for 循环不固定，非常灵活)"></a>二、for 循环(for 循环不固定，非常灵活)</h2><blockquote><p>格式 for (var i = 0; i &lt; 10; i++) { }</p></blockquote><p><code>for 是关键字，（）括号里面三个语句用两个分号隔开，{}里面是循环体</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印十个 a，写成：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>执行顺序如下</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) <span class="keyword">if</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘a’)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把条件判断放到 if 里面,条件判断成立，就执行&#123;&#125;中间的执行体</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) i ++</span><br><span class="line"><span class="comment">// 看 i++，此时 i 变成 1，i = 1；</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>) <span class="keyword">if</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘a’)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把条件判断放到 if 里面,条件判断成立，就执行&#123;&#125;中间的执行体</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>) i ++</span><br><span class="line"><span class="comment">// 看 i++，此时 i 变成 1，i=1；</span></span><br><span class="line">——————如此反复</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先执行一遍(<span class="number">1</span>)，</span><br><span class="line">判断(<span class="number">2</span>)执行语句成不成立，条件成立就执行(<span class="number">3</span>),</span><br><span class="line">判断(<span class="number">2</span>)执行语句成不成立，条件成立就执行(<span class="number">3</span>),</span><br><span class="line">......当有一次判断不成立，就停止</span><br></pre></td></tr></table></figure><blockquote><p>因为看的是执行顺序，写外面也可以，执行顺序是一样，打印十个 a，也可以写成：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印十个 a 也可以写成:</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> cout = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; i; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  i++;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">11</span>) &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例:打印 0-9:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求 0-9 的和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  count += i;</span><br><span class="line">  <span class="built_in">document</span>.write(count + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 100 以内能被 3 整除，或者能被 5 整除，或者能被 7 整除的数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span> || i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"i"</span> + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 for 循环打印一百个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环中的三句只能写一句，打印 100 个数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">100</span>; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环中的函数体里面只能写一句，打印 100 个数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (; i--; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、while-do-while"><a href="#三、while-do-while" class="headerlink" title="三、while, do while"></a>三、while, do while</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p><code>while 循环是 for 循环的简化版 for( ； ； ){}，while 循环底层机制是 for 循环。</code></p><p><code>for ( ; 只在这一部分写，前后不写 ; ){}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上下这两个完全相等;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 死循环 never-ending loop 无限循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例打印一百以内，7 的倍数就输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"i"</span> + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例打印一百以内，7 的倍数或逢 7 就输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><p><code>do while 是不管满不满足条件都会先执行一次，再判断成不成立，如果成立才会执行 第二次，不成立就停止, 一般没人用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li><p>（先找规律，再写出来） 提示：var n = parseIn(window.prompt(‘input’));</p></li><li><p>JS 可以进行浮点计算</p></li></ul><ol><li>计算 2 的 n 次幂，n 可输入，n 为自然数。</li><li>计算 n 的阶乘，n 可输入。即 5！=5<em>4</em>3<em>2</em>1，最好写个 if</li><li>著名的斐波那契额数列(这个数列从第 3 项开始，每一项都等于前两项之和) 1 1 2 3 5 8 输出第 n 项</li><li>编写一程序，输入一个三位数的正整数，输出时反向输出。如：输入 456,输出 654</li><li>输入 a,b,c 三个数字，打印出最大的。</li><li>打印出 100 以内的质数（从 1 除到他本身，只能有两个因数）</li></ol><h2 id="作业答案"><a href="#作业答案" class="headerlink" title="作业答案"></a>作业答案</h2><p>1、原有结果 * 2,mul 是存上一个数的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.promt(<span class="string">"input"</span>));</span><br><span class="line">    <span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        mul *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"mul"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2、计算 n 的阶乘，n 可输入。即 5！=5<em>4</em>3<em>2</em>1，最好写个 if</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.promt(<span class="string">"input"</span>));</span><br><span class="line">    <span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n; i ++)&#123;</span><br><span class="line">        mul *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(mul);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>3、斐不那契数列 第六位是四次运算，第七位是五次运算（第三位=第一位+第二位） 第一次计算的完整过程是把第一位和第二位相加，等于第三位，并且把游标向后挪 一位。下面 for（里面的 i 是控制循环圈数的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">"input"</span>));</span><br><span class="line">    <span class="keyword">var</span> first = <span class="number">1</span>;</span><br><span class="line">        second = <span class="number">1</span>;</span><br><span class="line">        third;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i ++)&#123;</span><br><span class="line">            third = first + second;</span><br><span class="line">            forst = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(third);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>4、取模除减。先把 456 提出出来，再反过来。6 是取模除减%10 余 6。再用 456 减 6， 剩下 450；450%100 是 50，50 除以 10，取出 5，450-50 剩下 400；400%100，再反着乘一遍，十位乘以 10，百位乘以 100。（中间的位数其实可以不动）</p><p>5、输入 a,b,c 三个数字，打印出最大的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">"input"</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.promot(<span class="string">"input"</span>));</span><br><span class="line"><span class="keyword">var</span> c = pars0eInt(<span class="built_in">window</span>.prompt(<span class="string">"input"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; c) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>, write(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、有一个判断质数的算法,看看每一个 i 是不是质数,从自身开始除一直除到 1，只能被自己和 1 整除，只能整除 2 次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 看一看每一个 i 是否是质数</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>以下是最简单的方法：从 1 到 10 能整除，除平方数以下的</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 看一看每一个 i 是否是质数</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.sqrt(i); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="条件语句补充"><a href="#条件语句补充" class="headerlink" title="条件语句补充"></a>条件语句补充</h1><h2 id="一、switch-case-条件判断语句"><a href="#一、switch-case-条件判断语句" class="headerlink" title="一、switch case 条件判断语句"></a>一、switch case 条件判断语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件判断)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(条件)&#123;</span><br><span class="line">    <span class="keyword">case</span> 写条件：里面判是否相符：</span><br><span class="line">        如果相符合就执行 <span class="keyword">case</span> 后面的语句比如 <span class="built_in">console</span>.log(‘a’)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch 不负责任，如果判断了 a 是符合条件的，也会把后面的连带打印出来</code></p><p><code>加个 break，就可以终止语句</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            condole.log(<span class="string">"b"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            condole.log(<span class="string">"c"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><code>switch 找到满足要求的语句后，后面的语句虽然不判断了，但是也会执行出来</code></p><p><code>加个 break，就可以终止 swich case 语句</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            condole.log(<span class="string">"b"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            condole.log(<span class="string">"c"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>例 if( score == 90){}else if ( score == 100){}</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="built_in">window</span>.prompt(<span class="string">"input"</span>);</span><br><span class="line">    <span class="keyword">switch</span>(date)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"monday"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"working"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"tuesday"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"working"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"wednesday"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"working"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"thursday"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"working"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"friday"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"working"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"周六"</span>:</span><br><span class="line">            condole.log(<span class="string">"relaxing"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"周日"</span>:</span><br><span class="line">            condole.log(<span class="string">"relaxing"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>简化写法:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="built_in">window</span>.prompt(<span class="string">"input"</span>);</span><br><span class="line">    <span class="keyword">switch</span>(date)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"monday"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"tuesday"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"wednesday"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"thursday"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"friday"</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"working"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"周六"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"周日"</span>:</span><br><span class="line">            condole.log(<span class="string">"relaxing"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、break-的标准定义是终止循环，break-必须要放在循环里面，switch-for-while-都是循环"><a href="#二、break-的标准定义是终止循环，break-必须要放在循环里面，switch-for-while-都是循环" class="headerlink" title="二、break 的标准定义是终止循环，break 必须要放在循环里面，switch, for,while 都是循环"></a>二、break 的标准定义是终止循环，break 必须要放在循环里面，switch, for,while 都是循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    i ++;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break 终止的是 while，对 if 没有影响</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">从 <span class="number">0</span> 开始加，加到 <span class="number">100</span> 以上就停止</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span>(sum &gt; <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、continue-继续、终止本次循环，来进行下一次循环"><a href="#三、continue-继续、终止本次循环，来进行下一次循环" class="headerlink" title="三、continue 继续、终止本次循环，来进行下一次循环"></a>三、continue 继续、终止本次循环，来进行下一次循环</h2><p>终止本次循环，后面的都不执行了，来进行下一次的循环</p><p>js 里面是没有 goto 的，c 语言里面有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">当 i 是 <span class="number">7</span> 的倍数，或尾数是 <span class="number">7</span> 的时候，不打印</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span>)&#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面写法更好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="初识引用值"><a href="#初识引用值" class="headerlink" title="初识引用值"></a>初识引用值</h1><h2 id="一、数组（下面方括号的），arr-也是数组"><a href="#一、数组（下面方括号的），arr-也是数组" class="headerlink" title="一、数组（下面方括号的），arr =也是数组"></a>一、数组（下面方括号的），arr =也是数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,”abc”,<span class="literal">undefined</span>];</span><br><span class="line">arr [<span class="number">0</span>] 代表查数组的第一位，因为数字是从 <span class="number">0</span> 开始的算的</span><br><span class="line">arr [<span class="number">0</span>] = <span class="number">3</span>; 是指把数组的第一位改成 <span class="number">3</span>，显示 <span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>, ”abc”,<span class="literal">undefined</span></span><br><span class="line">arr.length;是数组的长度，有多少位就有多少</span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">//答案是 8 位</span></span><br></pre></td></tr></table></figure><p>1.<strong>利用 for 循环把数组中的每一位都拿出来——遍历</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="string">"abc"</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.letter; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>把数组中的每一位都改成 1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="string">"abc"</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<strong>把数组中的每一位都加 1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, , <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、对象-object"><a href="#二、对象-object" class="headerlink" title="二、对象 object"></a>二、对象 object</h2><blockquote><p>面向对象的编程方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    里面存属性和方法</span><br><span class="line">    key 属性名：value 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>在{}面用。属性与属性之间用逗号隔开</code></p><p><code>属性值可以双引号或单引号；属性名是为了方便找到他，只是一个辅助</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        lastName : <span class="string">"Deng"</span>,</span><br><span class="line">        age : <span class="number">40</span>,</span><br><span class="line">        sex : <span class="literal">undefined</span>,</span><br><span class="line">        wife : <span class="string">"xiaoliu"</span>,</span><br><span class="line">        father : <span class="string">"dengdaye"</span>,</span><br><span class="line">        son : <span class="string">"xiaodeng"</span>,</span><br><span class="line">        handsome :<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(deng.lastName); <span class="comment">//取值方式 deng.lastName</span></span><br><span class="line">赋值 deng.lastName = “old deng”;</span><br><span class="line">    <span class="built_in">console</span>.log(deng.lastName);</span><br></pre></td></tr></table></figure><h1 id="编程形式的区别"><a href="#编程形式的区别" class="headerlink" title="编程形式的区别"></a>编程形式的区别</h1><p><code>面向过程，如 c (第一步干嘛，第二步干嘛)</code></p><p><code>面向对象（对象 object） （现在 js 是一半面向过程，一半面向对象，前面学的都是面向过程）</code><br>``</p><h1 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h1><blockquote><p>typeof 能返回的六种数据类型（区分数字类型）</p></blockquote><p><code>number、string、boolean、undefined、object、function</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">123</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//返回 number</span></span><br></pre></td></tr></table></figure><p><code>写成 console.log(typeof num );也可以,不过最好加括号</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = &#123;&#125;; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//泛泛的引入值都返回 object</span></span><br><span class="line">例 <span class="keyword">var</span> num = [];<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//泛泛的引入值都返回 object</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="literal">null</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//答案 null 返回 object，最早是代替空对象的</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="literal">undefined</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//答案返回 undefined</span></span><br><span class="line">例 <span class="keyword">var</span> num = fuction()&#123;&#125;;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">// 答案返回 function</span></span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> +“<span class="number">1</span>”; <span class="comment">//显示 11</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> *“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:1</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> -“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:0</span></span><br><span class="line">例 <span class="keyword">var</span> num = “<span class="number">2</span>” -“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:1</span></span><br><span class="line">例 <span class="keyword">var</span> num = “<span class="number">2</span>” *“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:2</span></span><br></pre></td></tr></table></figure><blockquote><p>以上例子说明 js 有类型转换</p></blockquote><h2 id="一、显示类型转换"><a href="#一、显示类型转换" class="headerlink" title="一、显示类型转换"></a>一、显示类型转换</h2><h3 id="Number-mix-是想把里面的东西转换成数字"><a href="#Number-mix-是想把里面的东西转换成数字" class="headerlink" title="Number(mix) 是想把里面的东西转换成数字"></a>Number(mix) 是想把里面的东西转换成数字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(‘<span class="number">123</span>’);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">123</span>，把字符串类型的 <span class="number">123</span> 转换成了 number 类型</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">123</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">123</span>，上面那一行的 <span class="built_in">Number</span> 是为了把()里面转换成数字类型</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">1</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">0</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">0</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">-123</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">-123</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">123</span>abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="literal">NaN</span></span><br></pre></td></tr></table></figure><h3 id="parseInt-string-radix"><a href="#parseInt-string-radix" class="headerlink" title="parseInt(string,radix)"></a>parseInt(string,radix)</h3><blockquote><p>parse 是转化，Int 是整型，整数，目的是把里面转换成整数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo =”<span class="number">123</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number:<span class="number">123</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123.9</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">123</span>，此处是直接去掉小数，不是四舍五入</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">10</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo ,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">16</span></span><br></pre></td></tr></table></figure><blockquote><p>var num = parseInt(demo ,radix); //radix 是基底的意思</p></blockquote><p><strong>radix 写成 16，系统会认为是以 16 进制为基底， 10（一零）是 16 进制的一零，是<br>以 16 进制为基底，把他转成为 10 进制的数字（就是 16），上面是以目标进制为基底，<br>转换成十进制（radix 范围是 2-36）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">3</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo ,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="literal">NaN</span></span><br><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “b”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo ,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">11</span></span><br><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">123</span>abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">123</span></span><br><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100</span>px”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>parseInt 从数字类开始看，看到非数字类为止，返回原来的数</p></blockquote><h3 id="parseFloat-string"><a href="#parseFloat-string" class="headerlink" title="parseFloat(string)"></a>parseFloat(string)</h3><blockquote><p>parseFloat(string)转换成浮点数字，就是正常小数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100.2</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100.2</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100.2</span><span class="number">.3</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100.2</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100.2</span>abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100.2</span></span><br></pre></td></tr></table></figure><blockquote><p>parseFloat 从数字类开始看，看到除了第一个点以外的非数字类为截止，返回前面的数</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><blockquote><p>把 谁 变成字符串类型 (以 10 为基底转换为目标进制)（undefined 和 null 不可以用 toString 方法）；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 string: <span class="number">123</span>。相当于把 <span class="number">123</span> 转换字符串。</span><br></pre></td></tr></table></figure><blockquote><p>想把谁转换成字符串，就写成谁.toString，上面是想把 demo 转换成 toString，写成 demo.toString</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示报错，<span class="literal">undefined</span> 和 <span class="literal">null</span> 不能用 toString</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案 <span class="number">173</span>，把 <span class="number">123</span> 转成为八进制</span><br></pre></td></tr></table></figure><blockquote><p>这里的 radix 意思是以十进制为基底，转换成目标进制（即 8 进制）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案 <span class="number">12</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案 <span class="number">24</span>。以十进制为基底，把 <span class="number">20</span> 转换成 <span class="number">8</span> 进制，就是 <span class="number">24</span></span><br><span class="line">例:</span><br><span class="line">    给你一个二进制的数，转换成十六进制，是先从二进制到十进制再到十六进制</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10101010</span>;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="built_in">parseInt</span>(num, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(test.toString(<span class="number">16</span>));</span><br><span class="line">    答案 aa</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="built_in">parseInt</span>(num, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(test.toString(<span class="number">16</span>));</span><br><span class="line">    答案 <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="String-mix"><a href="#String-mix" class="headerlink" title="String(mix)"></a>String(mix)</h3><blockquote><p>String(mix)转换成字符串，写什么都成了字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123.234</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">String</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 string: <span class="number">123.234</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">String</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 string: <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><blockquote><p>Boolean()转换成布尔值 false 和 true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">String</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 boolean: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed"></a>toFixed</h3><blockquote><p>toFixed 就是保留小数点几位</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">var</span> num = <span class="number">123.456789</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">3</span>));</span><br><span class="line">效果：</span><br><span class="line">num = <span class="number">123.457</span>(四舍五入)</span><br></pre></td></tr></table></figure><h2 id="二、隐式类型转换"><a href="#二、隐式类型转换" class="headerlink" title="二、隐式类型转换"></a>二、隐式类型转换</h2><ol><li><p>隐式类型转换是跟你转换了也不知道</p></li><li><p>隐式类型转换内部隐式调用的是显示的方法</p></li><li><p>隐式类型转换包括 isNaN () ，++，–， +/-（一元正负），+，*，% ，，&amp;&amp;，|| ，！，&lt;，&gt;，&lt;= ，&gt;= ，== ，!=</p></li></ol><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN ();"></a>isNaN ();</h3><blockquote><p>isNaN ();当你把一个数放到()里，它能判断是不是 NaN，先比括号里面的放到 number 里面转换，然后返回来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">//答案 true</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(“<span class="number">123</span>”); <span class="comment">//答案 false</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(“abc”); <span class="comment">//答案 true。会调用 number，先把“abc”</span></span><br></pre></td></tr></table></figure><blockquote><p>放 number 里面转换，通过 number 的转换再和 NaN 比对，如果相等就是 true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>); <span class="comment">//答案 false，在 number 里面放 null 是 0，不是 NaN</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>); <span class="comment">//答案 true</span></span><br></pre></td></tr></table></figure><h3 id="–（加加减减）-（一元正负）"><a href="#–（加加减减）-（一元正负）" class="headerlink" title="++/–（加加减减） +/-（一元正负）"></a>++/–（加加减减） +/-（一元正负）</h3><ol><li>++/–（加加减减）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = “<span class="number">123</span>”;</span><br><span class="line">    a ++;</span><br><span class="line">    答案 <span class="number">124</span>，++这个符号放到这里，还没运算之前，先把前面的 a 转换成 number 的 <span class="number">123</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = “abc”;</span><br><span class="line">    a ++;</span><br><span class="line">    答案 <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><ol start="2"><li>+/-（一元正负）</li></ol><blockquote><p>+a;-a;正 a 和负 a 都会变换成数字</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =+”abc”;</span><br><span class="line"><span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">答案 <span class="literal">NaN</span>:number。</span><br></pre></td></tr></table></figure><blockquote><p>尽管转换不成数字，也会转换成数字类型，因为里面隐式的调用了一个 number</p></blockquote><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><blockquote><p>+隐式类型会转换成 string，当加号两侧有一个是字符串，就用调用 string，把两个都变成字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = “a” +<span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="* , %"></a>* , %</h3><blockquote><p>*和% 乘和模都会转换成 number</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = “<span class="number">1</span>” *<span class="number">1</span>; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="number">1</span>：number</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = “a” *<span class="number">1</span>; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="number">1</span>：number，先是 number(“a”)的结果乘以 number(<span class="number">1</span>)的结果，最后是 <span class="literal">NaN</span>*<span class="number">1</span>，还是 <span class="literal">NaN</span>，但是数据类型是 number</span><br></pre></td></tr></table></figure><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp; || !"></a>&amp;&amp; || !</h3><blockquote><p>与或非，都是有类型转换的，不过是返回的是表达式的值，不是隐式类型转换的值，但是判断是一个类型转换的值</p></blockquote><h3 id="lt-，-gt-，-lt-，-gt"><a href="#lt-，-gt-，-lt-，-gt" class="headerlink" title="&lt; ， &gt; ， &lt;= ， &gt;="></a>&lt; ， &gt; ， &lt;= ， &gt;=</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span> &gt; “<span class="number">2</span>”; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="literal">false</span>:boolean，有数字相比较的，就会隐士类型转换成数字类型</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =”<span class="number">3</span>” &gt; “<span class="number">2</span>”; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案这个没类型转换，这个比的是 ASCⅡ</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =”<span class="number">3</span>” &gt; <span class="number">2</span>; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="literal">true</span>：boolean 会转换成数字，因为数字优先</span><br></pre></td></tr></table></figure><h3 id="，-，"><a href="#，-，" class="headerlink" title="== ， ! ， ="></a>== ， ! ， =</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span> == “<span class="number">1</span>”; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="literal">true</span>:boolean，也有隐士类型转换</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span> == <span class="literal">true</span>; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案相等</span><br></pre></td></tr></table></figure><p>！= 也是这样<br>特殊东西，在控制台操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="literal">false</span> &gt; <span class="literal">true</span>; <span class="comment">//答案 false，会先转换成数字，0&gt;1 当然是错的</span></span><br><span class="line">例: <span class="number">2</span> &gt; <span class="number">1</span> &gt; <span class="number">3</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="number">2</span> &gt; <span class="number">3</span> &lt; <span class="number">1</span>; <span class="comment">//答案 true</span></span><br><span class="line">例: <span class="number">10</span> &gt; <span class="number">100</span> &gt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="number">100</span> &gt; <span class="number">10</span> &gt; <span class="number">0</span>; <span class="comment">//答案 true</span></span><br></pre></td></tr></table></figure><blockquote><p>以上都是挨个算的，先看前面的是 true 还是 false，再和后面的比，不是顺着下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="literal">undefined</span> &gt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">undefined</span> == <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">undefined</span> &lt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">null</span> &gt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">null</span> == <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">null</span> &lt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">//答案 true</span></span><br><span class="line">例: <span class="literal">NaN</span> == <span class="literal">NaN</span>; <span class="comment">//答案 false，NaN 是唯一一个连自己都不等于的</span></span><br></pre></td></tr></table></figure><h2 id="三、不发生类型转换"><a href="#三、不发生类型转换" class="headerlink" title="三、不发生类型转换"></a>三、不发生类型转换</h2><h3 id="绝对等于（三个等号）-绝对不等于"><a href="#绝对等于（三个等号）-绝对不等于" class="headerlink" title="===绝对等于（三个等号） !==绝对不等于"></a>===绝对等于（三个等号） !==绝对不等于</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="number">1</span> === <span class="number">1</span> <span class="comment">//答案 true</span></span><br><span class="line">例 <span class="number">1</span> === “<span class="number">1</span>” <span class="comment">//答案 false</span></span><br><span class="line">例 <span class="number">1</span> !== “<span class="number">1</span>” <span class="comment">//答案 true</span></span><br><span class="line">例 <span class="number">1</span> !== <span class="number">1</span> <span class="comment">//答案 false</span></span><br><span class="line">例 <span class="literal">NaN</span> =<span class="literal">NaN</span> <span class="comment">//答案 false 特殊的</span></span><br><span class="line">例 <span class="built_in">console</span>.log(a); <span class="comment">//如果定量没定义就直接访问，就 a is not defined 报错；</span></span><br></pre></td></tr></table></figure><blockquote><p>有一种特殊情况，当且仅当把未定义的变量放到 console.log(typeof(a));里面就访问，<br>不报错，返回 undefined</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a)); <span class="comment">//答案 undefined，这个 undefined 是字符串</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a))); <span class="comment">//答案 string。console.log(typeof(typeof(a)));</span></span><br></pre></td></tr></table></figure><p><code>可以先解析成 console.log(typeof(“undefined”));再返回一次就是 string 字符串</code></p><p><code>上面考的是 typeof(a)返回的六种类型的值（number、string、boolean、undefined、object、function）都是 undefined 字符串</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">作业</span><br><span class="line">例 alert(<span class="keyword">typeof</span>(a)); <span class="comment">//返回 string</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(<span class="literal">undefined</span>)); <span class="comment">//返回 string，undefined</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(<span class="literal">NaN</span>)); <span class="comment">//返回 number</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(<span class="literal">null</span>)); <span class="comment">//返回 object</span></span><br><span class="line">例 <span class="keyword">var</span> a = “<span class="number">123</span>abc”; <span class="comment">//返回 string</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(+a)); <span class="comment">//返回 number，NaN</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(!!a)); <span class="comment">//返回 boolean</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(a + “”)); <span class="comment">//返回 string</span></span><br><span class="line">例 alert(<span class="number">1</span> == “<span class="number">1</span>”); <span class="comment">//显示 true</span></span><br><span class="line">例 alert(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">//显示 false</span></span><br><span class="line">例 alert(<span class="literal">NaN</span> == <span class="literal">undefined</span>); <span class="comment">//显示 false</span></span><br><span class="line">例 alert( “<span class="number">11</span>” + <span class="number">11</span>); <span class="comment">//显示 1111</span></span><br><span class="line">例 alert( <span class="number">1</span> === “<span class="number">1</span>”); <span class="comment">//显示 false</span></span><br><span class="line">例 alert(<span class="built_in">parseInt</span>(“<span class="number">123</span>abc”)); <span class="comment">//显示 123【parseInt 是截断数字】</span></span><br><span class="line">例 <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a)); <span class="comment">//返回 string</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">123123.345789</span>;alert(num.toFixed(<span class="number">3</span>));</span><br><span class="line">答案 <span class="number">123123.346</span>【toFixed(<span class="number">3</span>)是保留三位小数的意思，四舍五入】</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">alert(‘a’);就是弹出框，相当于 <span class="built_in">console</span>.log</span><br></pre></td></tr></table></figure><h1 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h1><blockquote><p>function 随便起个名(){}</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"b"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"b"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"c"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"c"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"b"</span>);</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"c"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">3</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"a"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"b"</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>以上情况就是偶合，偶合度非常高，偶合代码就是低效代码</strong></li><li><strong>编程讲究高内聚，弱偶合</strong></li><li>右上方是简便写法：可以用 test 调用执行，写几个 test 就调用执行几次</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">        <span class="keyword">var</span> c = a + b;</span><br><span class="line">        <span class="built_in">document</span>.write(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">答案 357。写了一个 test（）；就执行了一遍函数语句，如果不写 test（）；就相当于</span></span><br><span class="line"><span class="regexp">有一个框来存东西，但是不执行</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘hello world’);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br></pre></td></tr></table></figure><blockquote><p>函数 function 可以先定义功能，之后再去用</p></blockquote><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><blockquote><p>定义一个函数可以先写一个 function,函数就是另一个类型的变量</p></blockquote><p>我声明一个函数 test,test 是函数名。写成下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数名起名：开发规范要求，函数名和变量名如果由多个单词拼接，必须符合小驼峰原则（第一个单词首字母小写，后面的首字母大写）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="function"><span class="keyword">function</span> <span class="title">theFirstName</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.write(theFirstName);</span><br><span class="line">答案 <span class="function"><span class="keyword">function</span> <span class="title">theFirstName</span>(<span class="params"></span>)</span>&#123;&#125;。打印出来的是函数体</span><br></pre></td></tr></table></figure><blockquote><p>这与 c 语言和 c++，他们打印指针，会输出指针的地址，而 js 这种弱数据语言（解释性语言）永远不输出地址，输出地址指向房间</p></blockquote><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a><strong>函数表达式</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> test = fuction test ()&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘a’);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">答案 a。这种方式像定义一个变量</span><br></pre></td></tr></table></figure><blockquote><p>上面这种方式，可以演变成第三种，匿名表达式【不写 test 这种函数名】</p></blockquote><h4 id="命名函数表达式"><a href="#命名函数表达式" class="headerlink" title="命名函数表达式"></a><strong>命名函数表达式</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> demo = fuction abc()&#123;</span><br><span class="line"><span class="built_in">document</span>.write(‘a’);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面这个函数的函数名 name 是 abc</p></li><li><p>在控制台 console 直接输出 test 就会出现 →</p></li><li><p>在控制台 console 直接输出 abc 会报错，表达式就会忽略他的名字 abc。</p></li><li><p>在上面例子中，fuction abc(){document.write(‘a’);}这一部分叫表达式，是会忽略 abc 这个地方的名字，会变成匿名函数表达式，不如直接写成匿名函数</p></li></ul><h4 id="匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）"><a href="#匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）" class="headerlink" title="匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）"></a><strong>匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="二、组成形式"><a href="#二、组成形式" class="headerlink" title="二、组成形式"></a>二、组成形式</h2><h3 id="函数名称"><a href="#函数名称" class="headerlink" title="函数名称"></a>函数名称</h3><p>function test(){}其中 function 是函数关键字，test 是函数名，必须有(){}，参数可有可<br>没有，参数是写在()括号里面的。</p><p>如果写成 function test(a，b){}，相当于隐式的在函数里面 var a，var b 申明了两个变<br>量，（）括号里面不能直接写 var</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">document</span>.write(a + b)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">答案 <span class="number">3</span>。</span><br></pre></td></tr></table></figure><blockquote><p>上面这个例子，1 就会到 a 里面去，2 就会到 b 里面去，这是传参的形式</p></blockquote><h3 id="参数-可有可没有，但是高级编程必有"><a href="#参数-可有可没有，但是高级编程必有" class="headerlink" title="参数(可有可没有，但是高级编程必有)"></a>参数(可有可没有，但是高级编程必有)</h3><p><code>形参（形式参数）：指的是 function sum（a，b）{}括号里面的 a 和 b</code></p><p><code>实参（实际参数）：指的是 sum（1，2）；里面的 1，2</code></p><p><code>天生不定参，形参可以比实参多，实参也可以比形参多</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = a + b;</span><br><span class="line">        <span class="built_in">document</span>.write(c);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    sum(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">答案 <span class="number">37</span>，参数把函数抽象了，可以组成很多形式</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    如果第一个实参的数大于 <span class="number">10</span>，就减第二个数的运算结果；如果第一个实参的数小于 <span class="number">10</span>，就加第二个数的运算结果</span><br><span class="line">    <span class="comment">//function test()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 形式参数 ———— 形参</span></span><br><span class="line">    funtion sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(a - b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(a + b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际参数 ———— 实参</span></span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>）</span><br><span class="line">    答案：<span class="number">3</span></span><br><span class="line"></span><br><span class="line">    上面改成sum(<span class="number">11</span>,<span class="number">2</span>)    <span class="comment">//答案 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案 <span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c,d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">    <span class="built_in">document</span>.write(d);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案 <span class="number">11</span>,<span class="literal">undefined</span>，上面这道题是形参多，实参少</span><br></pre></td></tr></table></figure><p>js 参数不限制数量，天生不定参数</p><p>在每一个函数里面都有一个隐式的东西 arguments 这个是实参列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案[<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>]，<span class="number">3</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; argument.length; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案 <span class="number">11</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum.length &gt;<span class="built_in">arguments</span>.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"形参多了"</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum.length &lt; <span class="built_in">arguments</span>.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"实参多了"</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"相等"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际参数 ———— 实参</span></span><br><span class="line">sum(<span class="number">11</span>,<span class="literal">undefined</span><span class="number">.3</span>,<span class="string">"abc"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    形参长度求法</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sum.length);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    答案 <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">任意个数求和(不定参才能求出来)</span><br><span class="line"></span><br><span class="line">    funtion sum()&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2,3,4,5,6,7];</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i ++)&#123;</span><br><span class="line">            result += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><blockquote><p>形参永远有尽头，要实现任意的数求和，无法定义形参。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2]</span></span><br><span class="line">        <span class="comment">// var a = 1;</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">答案是 <span class="number">2</span>。a 变，<span class="built_in">arguments</span> 跟着变化。有一个映射的关系。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2]</span></span><br><span class="line">        <span class="comment">// var a = 1;</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">答案 <span class="number">3</span>。<span class="built_in">arguments</span> 里面一个变，一个跟着变，但是[<span class="number">1</span>,<span class="number">2</span>]是两个独立的人，相当于映射关系。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:当形参两个，实参一个</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//arguments[1]没值</span></span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>);</span><br><span class="line">答案: <span class="literal">undefined</span>，实参列表出生时有几个，就有几个，在写 b=<span class="number">2</span>，也不加在 <span class="built_in">arguments</span>[<span class="number">1</span>]里面了，此处的 b 就当变量用，他和实参不映射。</span><br><span class="line"></span><br><span class="line">形参实参完全对应上才相互映射</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//arguments[1]没值</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>);</span><br><span class="line">答案 <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="返回值-return"><a href="#返回值-return" class="headerlink" title="返回值 return"></a>返回值 return</h3><p><code>结束条件和返回值 return，return 有终止函数的功能</code></p><p><code>没写 return，实际上是加上了一个隐式的 return</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">    <span class="built_in">console</span>.log(‘b’);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    答案 a，b</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(‘b’);</span><br><span class="line">    &#125;</span><br><span class="line">    答案 a</span><br></pre></td></tr></table></figure><blockquote><p>return 最常用的是返回值。本意是把一个值返回到函数以外</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">自己定义的函数也能返回,<span class="keyword">return</span> 空格 <span class="number">123</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = sum();</span><br><span class="line">    答案这里的 num 就是 <span class="number">123</span>，而且 <span class="built_in">console</span>.log(‘a’);无效，这里的 <span class="keyword">return</span> 又终止函数，又返回变量</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    把 target 转成数字</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myNumber</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> + target; <span class="comment">//利用+隐式的转换成了数字类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = myNumber(‘<span class="number">123</span>’);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “” + num);</span><br><span class="line">    答案 number <span class="number">123</span></span><br></pre></td></tr></table></figure><ol><li><p>一般函数处理完一个参数，是为了返回</p></li><li><p>typeof()也是返回值，也是函数</p></li><li><p>typeof(123)也可以写成 typeof 123【typeof 空格 123】，只是看起来不方便</p></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h3><ol><li>写一个函数，功能是告知你所选定的小动物的叫声。</li><li>写一个函数，实现加法计数器。</li><li>定义一组函数，输入数字，逆转并输出汉字形式。</li><li>写一个函数，实现 n 的阶乘。</li><li>写一个函数，实现斐波那契数列。</li></ol><p>一、写一个函数，功能是告知你所选定的小动物的叫声。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scream</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (animal) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"dog"</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">"wang"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"cat"</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">"miao!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"fish"</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">"o~o~o~"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处可以用 break , 也可以用 return</p></blockquote><p>二、写一个函数，实现加法计数器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">任意个数求和(不定参才能求出来)</span><br><span class="line"></span><br><span class="line">    funtion sum()&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2,3,4,5,6,7];</span></span><br><span class="line">        <span class="keyword">var</span> resule = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i ++)&#123;</span><br><span class="line">            result += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>三、定义一组函数，输入数字，逆转并输出汉字形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">window</span>.prompt(<span class="string">"input"</span>);</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    str += transfer(num[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br><span class="line">reverse();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">traget</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (traget) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"壹"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"贰"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"叁"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"肆"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"伍"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"6"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"陆"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"7"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"柒"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"8"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"捌"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"9"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"玖"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">属性补充：</span><br><span class="line"></span><br><span class="line">str.charAt(<span class="number">0</span>)意思是字符串的第零位</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>)这是倒着拿的意思</span><br><span class="line"></span><br><span class="line">一个字符串长度是 <span class="number">3</span>，他的第三位字符串是 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">可以把第二个 <span class="function"><span class="keyword">function</span> 放第一个里面，但是一般单独写，因为 <span class="title">transfer</span> 是转换</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">str</span> += <span class="title">transfer</span>(<span class="params">num[i]</span>);是先执行后面的 <span class="title">transfer</span>(<span class="params">num[i]</span>)，再赋值给前面</span></span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><code>写一个函数，实现 n 的阶乘。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法一: <span class="function"><span class="keyword">function</span> <span class="title">jc</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//n 的阶乘</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    num *= i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法二: <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * mul(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二叫递归</p><p>1、找规律，</p><p>2、找出口（找停的点）</p><blockquote><p>递归的优点是代码简洁，但是运行慢</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">导图: <span class="keyword">return</span> <span class="number">5</span> * mul(<span class="number">5</span> - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> (<span class="number">5</span> - <span class="number">1</span>) * mul(<span class="number">5</span> - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span> * mul(<span class="number">5</span> - <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> (<span class="number">5</span> - <span class="number">3</span>) * mul(<span class="number">5</span> - <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>5、拿递归写斐波那契数列 fb(n)==fb(n - 1) + fb(n - 2);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n== <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fb(<span class="number">5</span>) == &gt; fb(<span class="number">4</span>) + fb(<span class="number">3</span>);</span><br><span class="line">fb(<span class="number">4</span>) == &gt; fb(<span class="number">3</span>) + fb(<span class="number">2</span>);</span><br><span class="line">fb(<span class="number">3</span>) == &gt; fb(<span class="number">2</span>) + fb(<span class="number">1</span>);</span><br><span class="line">fb(<span class="number">2</span>) == &gt; fb(<span class="number">1</span>) + fb(<span class="number">0</span>);</span><br><span class="line">fb(<span class="number">1</span>) == &gt; fb(<span class="number">1</span>) + fb(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>递归返回的顺序：先执行的最后被返回，最后执行完（等最底层的一层层返回）</p></blockquote><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><blockquote><p>定义：此类函数没有声明，在一次执行过后即释放（被销毁）。适合做初始化工作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">针对初始化功能的函数：只想让它执行一次的函数</span><br><span class="line"></span><br><span class="line">立即执行的函数也有参数，也有返回值，有预编译</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//写成(function abc()&#123;&#125;())也调用不到</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b);</span><br><span class="line"></span><br><span class="line">    &#125;())</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(a + b + c * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))         <span class="comment">//这一行里面的(1,2,3)是实参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = a + b + c * <span class="number">2</span> – <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">答案 num = <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="立即执行函数的五种写法"><a href="#立即执行函数的五种写法" class="headerlink" title="立即执行函数的五种写法"></a>立即执行函数的五种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标准写法:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;()); <span class="comment">//在 W3C 建议使用这一种</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(‘a’);&#125;)()</span><br><span class="line"></span><br><span class="line">这个被()包起来的 <span class="function"><span class="keyword">function</span> 函数声明变表达式了，就能被外面的最后的(<span class="params"></span>)执行</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">(<span class="params">function test(</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">最外面的大括号是数学运算符号，是最先被执行，其余的括号都是有语法意义的，就把函数变表达式了</span><br><span class="line"></span><br><span class="line">()也是数学执行符，能打印 a，但是执行 test 就报错，所以干脆就不写 test</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">var</span> num = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    &#125;();</span><br></pre></td></tr></table></figure><p>只有表达式才能被执行符号执行</p><p>能被执行符号执行的表达式，这个函数的名字就会被自动忽略（放弃名字）</p><p>能被执行符号执行的表达式基本上就是立即执行函数</p><p>函数声明和函数表达式是两个东西，虽然都能定义函数</p><p>函数声明：function test ( ){}</p><p>函数表达式：var test = function( ){}</p><p><code>其中 = function (){}把 function 赋到 num 里面去叫表达式，var num 是声明在执行时，会放弃这个函数储存到 test 里面的储存引用，让这个 test 恢复到被声明的状态</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.</span> +、-、！ <span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line">    + <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    - <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    ! <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    &#125;()</span><br></pre></td></tr></table></figure><blockquote><p>加了个”正”，在趋势上要把他转换成数字，就是表达式了，既然是表达式就能被执行，就会放弃名字，此时 console.log (test)，就会报错；这就是立即执行函数，同样放了正号，负号，！就会放弃函数名字，转换成表达式；但是*和/不行，&amp;&amp;||前面放东西也行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>)</span>&#123;<span class="built_in">console</span>.log(a + b + c + d)&#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>理论上坚决不能执行，如果括号里面没有数字的话,系统会认为这是一个执行符号，但是如果在里面写上数字，系统就不会给你当成执行符号，它会当成这样写：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这样就不会报错了，因为 逗号（,）也是一个运算符，它会后面的位返回。所以它也是一个正常语法。但是它也不会执行,也不会报错,test还是函数体。</p></blockquote><h3 id="要点"><a href="#要点" class="headerlink" title="要点:"></a>要点:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1.1</span>:</span><br><span class="line"></span><br><span class="line">先定义一个 <span class="number">10</span> 位数的数组，就是在 <span class="keyword">var</span> arr = [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(i);&#125;有十个[]并且把数组返回</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123; <span class="comment">//定义个函数 test</span></span><br><span class="line">    <span class="keyword">var</span> arr = []; <span class="comment">//定义一个空数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    <span class="comment">//丰满空数组，让空数组添加十条数组</span></span><br><span class="line">        <span class="comment">// 每一条都是一个 function()&#123;&#125;</span></span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//随着 for 循环 i 变，</span></span><br><span class="line">        <span class="comment">// 数组 i 也变，arr 每一次都等于一个全新的函数体</span></span><br><span class="line">        <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr; <span class="comment">//把 arr 返回到外部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++)&#123;</span><br><span class="line">    <span class="comment">//分别执行十个函数体，函数体里面定义了 document.write</span></span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案 10 10 10 10 10 10 10 10 10 10</span></span><br></pre></td></tr></table></figure><p>第二个 for 是为了打印这个数组，麻烦写法 myArr<a href="">0</a>; myArr<a href="">1</a>; 。。。myArr<a href="">9</a>;</p><p>过程 for (var i = 0; i &lt; 10; i ++){}执行了十次，产生了十个彼此独立的函数。并且把这十个函数放在数组里面去，还把数组返回了，这十个函数和 test 一起产生了一个闭包。</p><p>既然是闭包，那么访问 test 里面的变量时，实际上访问的是同一套，而 test 产生了<br>arr 和 i 变量（写在 for 循环里面的 i 变量），而这十个函数在外边要访问 i 变量，其实访问的是同一个 i。</p><p>什么时候访问的？在 test 执行完以后，在下面 for(j)访问的第一个 i=0，转到 9 的时候，i ++变 10 终止 for 循环，结束的时候 i=10，结束之后把return arr 返回，arr；</p><p>这十个函数都是为了打印 i 的，在外部访问 i 的时候 i=10，所以打印的是 10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write( i + “ ”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解过程：</p><p>在这个函数体中，当<code>arr[0]</code>时<code>document.write(i)</code>的<code>i</code>是不变的，还是<code>i</code>，等函数保存到外部之后，等执行的时候，才会去找<code>i</code>的值。</p><p>这个赋值语句中<code>arr[0] = 函数;</code>把一个函数体或者说是一个函数引用赋给数组的当前位，数组的当前位需要马上被索取出来的（数组现在当前第几位，我们是知道的，因为这个是执行语句），当<code>for(var i = 0)</code>时，<code>arr[i]</code>会变成<code>arr[0]</code>但是这个 i 跟函数体里面的<code>document.write(i + &quot; &quot;）</code>里面的<code>i</code>是没有关系的，因为函数体 function(){}不是现在执行，不会在意函数里面写的是什么，不是现在执行那么里面的<code>document.write</code>不会变成现实的值，不是现在执行就是函数引用（函数引用就是被折叠起来的，系统不知道里面写的是什么）</p><p>在执行<code>myArr[j]();</code>的时候，系统才会读<code>document.write(i + &quot;&quot;)</code>里面的语句</p><p>在定义函数的时候是不看里面的，在执行的时候才看</p><h3 id="要点2"><a href="#要点2" class="headerlink" title="要点2:"></a>要点2:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1.2</span>:</span><br><span class="line">我们让上面这个变成打印 <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>，用立即执行函数解决</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">            arr[j] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write( j + “ ”);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i));</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++)&#123;</span><br><span class="line"> myArr[j]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解过程：</p><p>相当于在 for 循环里面有十个立即执行函数<code>function(j){}</code><br>在第一圈 i 是 0，j 也是 0，<code>function(){document.write( j + “ ”)}</code>拿着<code>j=0</code>进行循环的第二圈 <code>i</code>是 1，又有了一个新的 <code>j</code> 是 1，反复循环,形成了十个立即执行函数，有十个<code>j</code>对应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">答案 <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span></span><br><span class="line"></span><br><span class="line">例</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">中间 <span class="function"><span class="keyword">function</span> 这个会执行 10 次</span></span><br></pre></td></tr></table></figure><h1 id="作用域初探"><a href="#作用域初探" class="headerlink" title="作用域初探"></a>作用域初探</h1><blockquote><p><strong>作用域定义：变量（变量作用于又称上下文）和函数生效（能被访问）的区域</strong></p></blockquote><p>全局、局部变量</p><p>作用域的访问顺序</p><p>作用域:函数里面的可以访问外面的全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(b);</span><br><span class="line">        <span class="built_in">document</span>.write(a);</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line">    <span class="built_in">document</span>.write(c);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><blockquote><p>函数外面不能用函数里面的。里面的可以访问外面的，外面的不能访问里面的，彼此独立的区间不能相互访问</p></blockquote><ul><li>test{}和 demo{}不能互相访问，但是可以访问外面的全局变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line">彼此独立的区间不能相互访问 全局变量都可以访问</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line"></span><br><span class="line">上面的 <span class="built_in">document</span>.write(b);不能访问 <span class="keyword">var</span> b ;</span><br><span class="line">上面的 <span class="built_in">document</span>.write(a);可以访问 a ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>外层函数不能访问里层的，里层的可以访问外层的，越往里权限越大</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作业:</span><br><span class="line"></span><br><span class="line">要求输入一串低于 <span class="number">10</span> 位的数字，输入这串数字的中文大写。</span><br><span class="line"></span><br><span class="line">例如：input :<span class="number">10000</span>     output:壹万 ;</span><br><span class="line"></span><br><span class="line">例如：input :<span class="number">1001010</span>   output:壹佰万壹仟零壹拾 ;</span><br><span class="line"></span><br><span class="line">千分位如果是 <span class="number">0</span>必须读零 ;</span><br></pre></td></tr></table></figure><h1 id="js-运行三部曲-预编译"><a href="#js-运行三部曲-预编译" class="headerlink" title="js 运行三部曲(预编译)"></a>js 运行三部曲(预编译)</h1><blockquote><p>语法分析 → 预编译 → 解释执行</p></blockquote><h2 id="预编译前奏"><a href="#预编译前奏" class="headerlink" title="预编译前奏"></a>预编译前奏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">上面能执行</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">&#125;</span><br><span class="line">也能执行，因为有预编译的存在</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">答案 <span class="number">123</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">答案 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line">只写 <span class="built_in">console</span>.log(a);就会报错</span><br></pre></td></tr></table></figure><blockquote><p>函数声明整体提升：函数不管写到哪里，都会被提到逻辑的最前面。所以不管在哪里调用，本质上都是在后面调用变量 声明提升：把 var a 提升到最前面</p></blockquote><ul><li>var a = 123;这是变量声明再赋值。</li></ul><blockquote><p>变量声明提升是把他拆分成 var a; a = 123;然后把 var a 提升到最前面<br>上面这两句话没办法解决下面例子(全部)的问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">234</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><blockquote><p>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象(就是 window)所有。</p></blockquote><p><code>全局对象是 window</code></p><p>例 window.a = 10;</p><p>例 a = 10; ===&gt; windows.a = 10;</p><p>eg: var a = b = 123;</p><blockquote><p>一切声明的全局变量，全是 window 的属性。</p></blockquote><p>例 var a = 123; ===&gt; window.a = 123;</p><blockquote><p>window 就是全局的域</p></blockquote><p>如果在全局变量在 var a = 123；那么就会返回到 window</p><p>例 var a = 123<br>console.log(a) ===&gt; window.a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b = <span class="number">234</span>;</span><br><span class="line">是把 <span class="number">234</span> 的值赋给 b，在把 b 的值赋给 a</span><br><span class="line"></span><br><span class="line">例 :</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">    答案：<span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">    答案：<span class="number">123</span>；</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">写 test()代表执行 test，赋值是自右向左的，上面先把 <span class="number">123</span> 赋给 b 的时候，b 未经声明，然后再声明 a，再 b 的值赋给 a，导致 b 未经声明，所以 b 归 <span class="built_in">window</span> 所有访问 <span class="built_in">window</span>.a 是 <span class="literal">undefined</span>，访问 <span class="built_in">window</span>.b 是 <span class="number">123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">123</span>;<span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">答案 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span> 就是全局</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); ==&gt; <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">345</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>&#123;</span><br><span class="line"> a : <span class="number">123</span>,</span><br><span class="line"> b : <span class="number">234</span>,</span><br><span class="line"> c : <span class="number">345</span></span><br><span class="line">&#125;</span><br><span class="line">如果 <span class="keyword">var</span> a 对应会有 <span class="built_in">window</span>.a,在<span class="built_in">window</span>中也会有a = <span class="number">123</span>,b = <span class="number">234</span>,c = <span class="number">345</span>;</span><br></pre></td></tr></table></figure><h2 id="预编译（解决执行顺序问题）"><a href="#预编译（解决执行顺序问题）" class="headerlink" title="预编译（解决执行顺序问题）"></a>预编译（解决执行顺序问题）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">答案是 <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125; 、<span class="number">123</span> 、<span class="number">123</span> 、<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">这个例子的形参是（a），变量声明也是 a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的例子按四部曲变化如下:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>创建AO对象</span><br><span class="line"></span><br><span class="line">AO&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 找形参和变量声明，将变量和形参(a)名作为 AO 属性名，值为 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 把实参值传到形参里</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 在函数体里面找函数声明，值赋予函数体</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;和 <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;都是函数声明，但是 <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;不是。</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    d : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行第一行 <span class="built_in">console</span>.log(a);时，用的是</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    d : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="keyword">var</span> a =<span class="number">123</span>;改变的是</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    d : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在 b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;时</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    d : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>预编译发生在函数即将执行的前一刻</p></blockquote><h2 id="（函数）预编译的四部曲"><a href="#（函数）预编译的四部曲" class="headerlink" title="（函数）预编译的四部曲"></a>（函数）预编译的四部曲</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 创建 AO 对象 Activation <span class="built_in">Object</span>(执行期上下文，作用是函数解的作用域，函数产生的执行空间库)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 找形参和变量声明，将变量和形参名作为 AO 属性名，值为 <span class="literal">undefined</span>,相当于</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span>,</span><br><span class="line">    b : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 将实参值和形参统一（把实参值传到形参里）</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 在函数体里面找函数声明，值赋予函数体（先看自己的 AO，再看全局的 GO）</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">答题过程：</span><br><span class="line"></span><br><span class="line">找形参和变量声明，将变量和形参名作为 AO 属性名，值为 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">函数声明 <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;和 <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;，AO&#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    c : <span class="literal">undefined</span>,</span><br><span class="line">    d : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">执行 c = <span class="number">0</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    c : <span class="number">0</span>,</span><br><span class="line">    d : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c 不用管，因为 c 已经在 AO 里面了</span><br><span class="line"></span><br><span class="line">执行 a = <span class="number">3</span>;改</span><br><span class="line">AO&#123;</span><br><span class="line"> a : <span class="number">3</span>,</span><br><span class="line"> b : <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"> c : <span class="number">0</span>,</span><br><span class="line"> d : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 b = <span class="number">2</span>;改</span><br><span class="line">AO&#123;</span><br><span class="line"> a : <span class="number">3</span>,</span><br><span class="line"> b : <span class="number">2</span>,</span><br><span class="line"> c : <span class="number">0</span>,</span><br><span class="line"> d : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>) </span>&#123;&#125;和 <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;已经提过了，不用管执行 <span class="built_in">console</span>.log(b);答案是 <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a , b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// function a()&#123;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 234</span></span><br><span class="line"></span><br><span class="line">    a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    b = <span class="number">234</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// function b()&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">答题过程：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 将变量和形参名作为 AO 属性名</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span>,</span><br><span class="line">    b : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 将实参值和形参统一</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 找函数声明 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    b : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">执行 <span class="keyword">var</span> b = <span class="number">234</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    b : <span class="number">234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="number">234</span></span><br><span class="line"></span><br><span class="line">执行 a = <span class="number">123</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="number">234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="number">123</span></span><br><span class="line">然后 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;;<span class="keyword">var</span> a ;都可以不看了</span><br><span class="line"></span><br><span class="line">执行 b = <span class="number">234</span>，b 值还是 <span class="number">234</span>，不变</span><br><span class="line">执行 <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;，变</span><br><span class="line">AO&#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="number">123</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一旦有重名的，一但有 a 变量又有 a 函数【如 function a (){}】，又在第一条访问的是 a，一定是函数答题过程： 将变</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">下面开始讲全局的预编译</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">答案 <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">答案是打印 a 是 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="全局的预编译三部曲"><a href="#全局的预编译三部曲" class="headerlink" title="全局的预编译三部曲"></a>全局的预编译三部曲</h2><ol><li><p>生成了一个 GO 的对象 Global Object（window 就是 GO）</p></li><li><p>找形参和变量声明，将变量和形参名作为 GO 属性名，值为 undefined</p></li><li><p>在函数体里面找函数声明，值赋予函数体</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">答案过程:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> GO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 函数声明 GO&#123;</span><br><span class="line">    a : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 执行 <span class="keyword">var</span> a = <span class="number">123</span>;变 GO&#123;</span><br><span class="line">    a : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">执行 <span class="built_in">console</span>.log(a);就是 <span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>GO === window， GO 和 window 是一个东西</p></blockquote><p>console.log(a);和 console.log(window.a);和 console.log(go.a);是一样</p><blockquote><p>任何全局变量都是 window 上的属性 , 没有声明变量就赋值了，归 window 所有，就是在 GO 里面预编译</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b =<span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">答案 <span class="built_in">window</span>.a 是 <span class="literal">undefined</span>，<span class="built_in">window</span>.b 是 <span class="number">123</span></span><br><span class="line"></span><br><span class="line">先生成 GO&#123;</span><br><span class="line"> b : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">再有 AO&#123;</span><br><span class="line">a : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>先生成 GO 还是 AO</p></li><li><p>想执行全局，先生成 GO，在执行 test 的前一刻生成 AO</p></li><li><p>在几层嵌套关系，近的优先，从近的到远的，有 AO 就看 AO，AO 没有再看 GO</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">    <span class="keyword">var</span> test = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> test = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">答题过程:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 想执行全局,先有 GO,</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    test : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span> 发现有函数声明</span><br><span class="line"></span><br><span class="line"> GO&#123;</span><br><span class="line">    test : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;..... &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行 <span class="built_in">console</span>.log(test),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 执行 test(<span class="number">1</span>)之前生成</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    test : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 执行 <span class="keyword">var</span> test = <span class="number">234</span>;变成</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    test : <span class="number">234</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>AO 上面有就用 AO 的，没有就看 GO 的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> global = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(global);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">答题过程</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    global : <span class="literal">undefined</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;.....&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="keyword">var</span> global = <span class="number">100</span>;变</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    global : <span class="number">100</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;.....&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">不看 <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;...&#125;里面的东西</span><br><span class="line">执行 fn()之前</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line"> 访问 GO的 global</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">global = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(global);</span><br><span class="line">    global = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(global);</span><br><span class="line">    <span class="keyword">var</span> global = <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> global;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">答题过程:</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    global : <span class="literal">undefined</span></span><br><span class="line">    fn : <span class="literal">undefined</span>(没用可以不写)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">变:</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    global : <span class="number">100</span>,</span><br><span class="line">    fn : <span class="literal">undefined</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">执行 fn()之前，</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    global : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果是 <span class="literal">undefined</span>，<span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line">    c = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">//234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">test();</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//234</span></span><br><span class="line"></span><br><span class="line">过程</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span>,</span><br><span class="line">    test:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    b : <span class="literal">undefined</span> <span class="comment">//不管 if(a)&#123;&#125;，可以提出 var b的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行到 c=<span class="number">234</span>，</span><br><span class="line">GO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="number">234</span>,</span><br><span class="line">    test:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行到 a=<span class="number">10</span>，</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    a : <span class="number">10</span></span><br><span class="line">    c : <span class="number">234</span></span><br><span class="line">    test:<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">    foo = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"></span><br><span class="line">答案：<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">如果在第一行 <span class="keyword">return</span> foo，下面有 foo 这个函数，一定打印这个函数;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">答案 <span class="number">11</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">答案是 <span class="literal">undefined</span> <span class="comment">// 因为var b = undefined 是函数表示，不是函数声明;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line">现在因为语法的改变 在 <span class="keyword">if</span> 里面定义函数声明 <span class="function"><span class="keyword">function</span> 是不允许的，但是过去可以，下面就是过去的旧题，可以按着来做一下</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">a</span> = 100;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">demo</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(e);</span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line">    f = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(c);</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">demo(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">document</span>.write(a);</span><br><span class="line"><span class="built_in">document</span>.write(f);</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    a : <span class="literal">undefined</span></span><br><span class="line">    demo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">开始执行 a=<span class="number">100</span>，</span><br><span class="line">GO&#123;</span><br><span class="line">    a : <span class="number">100</span>，</span><br><span class="line">    demo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">AO&#123;</span><br><span class="line">    e : <span class="literal">undefined</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="literal">undefined</span>,</span><br><span class="line">    a : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">形参实参相统一，AO&#123;</span><br><span class="line">    e : <span class="number">1</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="literal">undefined</span>,</span><br><span class="line">    a : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">赋值 AO&#123;</span><br><span class="line">    e : <span class="function"><span class="keyword">function</span> <span class="title">e</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="literal">undefined</span>, <span class="comment">//------旧规则里面可以提出 function()&#123;&#125;</span></span><br><span class="line">    a : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">执行 <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;实参列表和传参是否相映射，变</span><br><span class="line">AO&#123;</span><br><span class="line">    e : <span class="number">2</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="literal">undefined</span>,</span><br><span class="line">    a : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(e);答案 <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span>(a)由于 a 在 AO 里面是 <span class="literal">undefined</span>，所以不运行</span><br><span class="line"></span><br><span class="line">执行 a = <span class="number">10</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    e : <span class="number">2</span>,</span><br><span class="line">    b : <span class="literal">undefined</span>,</span><br><span class="line">    c : <span class="literal">undefined</span>,</span><br><span class="line">    a : <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(b)，答案 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">执行 f = <span class="number">123</span>，变</span><br><span class="line">GO&#123;</span><br><span class="line">    a : <span class="number">100</span>,</span><br><span class="line">    demo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    f : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(c); 之前打印 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;，改语法后打印 <span class="literal">undefined</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(a); 答案 <span class="number">10</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(a); 因为在外面是全局的，答案 <span class="number">100</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(f); 答案 <span class="number">123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="keyword">var</span> str = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(str);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>  <span class="keyword">var</span> demo = <span class="literal">false</span> == <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(demo);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>  <span class="keyword">if</span>(<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (-<span class="literal">undefined</span>) + <span class="string">""</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'基础扎实'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>  <span class="keyword">if</span>(<span class="number">11</span> + <span class="string">"11"</span> * <span class="number">2</span> == <span class="number">33</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"基础扎实"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>  ！！<span class="string">" "</span> + !!<span class="string">""</span> - !!<span class="literal">false</span> || <span class="built_in">document</span>.write(<span class="string">"你觉得可以打印，你就是猪"</span>)</span><br><span class="line"></span><br><span class="line">答题:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="literal">false</span>+<span class="number">1</span> 因为有+，两边都不是字符串，就转换成数字,<span class="number">0</span> + <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="literal">false</span> 是 <span class="number">0</span> ，<span class="literal">false</span> <span class="literal">false</span> == <span class="number">1</span>，<span class="literal">false</span> 肯定不等于 <span class="number">1</span>，所以把 <span class="literal">false</span> 再赋给 demo</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line">(<span class="number">1</span>) <span class="keyword">typeof</span>(a) 是 <span class="string">"undefined"</span> ;</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) -<span class="literal">true</span> 转换成数字是<span class="number">-1</span>;  +<span class="literal">undefined</span> 显示“<span class="literal">NaN</span>”</span><br><span class="line">    <span class="number">-1</span> + <span class="literal">NaN</span> = <span class="literal">NaN</span></span><br><span class="line">    <span class="number">-1</span> + <span class="literal">NaN</span> + <span class="string">""</span> = <span class="string">"NaN"</span></span><br><span class="line"><span class="comment">//"undefined" &amp;&amp;  "NaN" 转换成 boolean，就都是 true</span></span><br><span class="line"><span class="comment">//因为两边都是字符串，所以是true;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> “<span class="number">11</span>”* <span class="number">2</span> 是*把两边转换成了数字，所以 <span class="number">11</span> +“<span class="number">11</span>”* <span class="number">2</span> =<span class="number">33</span>，<span class="number">33</span> == <span class="number">33</span></span><br><span class="line"><span class="comment">// 两边相等</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span></span><br><span class="line">(<span class="number">1</span>) !! 非非 就是 正</span><br><span class="line">    <span class="string">" "</span> 这不是空串，是空格字符串</span><br><span class="line">    !!<span class="string">" "</span>转换成 <span class="built_in">Boolean</span> 为 <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) !!<span class="string">""</span>非非空串，转换为 <span class="built_in">Boolean</span> 为 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) !!<span class="literal">false</span> 就是 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>) <span class="literal">true</span> + <span class="literal">false</span> - <span class="literal">false</span> = <span class="number">1</span> + <span class="number">0</span> – <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>) <span class="number">1</span> || <span class="built_in">document</span>.write(‘你觉得能打印？’)</span><br><span class="line"></span><br><span class="line"><span class="comment">// || 运算符 遇到真就停，1 为真，所以返回 1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">(<span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = ‘bar’));</span><br><span class="line"></span><br><span class="line">求 <span class="built_in">window</span>.foo</span><br><span class="line"></span><br><span class="line">答案”bar”</span><br><span class="line"></span><br><span class="line">这道题要先看</span><br><span class="line"></span><br><span class="line">(<span class="built_in">window</span>.foo = ‘bar’)这一边的，再看左边的 <span class="built_in">window</span>.foo</span><br><span class="line"></span><br><span class="line">因为运算符的顺序问题，让这道题错误的读法（从左到右）也是 bar，所以怎样读，都是正确答案 : bar</span><br><span class="line"></span><br><span class="line">(<span class="built_in">window</span>.foo || <span class="built_in">window</span>.foo = ‘bar’);这么写就报错;</span><br><span class="line"><span class="comment">// 因为 ||或 运算符优先级高于 =等号 运算符 , 而 ()括号 运算符 则大于一切运算符</span></span><br><span class="line">所以，必须要写成：</span><br><span class="line">(<span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = <span class="string">"bar"</span>));</span><br></pre></td></tr></table></figure><h1 id="作用域精解"><a href="#作用域精解" class="headerlink" title="作用域精解"></a>作用域精解</h1><p><strong>[[scope]]</strong>:每个 javascript 函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供 javascript 引擎存取，<strong>[[scope]]</strong>就是其中一个。<strong>[[scope]]</strong>指的就是我们所说的作用域,其中存储了运行期上下文的集合。</p><p><strong>作用域链</strong>：[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我<br>们把这种链式链接叫做作用域链。</p><p><strong>运行期上下文</strong>:当函数在执行的前一刻，会创建一个称为执行期上下文的内部对象。<br>一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下<br>文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执<br>行完毕，执行上下文被销毁。</p><p><strong>查找变量</strong>：在哪个函数里面查找变量，就从哪个函数作用域链的顶端依次向下查找。<br>函数类对象，我们能访问 test.name</p><blockquote><p>test.[[scope]]隐式属性——作用域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    …………</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第一次执行 test(); → AO&#123;&#125; <span class="comment">//AO 是用完就不要的</span></span><br><span class="line">第二次执行 test(); → AO&#123;&#125; <span class="comment">//这是另外的 AO</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bb = <span class="number">234</span>;</span><br><span class="line">        aa = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aa = <span class="number">123</span>;</span><br><span class="line">    b();</span><br><span class="line">    <span class="built_in">console</span>.log(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> global = <span class="number">100</span>;</span><br><span class="line">a();<span class="number">27</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> 是最顶端，<span class="number">1</span> 是次顶端，查找顺序是从最顶端往下查</span><br></pre></td></tr></table></figure><p>执行顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> a 函数被定义时，发生了以下过程</span><br><span class="line"></span><br><span class="line">                                    |   Global     <span class="built_in">Object</span>     |</span><br><span class="line">                                  / ———————————————————————————</span><br><span class="line">    a               scope chain  /  |    <span class="keyword">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————           —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |          |   <span class="built_in">window</span>   |  (object)  |</span><br><span class="line">                                    ———————————————————————————</span><br><span class="line">                                    |  <span class="built_in">document</span>  |  (object)  |</span><br><span class="line">                                    ———————————————————————————</span><br><span class="line">                                    |     a      | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |            |            |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> a 函数被执行时，发生了以下过程</span><br><span class="line">                                    | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                                  / ———————————————————————————</span><br><span class="line">    a               scope chain  /  |    <span class="keyword">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————           —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |          |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                   —————————————    ———————————————————————————</span><br><span class="line">                      <span class="number">1</span>  |          |      a     |     <span class="number">123</span>    |</span><br><span class="line">                   ————————————\    ———————————————————————————</span><br><span class="line">                                \   |      b     | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                                 \  ———————————————————————————</span></span><br><span class="line"><span class="function">                                  \</span></span><br><span class="line"><span class="function">                                   \</span></span><br><span class="line"><span class="function">                                    |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |     <span class="title">a</span>      | (<span class="params">function</span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> b 函数被创建的时候，发生了以下的过程</span><br><span class="line"></span><br><span class="line">                                    | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                                  / ———————————————————————————</span><br><span class="line">    b               scope chain  /  |    <span class="keyword">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————           —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |          |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                   —————————————    ———————————————————————————</span><br><span class="line">                      <span class="number">1</span>  |          |      a     |     <span class="number">123</span>    |</span><br><span class="line">                   ————————————\    ———————————————————————————</span><br><span class="line">                                \   |      b     | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                                 \  ———————————————————————————</span></span><br><span class="line"><span class="function">                                  \</span></span><br><span class="line"><span class="function">                                   \</span></span><br><span class="line"><span class="function">                                    |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |     <span class="title">a</span>      | (<span class="params">function</span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.</span> b 函数被执行的时候，发生了以下的过程</span><br><span class="line"></span><br><span class="line">                                        | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                                      / ———————————————————————————</span><br><span class="line">                                     /  |    <span class="keyword">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">                                    /   ———————————————————————————</span><br><span class="line">                                   /    |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                                  /     ———————————————————————————</span><br><span class="line">    b               scope chain  /      |      b     |     <span class="number">234</span>    |</span><br><span class="line">————————           —————————————/       ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |             |            |            |</span><br><span class="line">                   —————————————        ———————————————————————————</span><br><span class="line">                      <span class="number">1</span>  |      \</span><br><span class="line">                   ————————————— \</span><br><span class="line">                      <span class="number">2</span>  |        \     | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                     /             \    ———————————————————————————</span><br><span class="line">                    /               \   |    <span class="keyword">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">                   /                 \  ———————————————————————————</span><br><span class="line">                  /                   \ |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                 /                     \———————————————————————————</span><br><span class="line">                /                       |     a      |     <span class="number">123</span>    |</span><br><span class="line">               /                        ———————————————————————————</span><br><span class="line">              /                         |     b      | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">             /                          ———————————————————————————</span></span><br><span class="line"><span class="function">            /</span></span><br><span class="line"><span class="function">        |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |     <span class="title">a</span>      | (<span class="params">function</span>) |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> bb = <span class="number">234</span>;</span><br><span class="line">            aa = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> aa = <span class="number">123</span>;</span><br><span class="line">        b();</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> global = <span class="number">100</span>;</span><br><span class="line">    a();</span><br><span class="line"></span><br><span class="line">答案：<span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>理解过程：<br>bb 的 AO 是拿到 aa 的 AO，就是同一个 AO，bb 只是引用了 aa 的 AO，GO 也都是同一个。function b(){}执行完，干掉的是 b 自己的 AO（销毁执行期上下文）（去掉连接线），下次 function b 被执行时，产生的是新的 b 的 AO。b 执行完只会销毁自己的 AO，不会销毁 a 的 AO。function a(){}执行完，会把 a 自己的 AO 销毁【会把 function b 也销毁】，只剩 GO（回归到 a 被定义的时候），等下次 function a再次被执行时，会产生一个全新的 AO，里面有一个新的 b 函数。。。。。。周而复始</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        funcion c() &#123;&#125;</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line">理解过程：</span><br><span class="line"></span><br><span class="line">a 被定义 a.[[scope]] → <span class="number">0</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">a 被执行 a.[[scope]] → <span class="number">0</span> : a.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">b 被定义 b.[[scope]] →  <span class="number">0</span> : a.AO&#123;&#125;</span><br><span class="line">                        <span class="number">1</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">b 被执行 b.[[scope]] → <span class="number">0</span> : b.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : aAO&#123;&#125;</span><br><span class="line">                       <span class="number">2</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">c 被定义 c.[[scope]] → <span class="number">0</span> : b.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : aAO&#123;&#125;</span><br><span class="line">                       <span class="number">2</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">c 被执行 c.[[scope]] → <span class="number">0</span> : c.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : b.AO&#123;&#125;</span><br><span class="line">                       <span class="number">2</span> : a.AO&#123;&#125;</span><br><span class="line">                       <span class="number">3</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当 c 执行完后，会干掉自己的 cAO，回到 c 被定义的状态，当 c 再被执行时，会生成一个新的 newcAO&#123;&#125;，其余都一样，因为基础都是 c 的被定义状态 c 被执行</span><br><span class="line"></span><br><span class="line">c.[[scope]] → <span class="number">0</span> : newc.AO&#123;&#125;</span><br><span class="line">              <span class="number">1</span> : b.AO&#123;&#125;</span><br><span class="line">              <span class="number">2</span> : a.AO&#123;&#125;</span><br><span class="line">              <span class="number">3</span> : GO&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果<code>function a</code>不被执行，下面的<code>function b</code>和<code>function c</code>都是看不到的（也不会被执行，被折叠）。只有<code>function a</code>被执行，才能执行<code>function a 里面的内容</code>a()<code>; 如果不执行，根本看不到</code>function a (){}`里面的内容;</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露。</p></blockquote><p><code>内存泄漏就是内存占用，内存被占用的越多，内存就变得越来越少了，就像内存被泄露了一样</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> bbb = <span class="number">234</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(aaa);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> aaa = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> global = <span class="number">100</span>;</span><br><span class="line">    demo = a();</span><br><span class="line">    demo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b 以后，就返回出去，再销毁 fn a。</span><br><span class="line"></span><br><span class="line">答案：<span class="number">123</span>;。因为没有 b();此时 b 还是被定义的状态，和 a 执行的状态是一样的。<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;是在 <span class="keyword">return</span> b 之后才执行完，才销毁。<span class="keyword">return</span> b 让 a 执行时的 AO 被保存到了外面。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       a执行                    | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                              / ———————————————————————————</span><br><span class="line">    a           scope chain  /  |    <span class="keyword">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————       —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]         <span class="number">0</span>  |     <span class="regexp">/    |  arguments |     []     |</span></span><br><span class="line"><span class="regexp">               —————————————    ———————————————————————————</span></span><br><span class="line"><span class="regexp">                  1  |          |    aaa     |     123    |</span></span><br><span class="line"><span class="regexp">               —————————\———   /</span> ———————————————————————————</span><br><span class="line">                         \    / |      b     | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                          \  /  ———————————————————————————</span></span><br><span class="line"><span class="function">                           \/</span></span><br><span class="line"><span class="function">                           /\</span></span><br><span class="line"><span class="function">                          /  \      |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">                         /    \    /———————————————————————————</span></span><br><span class="line"><span class="function">    <span class="title">b</span>被定义，并被保存出来. /    \  / |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">                       /        \/  ———————————————————————————</span></span><br><span class="line"><span class="function">                      /         /\  |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">   <span class="title">b</span>           <span class="title">scope</span> <span class="title">chain</span>     /  \ ———————————————————————————</span></span><br><span class="line"><span class="function">—————————     —————————————   /     |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line">[[scope]]        0  |        /      ———————————————————————————</span><br><span class="line">              ————————————— /       |     a      | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                 1  |      /        ———————————————————————————</span></span><br><span class="line"><span class="function">              —————————————         |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |    <span class="title">demo</span>    | (<span class="params">function</span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><p><code>return b</code>是把<code>b（包括 a 的 AO</code>保存到外部了（放在全局）<br>当 a 执行完砍掉自己的<code>AO</code>时，b 依然可以访问到<code>a</code>的<code>AO(因为 return b)</code></p><blockquote><p>但凡是内部的函数被保存到外部，一定生成闭包</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> = <span class="number">100</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num ++;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> demo = a();</span><br><span class="line">    demo();</span><br><span class="line">    demo();</span><br><span class="line"></span><br><span class="line">答案 <span class="number">101</span>,<span class="number">102</span></span><br><span class="line"></span><br><span class="line">理解过程:</span><br><span class="line"></span><br><span class="line">    a 被执行 <span class="number">0</span> : a.AO: num = <span class="number">100</span>;</span><br><span class="line">             <span class="number">1</span> : GO: demo = a();</span><br><span class="line"></span><br><span class="line">    b 被执行 <span class="number">0</span> : b.AO :</span><br><span class="line">             <span class="number">1</span> : a.AO : num = <span class="number">100</span>;</span><br><span class="line">             <span class="number">2</span> : GO: demo = a();</span><br></pre></td></tr></table></figure><p>在第一次执行<code>function b</code>时，<code>num ++</code>就把<code>aAO</code>变成<code>{num : 101}</code>，当 <code>function b</code>执行完毕时，剪断的是<code>bAO</code>，而<code>aAO</code>不变，当执行<code>function a</code>的<code>return b</code>时就把<code>aAO,GO</code>都存在了外部，执行完<code>a</code>销毁<code>scope</code>时去掉 <code>a</code>的连接线，但是因为<code>return b</code>把<code>aAO,GO</code>存在了外部，所以依然还是可以访问值</p><p>在第二次执行<code>function b</code>时，<code>aAO{num : 101}</code>，<code>在</code>num ++<code>就是</code>102`</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aa = <span class="number">345</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> bb = <span class="number">234</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                cc = <span class="number">123</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c();</span><br><span class="line">        &#125;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line"></span><br><span class="line">执行过程：</span><br><span class="line"></span><br><span class="line">先执行 <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> aa = <span class="number">345</span>;<span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;&#125;b();&#125;</span><br><span class="line">想要执行完上面的 b();就需要执行完 <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> bb = <span class="number">234</span>; <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;c();&#125;，</span><br><span class="line">想要执行 c();就要先执行完 <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> cc =<span class="number">123</span>;&#125;,</span><br><span class="line">b();是一个复合语句，执行完 b 里面的每一句话，才能执行 b();</span><br><span class="line"></span><br><span class="line">销毁顺序：</span><br><span class="line"></span><br><span class="line">哪个先被执行完，哪个先被销毁</span><br><span class="line">当 c 执行完，先销毁 c 自己的执行期的上下文，</span><br><span class="line">当 c();执行完，那么 b 也执行完了，就销毁 b 的执行期上下文；</span><br><span class="line">当 b();执行完，那么 a 也执行完了，就销毁 a 的执行期上下文</span><br></pre></td></tr></table></figure><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><h3 id="一、实现公有变量"><a href="#一、实现公有变量" class="headerlink" title="一、实现公有变量"></a>一、实现公有变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">函数累加器：</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            <span class="built_in">console</span>.log(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> counter = add();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line"></span><br><span class="line">每回调用 counter 就会在原有基础上加一次</span><br></pre></td></tr></table></figure><h3 id="二、可以做缓存（存储结构）"><a href="#二、可以做缓存（存储结构）" class="headerlink" title="二、可以做缓存（存储结构）"></a>二、可以做缓存（存储结构）</h3><blockquote><p>eg:eater。缓存是外部不可见的，但是确实有存储结构</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>：</span><br><span class="line">    fnction test()&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num ++;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            num --;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [a,b];</span><br><span class="line">    &#125;</span><br><span class="line">    myArr = test();</span><br><span class="line">    myArr[<span class="number">0</span>]();</span><br><span class="line">    myArr[<span class="number">1</span>]();</span><br><span class="line"></span><br><span class="line">答案 <span class="number">101</span> 和 <span class="number">100</span>，思考过程：说明两个用的是一个 AO</span><br><span class="line"></span><br><span class="line">test doing test[[scope]] <span class="number">0</span> : test.AO</span><br><span class="line">                         <span class="number">1</span> : GO</span><br><span class="line">a defined a.[[scope]]    <span class="number">0</span> : test.AO</span><br><span class="line">                         <span class="number">1</span> : GO</span><br><span class="line">b defined b.[[scope]]    <span class="number">0</span> : test.AO</span><br><span class="line">                         <span class="number">1</span> : GO</span><br><span class="line"></span><br><span class="line">当执行 myArr[<span class="number">1</span>]();时:</span><br><span class="line"></span><br><span class="line">b doing b.[[scope]] <span class="number">0</span> : b.AO</span><br><span class="line">                    <span class="number">1</span> : *a 运行后的 test.AO*</span><br><span class="line">                    <span class="number">2</span> : GO</span><br><span class="line"></span><br><span class="line">a 运行后的 test.AO， 与 a doing 里面的 test.AO 一模一样</span><br><span class="line">a 和 b 连线的都是 test 环境，对应的一个闭包</span><br></pre></td></tr></table></figure><p><code>function a</code>和<code>function b</code>是并列的，不过因为<code>function a</code>在前，所以先执行<code>num ++</code>，在执行<code>num --</code></p><p><code>myArr[0]</code>是数组第一位的意思，即<code>a</code>，<code>myArr[0]()</code>;就是执行函数<code>a</code>的意思;</p><p><code>myArr[1]</code>是数组第二位的意思，即<code>b</code>，<code>myArr[1]()</code>; 就是执行函数<code>b</code>的意思;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">2</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eater</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> food = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            eat : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'I am eating'</span> + food);</span><br><span class="line">                food = <span class="string">""</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            push : <span class="function"><span class="keyword">function</span>(<span class="params">myFood</span>)</span>&#123;</span><br><span class="line">                food = myFood;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> eater1 = eater();</span><br><span class="line"></span><br><span class="line">    eater1.push(<span class="string">'banner'</span>);</span><br><span class="line">    eater1.eat();</span><br><span class="line"></span><br><span class="line">答案: I am eating banana，eat 和 push 操作的是同一个 food;</span><br></pre></td></tr></table></figure><p>在<code>function eater(){里面的 food}</code>就相当于一个隐式存储的机构<code>obj</code>对象里面是可以有<code>function</code>方法的,也可以有属性，方法就是函数的表现形式</p><h3 id="三、可以实现封装，属性私有化"><a href="#三、可以实现封装，属性私有化" class="headerlink" title="三、可以实现封装，属性私有化"></a>三、可以实现封装，属性私有化</h3><p><code>例为什么在外部执行的 divorce 能用内部的变量？能换成 xiaozhang</code></p><p><code>因为 this.divorce 在对象上，由于对象被返回了，这个方法也被返回了。因为闭包。这个函数被储存到了外部，所以储存了这个函数的执行期上下文。</code></p><p><code>所以可以用这个闭包。所以 var prepareWife 被下面的 this=fn 三个函数共用，这三个函数分别与 fn Deng 形成了闭包，共同用 Deng 的 AO,所以可以在外部随意存取。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Deng</span>(<span class="params">name,wife</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> prepareWife = <span class="string">'xiaozhang'</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">         <span class="keyword">this</span>.wife = wife;</span><br><span class="line">         <span class="keyword">this</span>.divorce = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.wife = prepareWife;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.changePrepareWife = funtion(target)&#123;</span><br><span class="line">             prepareWife = target;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.sayPrapreWife = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(prepareWife);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> deng = <span class="keyword">new</span> Deng(<span class="string">'Deng'</span>,<span class="string">'xiaoliu'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  从控制器输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng</span></span><br><span class="line">    <span class="comment">// &lt;· Deng</span></span><br><span class="line">    <span class="comment">//     &gt; changePrepareWife(target)</span></span><br><span class="line">    <span class="comment">//     &gt; divorce:()</span></span><br><span class="line">    <span class="comment">//         name : "deng"</span></span><br><span class="line">    <span class="comment">//     &gt; sayPrapreWife:()</span></span><br><span class="line">    <span class="comment">//         wife : 'xiaoliu'</span></span><br><span class="line">    <span class="comment">//     &gt; __proto__ : Object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng.divorce()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  deng.wife</span></span><br><span class="line">    <span class="comment">// &lt;· 'xiaozhang'</span></span><br><span class="line">    <span class="comment">// &gt;  deng.prepareWife</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><p>deng.prepareWife 是 undefined 的，表面上看起来不是自己的，但是<code>实际上只有对象自己通过对象自己设置的方法可以去操作他，外部用户通过对象，prepareWife 是看不到的</code>，只有自己能看到，就是闭包的私有化运用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行完是这个样子</span></span><br><span class="line"><span class="keyword">var</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">  F.prototype = Origin.prototype;</span><br><span class="line">  Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  Target.prototype.constructor = Target;</span><br><span class="line">  Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>上面的 var F 这个 F 形成了闭包，成为了这个函数的私有化变量，而且变成私有化变量就更好</code></p><h3 id="四、模块化开发，防止污染全局变量"><a href="#四、模块化开发，防止污染全局变量" class="headerlink" title="四、模块化开发，防止污染全局变量"></a>四、模块化开发，防止污染全局变量</h3><h2 id="闭包的防范"><a href="#闭包的防范" class="headerlink" title="闭包的防范"></a>闭包的防范</h2><blockquote><p>闭包会导致多个执行函数共用一个公有变量，如果不是特殊需要，应尽量防止这种情况发生。</p></blockquote><h1 id="对象，包装类"><a href="#对象，包装类" class="headerlink" title="对象，包装类"></a>对象，包装类</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="1-用已学的知识点，描述一下你心目中的对象"><a href="#1-用已学的知识点，描述一下你心目中的对象" class="headerlink" title="1.用已学的知识点，描述一下你心目中的对象"></a>1.用已学的知识点，描述一下你心目中的对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mrDeng  = &#123;</span><br><span class="line">        name : <span class="string">'MrDeng'</span>,</span><br><span class="line">        age : <span class="number">40</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        health : <span class="number">100</span>,</span><br><span class="line">        smoke : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'I am smoking ! cool !!! '</span>);</span><br><span class="line">            mrDeng.health --;</span><br><span class="line">        &#125;</span><br><span class="line">        dring : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'I am drink'</span>);</span><br><span class="line">            mrDeng.health ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台返回</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.health</span></span><br><span class="line">    <span class="comment">// &lt;· 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.drink()</span></span><br><span class="line">    <span class="comment">//  I am drink</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.drink()</span></span><br><span class="line">    <span class="comment">//  I am dring</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.health</span></span><br><span class="line">    <span class="comment">// &lt;· 102</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.smoke()</span></span><br><span class="line">    <span class="comment">//  I am smiking ! cool !!!</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.health</span></span><br><span class="line">    <span class="comment">// &lt;· 99</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.dring()</span></span><br><span class="line">    <span class="comment">//  I am dring</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>灰色的 undefined 是返回值，因为没有设置返回值，所以就是灰色的 undefined</p></blockquote><h4 id="代表函数引用"><a href="#代表函数引用" class="headerlink" title="代表函数引用"></a>代表函数引用</h4><blockquote><p>改 mrDeng.health 为 this.health，此处 this 指代的是自己，是第一人称，指的就是 mrDeng。因为 this 是在一个方法里面，所以指的这个方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">smoke : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘I am good’)</span><br><span class="line">    <span class="keyword">this</span>.health --;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-属性的增、删、改、查"><a href="#2-属性的增、删、改、查" class="headerlink" title="2.属性的增、删、改、查"></a>2.属性的增、删、改、查</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"></span><br><span class="line">在上面的基础上 mrDeng.wife = <span class="string">'xiaoliu'</span></span><br><span class="line"></span><br><span class="line">也可以在控制台操作</span><br><span class="line"></span><br><span class="line">=<span class="string">''</span>等号后面的引号里面需要有值才可以</span><br><span class="line"></span><br><span class="line">删除必须借助 <span class="keyword">delete</span> mrDeng.sex</span><br></pre></td></tr></table></figure><h4 id="增加一个属性"><a href="#增加一个属性" class="headerlink" title="增加一个属性"></a>增加一个属性</h4><p>给一个对象增加属性和方法，就直接给一个对象添加，如下:</p><blockquote><p>（对象.属性名 = 属性值） 如 ： mrDeng.wife = ‘xiaoliu’</p></blockquote><p><code>例 ：mrDeng.wife = &quot;xiaoliu&quot;</code></p><h4 id="查看一个属性"><a href="#查看一个属性" class="headerlink" title="查看一个属性"></a>查看一个属性</h4><blockquote><p>对象名.属性名</p></blockquote><h4 id="修改一个属性"><a href="#修改一个属性" class="headerlink" title="修改一个属性"></a>修改一个属性</h4><blockquote><p>直接在对象名外面或控制器里面写 （对象名.属性名 = “属性值”）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">var</span> mrDeng = &#123;</span><br><span class="line">  sex: <span class="string">"male"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mrDeng.sex = <span class="string">"female"</span>;</span><br></pre></td></tr></table></figure><h4 id="删除一个属性"><a href="#删除一个属性" class="headerlink" title="删除一个属性"></a>删除一个属性</h4><p>删除一个属性，需要添加一个属性‘delete’,</p><blockquote><p>delete 对象名.属性名</p></blockquote><p>这样就会删除对应的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">var</span> mrDeng = &#123;</span><br><span class="line">  sex: <span class="string">"male"</span>,</span><br><span class="line">  health: <span class="number">100</span>,</span><br><span class="line">  fring: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I am dring"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> mrDeng.sex;</span><br></pre></td></tr></table></figure><h3 id="3-对象的创建方法"><a href="#3-对象的创建方法" class="headerlink" title="3.对象的创建方法"></a>3.对象的创建方法</h3><h4 id="1-var-obj-对象字面量-对象直接量-plainObject"><a href="#1-var-obj-对象字面量-对象直接量-plainObject" class="headerlink" title="1. var obj = {} 对象字面量 / 对象直接量 plainObject"></a>1. var obj = {} <code>对象字面量 / 对象直接量 plainObject</code></h4><h4 id="2-构造函数-系统自带的构造函数-Object-new-Object-Array-Number-Boolean-Date"><a href="#2-构造函数-系统自带的构造函数-Object-new-Object-Array-Number-Boolean-Date" class="headerlink" title="2. 构造函数 系统自带的构造函数 Object() new Object(); Array(); Number(); Boolean(); Date();"></a>2. 构造函数 <code>系统自带的构造函数 Object() new Object(); Array(); Number(); Boolean(); Date();</code></h4><p>一、系统自带的构造函数</p><blockquote><p>Object()可以批量生成对象，每一个对象都一样，但是彼此相互独立。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 <span class="built_in">Object</span>()前面加个 <span class="keyword">new</span>，变成 <span class="keyword">new</span> <span class="built_in">Object</span>()的执行，就会真正的返回一个对象，通过 <span class="keyword">return</span> 返回，拿变量接受。<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();和 <span class="keyword">var</span> obj = &#123;&#125;;这样写区别不大</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        obj.name = ‘abc’;</span><br><span class="line">        obj.sex = “male”;</span><br></pre></td></tr></table></figure><p><strong>双引号和单引号都是表示的字符串，写双引号也可以写单引号，但是为了跟后端 php 配合最好写单引号。如果要打印一个单个的引号，用正则表达式转义字符<code>/* \&#39; */</code>注意 等号 和 冒号 的用法 <code>obj.say = function(){} var obj = { name : &#39;abc&#39;}</code></strong></p><p>二、自定义</p><blockquote><p>Object.create(原型)方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    Person 是可以随便写的，也是构造函数</span><br><span class="line">    构造函数跟函数结构上没有任何区别</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> person();</span><br></pre></td></tr></table></figure><blockquote><p>必须用 new 这个操作符，才能构造出对象</p></blockquote><p><code>构造函数必须要按照大驼峰式命名规则，但凡是构造函数就要大写，例如 TheFirNa</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'BMW'</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="string">'1400'</span>;</span><br><span class="line">    <span class="keyword">this</span>.lang = <span class="string">'4900'</span>;</span><br><span class="line">    <span class="keyword">this</span>.weight = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">this</span>.health = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.health --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">car.name = <span class="string">'Maserati'</span>;</span><br><span class="line">car1.name = <span class="string">'Merz'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出时。显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  car</span></span><br><span class="line"><span class="comment">// &lt;· Car &#123;name : 'Maserati',height : '1400',lang : '4900',weight : 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  car1</span></span><br><span class="line"><span class="comment">// &lt;· Car &#123;name : 'Merz',height : '1400',lang : '4900',weight : 1000&#125;</span></span><br></pre></td></tr></table></figure><p><code>car1 和 car 是长得一样，但是是不同的两个 car。方法名和对象名尽量不一样</code></p><p><code>a 和 A 变量是两个变量，var car = new Car 里面 car 和 Car 是两个变量</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"BMW"</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = <span class="string">"1400"</span>;</span><br><span class="line">  <span class="keyword">this</span>.lang = <span class="string">"4900"</span>;</span><br><span class="line">  <span class="keyword">this</span>.weight = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">this</span>.health = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.health--;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">"red"</span>);</span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">"green"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一行的 color 可以和上面的参数重复，通过参数，使参数发生变化，变成自定义</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  <span class="keyword">this</span>.grade = <span class="number">2017</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">18</span>, <span class="string">"male"</span>);</span><br></pre></td></tr></table></figure><h3 id="构造函数内部原理"><a href="#构造函数内部原理" class="headerlink" title="构造函数内部原理"></a>构造函数内部原理</h3><blockquote><p>前提必须要加 new，以下三步都是隐式的：</p></blockquote><ol><li><p>在函数体最前面隐式的加上 var this = {} 空对象</p></li><li><p>执行 this.xxx = xxx;</p></li><li><p>隐式的返回 return this</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var this&#123;</span></span><br><span class="line">  <span class="comment">// name : "";</span></span><br><span class="line">  <span class="comment">// age : "";</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  <span class="keyword">this</span>.grade = <span class="number">2017</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">18</span>, <span class="string">"male"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//隐式的 var this = &#123;&#125;，下面正常执行 this</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.say = funtion ()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.say);</span><br><span class="line">            <span class="comment">//此处的 this 和外面的 this 不同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 隐式的 return this;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Person(‘xiaowang’, <span class="number">180</span>).name);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例;</span><br><span class="line"><span class="comment">// 也可以这样显式的写出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = &#123;&#125;; <span class="comment">//显式写出来</span></span><br><span class="line">  that.name = name;</span><br><span class="line">  that.height = height;</span><br><span class="line">  <span class="keyword">return</span> that; <span class="comment">//显式写出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var this = &#123;&#125;</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">  <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.say);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"xiaowang"</span>, <span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"xiaozhang"</span>, <span class="number">175</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出时。显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name : 'xiaowang',height : 180&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person1</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name : 'xiaozhang',height : 175&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案现在的 peson 和 person1 都是 Object&#123;&#125;</span></span><br><span class="line"><span class="comment">// 如果 return 写成 return 123，会使 return 失效，如上</span></span><br></pre></td></tr></table></figure><blockquote><p>有 new 了以后就不能返回原始值，例如 123</p></blockquote><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p><code>new String(); new Boolean(); new Number();</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">123</span>;  →  原始值数字</span><br><span class="line"></span><br><span class="line">只有原始值数字是原始值，原始值不能有属性和方法</span><br></pre></td></tr></table></figure><blockquote><p>属性和方法只有对象有，包括对象自己，数组，function</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台输出。显示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num.abc = 'a'</span></span><br><span class="line">    <span class="comment">// &lt;· 'a'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num.abc</span></span><br><span class="line">    <span class="comment">// &lt;· 'a'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;abc:'a',[[primitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>); ——&gt; 构造函数。是对象<span class="number">123</span>，不是原始数字</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num * 2</span></span><br><span class="line">    <span class="comment">// &lt;· 246</span></span><br></pre></td></tr></table></figure><p><strong>数字的对象如果参与运算，就会变回原始值，但如果不参与运算，加属性和方法，又可以当对象用，字符串 和<code>Boolean</code>类型完全一致。</strong></p><h3 id="字符串类型的对象"><a href="#字符串类型的对象" class="headerlink" title="字符串类型的对象"></a>字符串类型的对象</h3><ol><li><p>var num = new Nunber(123); <code>数字类型对象</code></p></li><li><p>var str = new String(‘abcd’); <code>字符串类型对象</code></p></li><li><p>var bol = new Boolean(‘true’); <code>布尔类型对象</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &gt;  num</span></span><br><span class="line"><span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  str</span></span><br><span class="line"><span class="comment">// &lt;· String&#123;[[PrimitiveValue]]:abcd&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Boolean</span></span><br><span class="line"><span class="comment">// &lt;· Boolean&#123;[[PrimitiveValue]]:true&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>undefined 和 null 不可以有属性</p></blockquote><p><code>不能写成 undefined.abc = 123;会报错</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    原始值不可能有属性和方法，但经过了包装类(加隐式)可以调用一些属性与方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">4</span>；</span><br><span class="line">    num.len = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//系统隐式的加上 new Number(4).len = 3; 然后 delete</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(num.len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统隐式的加上 new Number(4).len; 但是这个 new Number 和上面的 new Number不是同一个，所以返回 undefined</span></span><br><span class="line"></span><br><span class="line">    而上面这些隐式的过程就是包装类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line">    str.length = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//隐式的加上 new string(‘abcd’).length = 2; 然后delete</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line">    答案是 abcd，<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">    str += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">typeof</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(test.length == <span class="number">6</span>)&#123;</span><br><span class="line">        test.sign = <span class="string">'typeof的返回结果可能是 Strings'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(test.sign);</span><br><span class="line"></span><br><span class="line">理解过程:</span><br><span class="line">    str += <span class="number">1</span>; <span class="comment">//abc1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">typeof</span>(str); <span class="comment">//test == “string”，返回 string，string 长度是 6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(test.length == <span class="number">6</span>)&#123;</span><br><span class="line">        test.sign = “<span class="keyword">typeof</span> 的返回结果可能为 <span class="built_in">String</span>”;</span><br><span class="line">        <span class="comment">//这是原始值,原始值要赋属性值需要调用包装类，赋了跟没赋值是一样的，new String(test).sign=’xxx’;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conlogo.log(test.sign); <span class="comment">//new String(test).sign</span></span><br><span class="line">    答案 <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">例题<span class="number">1</span>:</span><br><span class="line">    <span class="comment">// 分析一下javasript代码段</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">emproyee</span>(<span class="params">name,code</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'wangli'</span>;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">'Aoo1'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> newemp = <span class="keyword">new</span> emproyee(<span class="string">'zhangming'</span>,A002);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'雇员姓名'</span> + newemp.name + <span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'雇员代号'</span> + newemmp.code + <span class="string">'&lt;br&gt;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果是（）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A. 雇员姓名：wangli 雇员代号 A001</span></span><br><span class="line">    <span class="comment">// B. 雇员姓名：zhangming 雇员代号 A002</span></span><br><span class="line">    <span class="comment">// C. 雇员姓名：null 雇员代号 null</span></span><br><span class="line">    <span class="comment">// D. 输出错误，无输出结果</span></span><br><span class="line"></span><br><span class="line">    答案 A，里面并没有用参数，被写死了，传参不成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">2</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a ++;</span><br><span class="line">            <span class="built_in">document</span>.write(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.say = sss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oPerson = <span class="keyword">new</span> Person();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    <span class="keyword">var</span> oPerson1 = <span class="keyword">new</span> Person();</span><br><span class="line">    oPerson1.say();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案 ：1，2，1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">3</span>:</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>,y = z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    y = add(x);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z = add(x);</span><br><span class="line">    <span class="comment">// x  y  z</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案: 1, 4, 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">4</span>:</span><br><span class="line">    <span class="comment">// 下面代码中 console.log 的结果是[1,2,3,4,5]的选项是</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// B.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(aruments);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// D</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;bar.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>)&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)&#125;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案: ACD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">5</span>:</span><br><span class="line">    <span class="comment">// 请问一下表达式的结果是什么？</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    答案:<span class="number">3</span>,<span class="literal">NaN</span>，<span class="number">3</span>(有的浏览器遇到 <span class="number">0</span>进制 是报 ssNaN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">6</span>:</span><br><span class="line">    <span class="comment">// 一下那些是 javascript 语言 typeof 可能返回的结果</span></span><br><span class="line"></span><br><span class="line">    A.string     B. array    C.object    D.null</span><br><span class="line"></span><br><span class="line">    答案: A、C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">7</span>:</span><br><span class="line">    <span class="comment">// 看看下面 alert 的结果是什么？</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params">x, y, a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">        alert( a );</span><br><span class="line">    &#125;</span><br><span class="line">    b(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 如果函数体改成下面，结果又会是什么？</span></span><br><span class="line">    a = <span class="number">10</span>；</span><br><span class="line">    alert(<span class="built_in">arguments</span>[ <span class="number">2</span> ]);</span><br><span class="line"></span><br><span class="line">    答案 <span class="number">10</span>，<span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">8</span>:</span><br><span class="line">    写一个方法，求一个字符串的字节长度。(提示：字符串有一个方法 charCodeAt(); 一个中文占两个字节，一个英文占一个字节。)</span><br><span class="line"></span><br><span class="line">    定义和用法:</span><br><span class="line">    charCodeAt(); 方法可返回指定位置的字符的 Uncode 编码，这个返回值是<span class="number">0</span> - <span class="number">65535</span> 之间的整数。(当返回值是 &lt;=<span class="number">255</span>时为英文，当返回值 &gt;<span class="number">255</span>时为中文)</span><br><span class="line"></span><br><span class="line">    语法:</span><br><span class="line">    stringObject.charCodeAt(index)</span><br><span class="line"></span><br><span class="line">    eg:</span><br><span class="line">    &lt;script type = <span class="string">'javascrip/text'</span>&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"Hello word"</span></span><br><span class="line">        <span class="built_in">document</span>.write(str.charCodeAt(<span class="number">1</span>))  <span class="comment">//输出101</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">'hello world 邓哥身体好'</span>;</span><br><span class="line">        str.charCoeAt(<span class="number">0</span>); <span class="comment">// 输出 104</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">'hello world 邓哥身体好'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; str.length; i ++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(str.charCodeAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    解题</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    方式1:</span></span><br><span class="line"><span class="regexp">        var str = '1111111111111';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        function bytesLength(str)&#123;</span></span><br><span class="line"><span class="regexp">            var count = 0;</span></span><br><span class="line"><span class="regexp">            for(var i = 0;i &lt; str.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">                if(str.charCodeAt(i) &gt; 255)&#123;</span></span><br><span class="line"><span class="regexp">                    count += 2;</span></span><br><span class="line"><span class="regexp">                &#125;else&#123;</span></span><br><span class="line"><span class="regexp">                    count ++;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            return count; /</span><span class="regexp">/ 闭包</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        var Str = bytesLength(str); /</span><span class="regexp">/Str 接受闭包</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    方式2:</span></span><br><span class="line"><span class="regexp">        var str = "222222222222";</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        function bytesLength(str)&#123;</span></span><br><span class="line"><span class="regexp">            var count = str.length;</span></span><br><span class="line"><span class="regexp">            for(var i = 0; i &lt; str.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">                if(str.charCodeAt(i) &gt; 255)&#123;</span></span><br><span class="line"><span class="regexp">                    count ++;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            return count; /</span><span class="regexp">/ 闭包</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        var Str = bytesLength(str); /</span><span class="regexp">/Str 接受闭包</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">小于等于 255 是一个字节，</span></span><br><span class="line"><span class="regexp">大于是两个字节</span></span><br><span class="line"><span class="regexp">返回值大于 255 是中文</span></span><br><span class="line"><span class="regexp">上面 是两种方法 → Unicode 编码涵盖 asc 码</span></span><br></pre></td></tr></table></figure><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><ol><li><p>定义：原型是 function 对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。</p></li><li><p>利用原型特点和概念，可以提取共有属性。</p></li><li><p>对象属性的增删和原型上属性增删改查。</p></li><li><p>对象如何查看原型 ==&gt; 隐式属性 <strong>proto</strong>。</p></li><li><p>对象如何查看对象的构造函数 ==&gt; constructor。</p></li></ol><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><blockquote><p>原型，一种继承关系，出生（一开始）就被定义好了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">person.prototype <span class="comment">//原型（描述一种继承关系），出生时就被定义好了</span></span><br><span class="line"></span><br><span class="line">person.prototype = &#123;&#125; <span class="comment">//是祖先</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person.prototype  ————&gt;  原型</span></span><br><span class="line"><span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototyp.name = <span class="string">'hehe'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.name</span></span><br><span class="line"><span class="comment">// &lt;· 'hehe'</span></span><br><span class="line"></span><br><span class="line">右上的 person 和 person1 都有一个共有的祖先 Person.prototype</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">// Person.prototype  ————&gt;  原型</span></span><br><span class="line">例<span class="number">1</span>: <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototype.LastName = <span class="string">"Deng"</span>;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hehe"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.LastName = <span class="string">"Ji"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.LastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Ji'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">例<span class="number">2</span>: <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototype.LastName = <span class="string">"Deng"</span>;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hehe"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"xuming"</span>, <span class="number">35</span>, <span class="string">"male"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name:'xuming',age:35,sex:'male'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.name</span></span><br><span class="line"><span class="comment">// &lt;· 'xuming'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.LastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Deng'</span></span><br></pre></td></tr></table></figure><blockquote><p>自己身上有需要的属性，原型上也有属性，取近的，用自己的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,owner</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owner = owner;</span><br><span class="line">        <span class="keyword">this</span>.carName = <span class="string">'BMW'</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = <span class="number">1400</span>;</span><br><span class="line">        <span class="keyword">this</span>.lang = <span class="number">4900</span>;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'red'</span>,<span class="string">'prof.ji'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 1) 上面代码提取出来放在原型里面就如 2)</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    Car.prototype.height = <span class="number">1400</span>;</span><br><span class="line">    Car.prototype.lang = <span class="number">4900</span>;</span><br><span class="line">    Car.prototype.carName = <span class="string">'BMW'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,owner</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.owner = owner;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'red'</span>,<span class="string">'prof.ji'</span>);</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'green'</span>,<span class="string">'laodeng'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">例: <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototype.lastName = <span class="string">"Deng"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"xuming"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台打印:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.lastName = 'James';</span></span><br><span class="line"><span class="comment">// &lt;· 'James'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name : 'xuming',lastName : 'James'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.lastName</span></span><br><span class="line"><span class="comment">// &lt;· 'James'</span></span><br></pre></td></tr></table></figure><blockquote><p>上面通过对象（后代）改原型（祖先）是不行的，在对象里面修改，只是作用给自己的，给自己加了一个属性。改原型都不行，增加肯定也不行。对象可以删除属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    Person.prototype.height = <span class="number">1400</span>;</span><br><span class="line">    Person.prototype.lang = <span class="number">4900</span>;</span><br><span class="line">    Person.prototype.carName = <span class="string">'BMW'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pereson = <span class="keyword">new</span> Person(<span class="string">'xuming'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1) 的简化写法见 2):</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    Car.prototype = &#123;</span><br><span class="line">        height : <span class="number">1400</span>,</span><br><span class="line">        lang : <span class="number">4900</span>,</span><br><span class="line">        carName : BMW</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br></pre></td></tr></table></figure><h2 id="construnctor"><a href="#construnctor" class="headerlink" title="construnctor"></a>construnctor</h2><p><code>constructor 是构造的意思</code></p><blockquote><p>原型内部自带 constructor，指的是 Car。通过 constructor 能找的谁构造的自己</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台中输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  car.constructor</span></span><br><span class="line">    <span class="comment">// &lt;· function Car()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Car.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;</span></span><br><span class="line">    <span class="comment">//        constructor:Car()  ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//        __proto__:Object   ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">construnctor 是构造的意思(隐式是浅粉色)</span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>:</span><br><span class="line">    <span class="comment">//Person.prototype  ————&gt; 原型</span></span><br><span class="line">    <span class="comment">//Person.prototype  ————&gt; 祖先（原型）</span></span><br><span class="line">    Car.prototype.abc = <span class="string">'123'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台中输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Car.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;</span></span><br><span class="line">    <span class="comment">//      abc : '123'  ————&gt;  紫色字体</span></span><br><span class="line">    <span class="comment">//      constructor:Car()  ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//      __proto__:Object   ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">粉红色是系统帮你设置的，深紫色是自己设置的</span><br></pre></td></tr></table></figure><blockquote><p>在原型内部自带 constructor，指的是 Car。通过 constructor 能找的谁构造的自己，也可以通过 constructor 来改变自己的构造对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype=&#123;&#125;  ————&gt;  祖先(原型)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Car.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span> : Person</span><br><span class="line">    &#125;</span><br><span class="line">    function Car()&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  car.constructor</span></span><br><span class="line">    <span class="comment">// &lt;· function Person()&#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// car的构造对象本来是 function Car()&#123;&#125; 但是经过 constructor属性 的更改，car的构造对象变成了 function Person()&#123;&#125;, constructor属性也可以，找构造函数所对应的构造对象。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span> 可以被人工手动更改</span><br></pre></td></tr></table></figure><h2 id="protot"><a href="#protot" class="headerlink" title="protot"></a><strong>protot</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">"abc"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;</span></span><br><span class="line">  <span class="comment">// __proto__: Person.prototype</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;</span></span><br><span class="line"><span class="comment">//      __proto__ : Object&#123;</span></span><br><span class="line"><span class="comment">//          constructor:Person()</span></span><br><span class="line"><span class="comment">//          __protot__:Object</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.__proto__</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;</span></span><br><span class="line"><span class="comment">//          constructor : Person()  ————&gt; 粉色字体</span></span><br><span class="line"><span class="comment">//          name : 'abc'            ————&gt; 紫色字体</span></span><br><span class="line"><span class="comment">//          __proto__ : Object      ————&gt; 粉色字体</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">浅粉色的__proto__是系统的隐式的属性,前面两个_后面两个_，可以修改，尽量不改。</span><br><span class="line"></span><br><span class="line">在开发的时候，如果很私人可以写成_private，告诉同事别动。</span><br><span class="line"></span><br><span class="line">上面的__proto__放的是原型。__proto__存的对象的原型</span><br><span class="line"></span><br><span class="line">上面的 <span class="keyword">var</span> <span class="keyword">this</span> =&#123;<span class="attr">__proto__</span>:person.prototype&#125;;这个对象并不是空的，这个 proto，当你访问这个对象的属性时，如果对象没有这个属性，那么就会访问 proto 索引，看看有没有。有一个连接的关系，原型和自己连接到一起</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">"abc"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;</span></span><br><span class="line">  <span class="comment">// __proto__ : Person.prototype</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"sunny"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.__proto__ = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.__proto__</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name : 'abc'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.__proto__ = obj</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name : 'sunny'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.name</span></span><br><span class="line"><span class="comment">// &lt;· 'sunny'</span></span><br></pre></td></tr></table></figure><blockquote><p>Person 的原型是可以被修改的</p></blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">"sunny"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.name = <span class="string">"cherry"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; person.name</span></span><br><span class="line"><span class="comment">//&lt;· 'cherry'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">"sunny"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"cherry"</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; person.name</span></span><br><span class="line"><span class="comment">//&lt;· 'cherry'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">"sunny"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;__proto : Person.prototype&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">"cherry"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; person.name</span></span><br><span class="line"><span class="comment">//&lt;· 'sunny'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.name 这种.的写法是在原有的基础上把值改了。改的是属性，也就是房间里面的东西。</span><br><span class="line"></span><br><span class="line">而 Person.prototype=&#123;<span class="attr">name</span>:<span class="string">'cherry'</span>&#125;是把原型改了，换了新的对象。改了个房间。</span><br><span class="line"></span><br><span class="line">上面在 <span class="keyword">new</span> 的时候 <span class="keyword">var</span> <span class="keyword">this</span> = &#123;<span class="attr">__proto__</span>:Person.prototype&#125;里面的指向 Person，此时Person.prototype 与__proto__指向的是一个空间，把他返回给 <span class="keyword">var</span> person。</span><br><span class="line"></span><br><span class="line">先 <span class="keyword">new</span> 再 Person.prototype=&#123;<span class="attr">name</span>:<span class="string">'cherry'</span>&#125;已经晚了</span><br><span class="line"></span><br><span class="line">在 Person.prototype=&#123;<span class="attr">name</span>:<span class="string">'cherry'</span>&#125;时，Person.prototype 空间改了，但是__proto指向的空间不变。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上面的步骤实际（简化）上是→</span><br><span class="line"></span><br><span class="line">    Person.prototype = &#123;<span class="attr">name</span> : <span class="string">'a'</span>&#125;;</span><br><span class="line">    __proto__ = Person.prototype;</span><br><span class="line">    Person.prototype = &#123;<span class="attr">name</span> : <span class="string">'b'</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"a"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = obj;</span><br><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj1</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name:'a'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name:'b'&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    Person.prototype.name = <span class="string">'sunny'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//var this = &#123;__proto : Person.prototype&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        name : <span class="string">'cherry'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    上面这种思考过程：程序执行顺序</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>先把 <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;在预编译的过程中提到最上面</span><br><span class="line"><span class="number">2.</span>再执行 Person.prototype.name = <span class="string">'sunny'</span>这一样行</span><br><span class="line"><span class="number">3.</span>再执行 Person.prototype = &#123;<span class="attr">name</span>:<span class="string">'cherry'</span>&#125;</span><br><span class="line"><span class="number">4.</span>最后执行 <span class="keyword">var</span> person = <span class="keyword">new</span> Person();执行到 <span class="keyword">new</span> 的时候，才会发生    <span class="comment">//var this=&#123;__proto__:Person.prototype&#125;</span></span><br><span class="line"><span class="number">5.</span>下面的把上面的覆盖了</span><br><span class="line"><span class="number">6.</span>答案是 cherry</span><br></pre></td></tr></table></figure><blockquote><p>铺垫原型链</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Person.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object</span></span><br><span class="line"><span class="comment">//     &gt; constructor : Person()</span></span><br><span class="line"><span class="comment">//     &gt; __proto__ : Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这说明原型里面有原型</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">例: 原型链;</span><br><span class="line"></span><br><span class="line">Grand.prototype.lastName = <span class="string">"Deng"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype = grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"xuming"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype = father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hobbit = <span class="string">"smoke"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出时:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  son.hobbit</span></span><br><span class="line"><span class="comment">// &lt;· 'smoke'</span></span><br><span class="line"><span class="comment">// &gt;  son.name</span></span><br><span class="line"><span class="comment">// &lt;· 'xuming'</span></span><br><span class="line"><span class="comment">// &gt;  son.lastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Deng'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Grand.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object</span></span><br><span class="line"><span class="comment">//     ·&gt; constructor : Gran()</span></span><br><span class="line"><span class="comment">//         lastName : 'Deng'</span></span><br><span class="line"><span class="comment">//     ·&gt; __proto__ : Object</span></span><br><span class="line"><span class="comment">//         ·&gt; __defineGetter__;</span></span><br><span class="line"><span class="comment">//         ·&gt; __defineSetter__;</span></span><br><span class="line"><span class="comment">//         ·&gt; __lookupGetter__;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Object.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;&#125;</span></span><br><span class="line"><span class="comment">// &gt;  Object.prototype.__proto__</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行 son.toString <span class="comment">//返回 function toString( )&#123; [native code] &#125;，这里返回的是原型链终端的 toString</span></span><br><span class="line"></span><br><span class="line">Grand.prototype.__proto__ = <span class="built_in">Object</span>.prototype <span class="comment">// Object.prototype 是原型链的终端</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、如何构成原型链?(如下)</span><br><span class="line"></span><br><span class="line">原型链</span><br><span class="line"></span><br><span class="line">    Grand.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">    Father.prototype = grand;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'xuming'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbit = <span class="string">'smoke'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出时:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.hobbit</span></span><br><span class="line">    <span class="comment">// &lt;· 'smoke'</span></span><br><span class="line">    <span class="comment">// &gt;  son.name</span></span><br><span class="line">    <span class="comment">// &lt;· 'xuming'</span></span><br><span class="line">    <span class="comment">// &gt;  son.lastName</span></span><br><span class="line">    <span class="comment">// &lt;· 'Deng'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Grand.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object</span></span><br><span class="line">    <span class="comment">//     ·&gt; constructor : Gran()</span></span><br><span class="line">    <span class="comment">//         lastName : 'Deng'</span></span><br><span class="line">    <span class="comment">//     ·&gt; __proto__ : Object</span></span><br><span class="line">    <span class="comment">//         ·&gt; __defineGetter__;</span></span><br><span class="line">    <span class="comment">//         ·&gt; __defineSetter__;</span></span><br><span class="line">    <span class="comment">//         ·&gt; __lookupGetter__;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、原型链上属性的增删改查，原型链上的增删改查和原型基本上是一致的。只有本人有的权限，子孙是没有的。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、谁调用的方法内部 <span class="keyword">this</span> 就是谁-原型案例</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、绝大多数对象的最终都会继承自 <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="built_in">Object</span>.create(原型);</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、原型方法上的重写</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">     Grand.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">    Father.prototype = grand;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'xuming'</span></span><br><span class="line">        <span class="keyword">this</span>.fortune = &#123;</span><br><span class="line">            card1 : <span class="string">'visa'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbit = <span class="string">'smoke'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.fortune</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;card1 : 'visa'&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  son.fortune = 200;</span></span><br><span class="line">    <span class="comment">// &lt;· 200</span></span><br><span class="line">    <span class="comment">// &gt;  son</span></span><br><span class="line">    <span class="comment">// &lt;· Son&#123;hobbit : 'smoke',fortune : 200&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  father.fortune</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;card1 : 'visa'&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  son.fortune.card2 = 'master'</span></span><br><span class="line">    <span class="comment">// &lt;· 'master'</span></span><br><span class="line">    <span class="comment">// &gt;  son</span></span><br><span class="line">    <span class="comment">// &lt;· Son&#123;hobbit : 'smoke'&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  father</span></span><br><span class="line">    <span class="comment">// &lt;· Grand&#123;name : 'xuming',fortune : Object&#125;</span></span><br><span class="line">    <span class="comment">//     ·&gt; fortune : Object</span></span><br><span class="line">    <span class="comment">//         card1 : 'visa'</span></span><br><span class="line">    <span class="comment">//         card2 : 'master'</span></span><br><span class="line">    <span class="comment">//         __proto__ : Object</span></span><br><span class="line">    <span class="comment">//         name : 'xuming'</span></span><br><span class="line">    <span class="comment">//     ·&gt; __proto__ : Grand</span></span><br><span class="line"></span><br><span class="line">son.fortune.card2=<span class="string">'master'</span>这种改，这是引用值自己的修改。属于 fortune.name 给自己修改，这是一种调用方法的修改</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    Grand.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fahter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'xuming'</span>;</span><br><span class="line">        <span class="keyword">this</span>.fortune = &#123;</span><br><span class="line">            card1 : <span class="string">'visa'</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbit = <span class="string">'smoke'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.num++</span></span><br><span class="line">    <span class="comment">// &lt;· 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  father.num</span></span><br><span class="line">    <span class="comment">// &lt;· 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.num</span></span><br><span class="line">    <span class="comment">// &lt;· 101</span></span><br><span class="line"></span><br><span class="line">son.num++ 是 son.num = son.num+<span class="number">1</span>，是先把父级的取过来再赋值+<span class="number">1</span>，所以父级的没变</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例: Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">"a"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Pereson();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.sayName()</span></span><br><span class="line"><span class="comment">//    a</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//如果写成 name 就会错，没有这个变量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        name : <span class="string">'a'</span>;</span><br><span class="line">        sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Pereson</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'b'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.sayName()</span></span><br><span class="line">    <span class="comment">//    b</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.prototype.sayName()</span></span><br><span class="line">    <span class="comment">//    a</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a.sayName() 方法调用，就是say.Name 里面的 <span class="keyword">this</span> 指向，是谁调用的这个方法，<span class="keyword">this</span> 就指向谁</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        height : <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.height ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.eat()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person</span></span><br><span class="line">    <span class="comment">// &lt;· Person&#123;height : 101&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;height : 100&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.height ++; <span class="comment">//这后面默认有一个 return undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        height : <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.height ++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.eat()</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;；也是有原型的</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;; 与 <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>(); 的效果是一样的</span><br><span class="line">    写 <span class="keyword">var</span> obj = &#123;&#125;; 系统会在内部来一个 <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj1.__proto__  ————&gt;  <span class="built_in">Object</span>.prototype;</span><br><span class="line">    但是在构造对象的时候，能用对象自变量 <span class="keyword">var</span> obj = &#123;&#125;; 就不要用 <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    Person.prototype = &#123;&#125;  ————&gt;  <span class="built_in">Object</span>.prototype</span><br><span class="line">    funtion Person()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    对象自变量的原型就是 <span class="built_in">Object</span>.prototype;</span><br></pre></td></tr></table></figure><h2 id="Object-create-原型"><a href="#Object-create-原型" class="headerlink" title="Object.create 原型"></a>Object.create 原型</h2><p><code>var obj = Object.create(原型)</code></p><blockquote><p>Object.create 也能创建对象。var obj = Object.create(这里必须要有原型)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var obj = Object.create(原型)</span></span><br><span class="line">例: <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"sunny"</span>, <span class="attr">age</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj1</span></span><br><span class="line"><span class="comment">// &lt;· Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj1.name</span></span><br><span class="line"><span class="comment">// &lt;· 'sunny'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="comment">//var obj = Object.create(原型)</span></span><br><span class="line">    Person.prototype.name = <span class="string">'sunny'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">绝大多数对象的最终都会继承自 <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如: 控制台输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// html 里面没有添加任何东西，这样就会报错</span></span><br><span class="line"><span class="comment">//     &gt;  Object.create()</span></span><br><span class="line"><span class="comment">//     &lt;· 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// html里面没有添加任何东西，只在控制台加上null</span></span><br><span class="line"><span class="comment">//     &gt;  Object.create(null)</span></span><br><span class="line"><span class="comment">//     &lt;· Object</span></span><br><span class="line"><span class="comment">//         No Properties</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var obj = Object.create(null);</span></span><br><span class="line"><span class="comment">//     &gt;  obj.name = 123;</span></span><br><span class="line"><span class="comment">//     &lt;· 123</span></span><br><span class="line"><span class="comment">//     &gt;  obj</span></span><br><span class="line"><span class="comment">//     &lt;· Object</span></span><br><span class="line"><span class="comment">//         name : 123</span></span><br><span class="line"><span class="comment">//     &gt;  obj.__proto__ = &#123;name : 'sunny'&#125;</span></span><br><span class="line"><span class="comment">//     &lt;· Object&#123;name : 'sunny'&#125;</span></span><br><span class="line"><span class="comment">//     &gt;  obj</span></span><br><span class="line"><span class="comment">//     &lt;· Object&#123;&#125;</span></span><br><span class="line"><span class="comment">//     &gt;  obj.name</span></span><br><span class="line"><span class="comment">//     &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &gt;  obj.toString()</span></span><br><span class="line"><span class="comment">//     &lt;· 报错</span></span><br></pre></td></tr></table></figure><p><code>原型是隐式的内部属性，你加是没有用的</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="comment">//var obj = Object.create(原型)</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="number">123</span>); <span class="comment">// 在控制台中会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.create() 在括号里面只能放 <span class="literal">null</span> 或者 <span class="built_in">Object</span>,其余会报错</span><br><span class="line"><span class="literal">undefined</span> 和 <span class="literal">null</span> 没有原型，也就不可能有 toString 方法,如下:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  undefined.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br><span class="line">    <span class="comment">// &gt;  null.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line">下面 <span class="number">123.</span>toString 首先会识别成浮点型，所以在后面直接加.toString 是不行的</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  true.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 'true'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  123.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  num.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '123'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var obj = &#123;&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  obj.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '[object Object]'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数字想用 toString 方法，要经过包装类包装 <span class="keyword">new</span> <span class="built_in">Number</span>(num) 然后.toString</span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>:加深上面的理解</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">//num.toString(); ————&gt;  new Number(num).toString();</span></span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Number.prototype.__proto__ = Object.prototype</span></span><br><span class="line"></span><br><span class="line">而 <span class="keyword">new</span> <span class="built_in">Number</span>(num). toString 的原型是 Nunber.prototype，而 Nunber.prototype 上面有一个.toString 方法，Nunber.prototype 也有原型 Nunber.prototype.__proto__，原型是<span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line">假如 <span class="keyword">new</span> <span class="built_in">Number</span> 上面的 prototype 上面有这个 toString，那么就不用<span class="built_in">Object</span>.prototype的 toString。而这个 number 上面有这个 toString。</span><br><span class="line"></span><br><span class="line">然后 number 上面的 toString 调用的是自己重写的 toString。</span><br><span class="line"></span><br><span class="line">原型上有这个方法，我自己又写了一个和原型上同一名字，但不同功能的方法，叫做重写（同一名字的函数，不同重写方式）</span><br><span class="line"></span><br><span class="line">通过返回值，形参列表不同传参</span><br><span class="line"></span><br><span class="line">同样的名实现不同功能的，就是重写</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">// num.toString();  ————&gt;  new Number(num).toString();</span></span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Number.prototype.__proto__ = Object.prototype</span></span><br><span class="line">    <span class="comment">//Object.prototype.toString = function()&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// var obj = Object.create(原型)</span></span><br><span class="line">    <span class="comment">// Object.prototype.toString = function()&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '[object Object]'</span></span><br><span class="line"></span><br><span class="line">和原型链上终端方法名字一样，但实现不同的功能，叫做方法的重写。也就是覆盖</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// var obj = Object.create(原型);</span></span><br><span class="line">    <span class="comment">//Object.prototype.toString = function()&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        toString : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'hehe'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pereson = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    &gt;  person.toString()</span><br><span class="line">    &lt;· <span class="string">'hehe'</span></span><br><span class="line"></span><br><span class="line">下面这个也是重写:</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// var obj = Object.create(原型);</span></span><br><span class="line"></span><br><span class="line">    object.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'haha'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出:</span></span><br><span class="line"></span><br><span class="line">    &gt;  person.toString()</span><br><span class="line">    &lt;· <span class="string">'haha'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">让上面的 <span class="number">1</span>)、<span class="number">2</span>)、<span class="number">3</span>) 中的 object 上面的 toString 重写了。</span><br><span class="line">所以num.toString()调用的是 number.prototype.toString。</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString</span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString</span><br><span class="line">    <span class="built_in">Array</span>.prototype.toString</span><br><span class="line">    <span class="built_in">Boolean</span>.prototype.toString</span><br><span class="line">    <span class="built_in">String</span>.prototype.toString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出:</span></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  num.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '123'</span></span><br><span class="line"></span><br><span class="line">如果调用的是 object. prototype.toString 结果会不一样。</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.toString.call(123)</span></span><br><span class="line">    <span class="comment">// &lt;· '[object Number]'</span></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.toStrin.call(true)</span></span><br><span class="line">    <span class="comment">// &lt;· '[object Boolean]'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'老大身体好'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  num.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '老邓身体好'</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">     <span class="keyword">var</span> obj = <span class="number">123</span>;</span><br><span class="line">     <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">// 答案:123</span></span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">// 答案:[object Object]</span></span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">//  答案:报错</span></span><br><span class="line"><span class="comment">// 解析: document.write 会隐式的调用 toString 方法，其实打印的是 toString的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(obj.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有原型就不能 toString</span></span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    obj.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'老大身体好'</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">// 答案: 老邓身体好</span></span><br></pre></td></tr></table></figure><blockquote><p>上面这个例子表示：我要打印的是 obj，实际上打印出来的是 toString 方法，也证明了 document.write 调用的是 toString 方法</p></blockquote><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call / apply"></a>call / apply</h2><blockquote><p>作用，改变 this 指向。 <code>区别，后面传的参数不一样</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">toFixed 是保留两位有效数字</span><br><span class="line"></span><br><span class="line">例:有一个 bug,在控制台 <span class="number">0.14</span> * <span class="number">100</span></span><br><span class="line"><span class="comment">// 答案 : 1400000000000002,是js开发精度不精准</span></span><br><span class="line"></span><br><span class="line">例:向上取整 <span class="built_in">Math</span>.ceil(<span class="number">123.234</span>)</span><br><span class="line"><span class="comment">// 答案 124</span></span><br><span class="line"></span><br><span class="line">例:向下取整 <span class="built_in">Math</span>.floor(<span class="number">123.999</span>)</span><br><span class="line"><span class="comment">// 答案 123</span></span><br><span class="line"></span><br><span class="line">例: <span class="built_in">Math</span>.random()是产生一个 <span class="number">0</span> 到 <span class="number">1</span> 区间的开区间 随机数</span><br><span class="line"></span><br><span class="line">例: <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Math</span>.random().toFixed(<span class="number">2</span>) * <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;<span class="comment">//所以一般在这种情况下，我们不用 toFixed，因为精度不准确</span></span><br><span class="line"></span><br><span class="line">例:用这种方法取整更好，就不会精度不准确</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">注意：之前 js 在小数点后面最多能容纳 <span class="number">15</span><span class="number">-17</span> 位，但是升级后能用科学计数法表示</span><br><span class="line">如 <span class="number">2e-17</span>（是 <span class="number">2</span> 乘以 <span class="number">10</span> 的负 <span class="number">17</span> 次方）</span><br><span class="line">而小数点前面只能容纳 <span class="number">16</span> 位的运算， 可正常计算的范围是小数点前后 <span class="number">16</span> 位</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任何一个方法都可以 .call ,.call 才是一个方法执行的真实面目</span></span><br><span class="line"></span><br><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Persom</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this == obj</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"deng"</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">Person.call(obj, <span class="string">"Yu"</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test() ————&gt; test.call()</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">直接执行 Person.call ( )和 Person ( )没有区别</span><br><span class="line"></span><br><span class="line">Person.call( );括号里面可以传东西</span><br><span class="line"></span><br><span class="line">如果 Person.call( obj );里面的 call 让 person 所有的 <span class="keyword">this</span> 都变成 obj</span><br><span class="line"></span><br><span class="line">不 <span class="keyword">new</span> 的话，<span class="keyword">this</span> 默认指向 <span class="built_in">window</span>。call 的使用必须要 <span class="keyword">new</span></span><br><span class="line"></span><br><span class="line">call 的第一位参数用于改变 <span class="keyword">this</span> 指向，第二位实参（对应第一个形参）及以后的参数都当做正常的实参，传到形参里面去借用别人的方法，实现自己的功能。</span><br></pre></td></tr></table></figure><blockquote><p>例写 test（）和写 test.call（）是一样的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,tel,grade</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">        <span class="keyword">this</span>.grae = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'sunny'</span>,<span class="number">123</span>,<span class="string">'male'</span>,<span class="number">139</span>,<span class="number">2019</span>);</span><br><span class="line"></span><br><span class="line">call 改变 <span class="keyword">this</span> 指向，借用别人的函数，实现自己的功能。</span><br><span class="line">只能在你的需求完全涵盖别人的时候才能使用</span><br><span class="line">如果不想要 age 这个，就不能使用这种方法：如下</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,tel,grade</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//var this = &#123;name : '',age : '',sex : ''&#125;;</span></span><br><span class="line">        Person.call(<span class="keyword">this</span>,name,age,sex);</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Studnet(<span class="string">'sunny'</span>,<span class="number">123</span>,<span class="string">'male'</span>,<span class="number">139</span>,<span class="number">2019</span>);</span><br><span class="line"></span><br><span class="line">Person.call(<span class="keyword">this</span>, name, age, sex);里面的 <span class="keyword">this</span> 现在是 <span class="keyword">new</span> 了以后的 <span class="keyword">var</span> <span class="keyword">this</span>=&#123;&#125;</span><br><span class="line">利用 Person 方法，实现了 Student 自己的封装</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wheel</span>(<span class="params">wheelSize,style</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.style = style;</span><br><span class="line">    <span class="keyword">this</span>.wheelSize = wheelSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sit</span>(<span class="params">c,sitColor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.c = c;</span><br><span class="line">    <span class="keyword">this</span>.sitColor = sitColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Model</span>(<span class="params">height,widht,len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.widht = widht;</span><br><span class="line">    <span class="keyword">this</span>.len = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">wheelSize,style,c,sitColor,height,widht,len</span>)</span>&#123;</span><br><span class="line">    Wheel.call(<span class="keyword">this</span>.wheelSize,style);</span><br><span class="line">    Sit.call(<span class="keyword">this</span>,c,sitColor);</span><br><span class="line">    Model.call(<span class="keyword">this</span>,height,widht,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="number">100</span>,<span class="string">'花里胡哨'</span>,<span class="string">'真皮'</span>,<span class="string">'red'</span>,<span class="number">1800</span>,<span class="number">1900</span>,<span class="number">4900</span>);</span><br></pre></td></tr></table></figure><p><code>apply 也是改变 this 指向的，只是传参列表不同，第一位也是改变 this 指向的人，第二位，apply 只能传一个实参，而且必须传数组 argunments</code></p><p><code>call 需要把实参按照形参的个数传进去</code></p><p><code>new以后才有意义</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wheel</span>(<span class="params">wheelSize,style</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style = style;</span><br><span class="line">        <span class="keyword">this</span>.wheelSize = wheelSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Sit</span>(<span class="params">c,sitColor</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">        <span class="keyword">this</span>.sitColor = sitColor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Model</span>(<span class="params">height,widht,len</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.widht = widht;</span><br><span class="line">        <span class="keyword">this</span>.len = len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">wheelSize,style,c,sitColor,height,widht,len</span>)</span>&#123;</span><br><span class="line">        Wheel.apply(<span class="keyword">this</span>.[wheelSize,style]);</span><br><span class="line">        Sit.apply(<span class="keyword">this</span>,[c,sitColor]);</span><br><span class="line">        Model.apply(<span class="keyword">this</span>,[height,widht,len]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="number">100</span>,<span class="string">'花里胡哨'</span>,<span class="string">'真皮'</span>,<span class="string">'red'</span>,<span class="number">1800</span>,<span class="number">1900</span>,<span class="number">4900</span>);</span><br></pre></td></tr></table></figure><h2 id="继承发展史"><a href="#继承发展史" class="headerlink" title="继承发展史"></a>继承发展史</h2><h3 id="一、-传统形式-gt-原型链"><a href="#一、-传统形式-gt-原型链" class="headerlink" title="一、 传统形式 ==&gt; 原型链"></a>一、 传统形式 ==&gt; 原型链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例: Grand.prototype.lastName = <span class="string">"Ji"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype = grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"hehe"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype = father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure><h3 id="二、借用构造函数-gt-利用-call、apply"><a href="#二、借用构造函数-gt-利用-call、apply" class="headerlink" title="二、借用构造函数 ==&gt; 利用 call、apply"></a>二、借用构造函数 ==&gt; 利用 call、apply</h3><p><code>所以不算标准的集成模式</code></p><p><code>1）不能继承借用构造函数的原型</code></p><p><code>2）每次构造函数都要多走一个函数 ==&gt; 浪费效率</code></p><p>this 放进去的前提，这个函数必须是 new 来的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, grade</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex);</span><br><span class="line">  <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><h3 id="三、共享原型（比较好的继承方法，不能随便改动自己的原型）"><a href="#三、共享原型（比较好的继承方法，不能随便改动自己的原型）" class="headerlink" title="三、共享原型（比较好的继承方法，不能随便改动自己的原型）"></a>三、共享原型（比较好的继承方法，不能随便改动自己的原型）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例: Father.prototype.lastName = <span class="string">"Deng"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Son.prototype = Father.prototype;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  son.lastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Deng'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  father.lastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Deng'</span></span><br></pre></td></tr></table></figure><p><code>例:可以用上面的方式封装函数，实现一个继承</code></p><p><code>extend 和 inherit 都是继承的意思</code></p><p><code>inherit 是 css 的一个值，也是继承的意思。</code></p><p><code>文字类属性都有要给传递的特性:子元素没有设置文字类属性，子元素默认继承父元素的属性。</code></p><p><code>font-size:inherit(我没有继承父亲的)</code></p><p><code>在 inherit（Target，Origin）里面传进去的值是构造函数，需要大驼峰式书写，origin是（原始）的意思，让 target（目标）继承 origin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    Father.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        Target.prototype = Orign.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    <span class="comment">// &gt;  son.lastName</span></span><br><span class="line">    <span class="comment">// &lt;· 'Deng'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面这种方式，让 son 里面有了 father 原型的属性</span></span><br><span class="line"><span class="comment">// 应该是inherit继承，后使用</span></span><br><span class="line"><span class="comment">// 下面这种情况就是先继承了，后改变原型已经晚了，因为他继承的还是原来的空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Father.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        Target.prototype = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种写法，son.prototype 和 father.prototype 指向的是一个房间，改 son 就改了father。我们希望 son 用的 father 的原型，但是改变 son 自己的属性不影响 father</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Father.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        Target.prototype = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Fahter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    <span class="comment">// &gt;  son.sex</span></span><br><span class="line">    <span class="comment">// &lt;· 'male'</span></span><br><span class="line">    <span class="comment">// &gt;  father.sex</span></span><br><span class="line">    <span class="comment">// &lt;· 'male'</span></span><br></pre></td></tr></table></figure><h3 id="四、圣杯模式"><a href="#四、圣杯模式" class="headerlink" title="四、圣杯模式"></a>四、圣杯模式</h3><p><code>圣杯模式是在方法三的共有原型的基础上有所改变</code></p><p><code>共享原型是：son.prototype = father.prototype</code></p><p>圣杯模式是：另外加个构造函数 function F(){} 当作中间层，然后让 F 和 father 共有一个原型 F.prototype = father.prototype,然后 son.prototype = new F();使用原型链形成了继承关系，现在改 son.prototype 就不会影响 father.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Father.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype  = Father.prototype;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> F();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">    Father.prototype.lastName = <span class="string">"Deng"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    inherit(Son, Father);</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; father.lastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Deng'</span></span><br><span class="line"><span class="comment">// &gt; son.lastName</span></span><br><span class="line"><span class="comment">// &lt;· 'Deng'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; Son.prototype.sex = 'male';</span></span><br><span class="line"><span class="comment">// &lt;· 'male'</span></span><br><span class="line"><span class="comment">// &gt; son.sex</span></span><br><span class="line"><span class="comment">// &lt;· 'male'</span></span><br><span class="line"><span class="comment">// &gt; father.sexx</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br><span class="line"><span class="comment">// &gt; Father.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;lastName:'Deng'&#125;</span></span><br></pre></td></tr></table></figure><p><code>son.__proto__ --&gt; new F().__proto__ --&gt; Father.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    原型上默认有个 <span class="keyword">constructor</span>，<span class="keyword">constructor</span> 默认值指向他的构造函数，son.<span class="keyword">constructor</span> 应该指向 Son</span><br><span class="line"></span><br><span class="line">    // &gt; son.<span class="keyword">constructor</span></span><br><span class="line">    // &lt;· function Father()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    所以指向了 father 就是混乱了，所以指一下，如下:</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target; <span class="comment">//----&gt; 让它的 constructor 可以指向自己</span></span><br><span class="line">        Target.prototype.uber = Origin.prototype; <span class="comment">//----&gt; 让它可以知道自己继承自谁</span></span><br><span class="line">    &#125;</span><br><span class="line">    Father.prototype.lastName = <span class="string">'Deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Fahter();</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target.prototype.uber = Origin.prototype;</span></span><br></pre></td></tr></table></figure><p><strong>我们希望我们构造出的对象，能找到自己的超类，超级父级（究竟继承自谁）应该起名为super 但这个是保留字，我们就以 uber 命名。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左下这种方法就不好使了，相当于右下。还是原型指向有问题，new 的时候用的是原来的原型，再 F.prototype =father.prototype 没用，son.prototype 没发生改变</span></span><br><span class="line"></span><br><span class="line">例: </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = Origin.prototype();</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.lastName = <span class="string">"Deng"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">inherit(Son, Father);</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例，在雅虎时代，封装了 YUI3 库来解决方法三的不足，与圣杯模式相似。现在不用</span></span><br><span class="line"><span class="comment">// YUI3 库，现在用 jquery</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 雅虎：</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)'</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototype.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的 var inherit 与右边的 var inherit 是一样的意思,建议写上面的这种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototypu.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> demo;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h3 id="闭包、属性私有化、封装"><a href="#闭包、属性私有化、封装" class="headerlink" title="闭包、属性私有化、封装"></a>闭包、属性私有化、封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例为什么在外部执行的 divorce 能用内部的变量？能换成 xiaozhang？</span><br><span class="line"></span><br><span class="line">因为 <span class="keyword">this</span>.divorce 在对象上，由于对象被返回了，这个方法也被返回了。</span><br><span class="line">因为闭包。这个函数被储存到了外部，所以储存了这个函数的执行期上下文。</span><br><span class="line"></span><br><span class="line">所以可以用这个闭包。所以 <span class="keyword">var</span> prepareWife 被下面的 <span class="keyword">this</span>=fn 三个函数共用，这三个函数分别与 fn Deng 形成了闭包，共同用 Deng 的 AO,所以可以在外部随意存取。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Deng</span>(<span class="params">name,wife</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> prepareWife = <span class="string">'xiaozhang'</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">         <span class="keyword">this</span>.wife = wife;</span><br><span class="line">         <span class="keyword">this</span>.divorce = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.wife = prepareWife;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.changePrepareWife = funtion(target)&#123;</span><br><span class="line">             prepareWife = target;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.sayPrapreWife = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(prepareWife);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> deng = <span class="keyword">new</span> Deng(<span class="string">'Deng'</span>,<span class="string">'xiaoliu'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  从控制器输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng</span></span><br><span class="line">    <span class="comment">// &lt;· Deng</span></span><br><span class="line">    <span class="comment">//     &gt; changePrepareWife(target)</span></span><br><span class="line">    <span class="comment">//     &gt; divorce:()</span></span><br><span class="line">    <span class="comment">//         name : "deng"</span></span><br><span class="line">    <span class="comment">//     &gt; sayPrapreWife:()</span></span><br><span class="line">    <span class="comment">//         wife : 'xiaoliu'</span></span><br><span class="line">    <span class="comment">//     &gt; __proto__ : Object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng.divorce()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  deng.wife</span></span><br><span class="line">    <span class="comment">// &lt;· 'xiaozhang'</span></span><br><span class="line">    <span class="comment">// &gt;  deng.prepareWife</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><p>deng.prepareWife 是 undefined 的，表面上看起来不是自己的，但是<code>实际上只有对象自己通过对象自己设置的方法可以去操作他，外部用户通过对象，prepareWife 是看不到的</code>，只有自己能看到，就是闭包的私有化运用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例: <span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行完是这个样子</span></span><br><span class="line"><span class="keyword">var</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">  F.prototype = Origin.prototype;</span><br><span class="line">  Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  Target.prototype.constructor = Target;</span><br><span class="line">  Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>上面的 var F 这个 F 形成了闭包，成为了这个函数的私有化变量，而且变成私有化变量就更好</code></p><h1 id="命名空间（对象模块化开发-其实就是对象）"><a href="#命名空间（对象模块化开发-其实就是对象）" class="headerlink" title="命名空间（对象模块化开发,其实就是对象）"></a>命名空间（对象模块化开发,其实就是对象）</h1><blockquote><p>管理变量，防止污染全局，适用于模块化开发</p></blockquote><p><code>多人开发，对象命名容易重复，就要解决命名空间的问题</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">以前的命名空间老旧的解决方法，如下：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> org = &#123;</span><br><span class="line">        department1 : &#123;</span><br><span class="line">            jicheng : &#123;</span><br><span class="line">                name : <span class="string">'abc'</span>,</span><br><span class="line">                age : <span class="number">123</span></span><br><span class="line">            &#125;,</span><br><span class="line">            xuming : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;，</span><br><span class="line">        departmeng2 : &#123;</span><br><span class="line">            zhangsan : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            lisi : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是用的写法</span></span><br><span class="line">    <span class="keyword">var</span> jicheng = org.department1.jicheng;</span><br><span class="line">    jicheng.name</span><br></pre></td></tr></table></figure><p><code>下面是现在公司最常见的方法：用闭包来解决（也可用 webpack），返回方法的调用。init 是初始化，入口函数，入口名字。init 调用了这个函数的功能</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'bcd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initDeng = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        callName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">initDeng();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"><span class="comment">// &gt;  init()</span></span><br><span class="line"><span class="comment">//    abc</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  initDeng()</span></span><br><span class="line"><span class="comment">// &lt;· 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  initDeng()</span></span><br><span class="line"><span class="comment">//    123</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><h1 id="思考问题（连续调用）"><a href="#思考问题（连续调用）" class="headerlink" title="思考问题（连续调用）"></a>思考问题（连续调用）</h1><blockquote><p>如何实现调用模式（模仿 jquery）</p></blockquote><p><code>obj.eat().smoke().drink().eat().sleep;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>)</span></span><br><span class="line"><span class="actionscript">    .css(<span class="string">"background-color"</span>, <span class="string">"red"</span>)</span></span><br><span class="line">    .width(100)</span><br><span class="line">    .height(100)</span><br><span class="line">    .html(123)</span><br><span class="line"><span class="actionscript">    .css(<span class="string">"postion"</span>, <span class="string">"absolute"</span>)</span></span><br><span class="line"><span class="actionscript">    .css(<span class="string">"left"</span>, <span class="string">"100px"</span>)</span></span><br><span class="line"><span class="actionscript">    .css(<span class="string">"top"</span>, <span class="string">"100px"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        smoke : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Smoke,…… xuan cool!!!'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        drink : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drinking……,ye cool!'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        perm : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'preming……，cool'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    deng.smoke();</span><br><span class="line">    deng.drink();</span><br><span class="line">    deng.prem();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能连续调用 deng.smoke().drink();</span></span><br><span class="line"></span><br><span class="line">上面改成下面的写法:用<span class="keyword">return</span> <span class="keyword">this</span>，就可以连续调用和执行了。deng.smoke().drink()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        smoke : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Smoke,... xuan cool!!!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        drink : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drinking...,ye cool!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        prem : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'preming..., cool!'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    deng.smoke().drink().perm().smoke().drink();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面使用 return this 连续的调用</span></span><br></pre></td></tr></table></figure><h1 id="属性的表示方法（查看属性）"><a href="#属性的表示方法（查看属性）" class="headerlink" title="属性的表示方法（查看属性）"></a>属性的表示方法（查看属性）</h1><p><code>obj.prop 查看就用 .prop</code></p><p><code>obj[&quot;prop&quot;] 中括号也是访问属性的方法</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">想要传出去序号几，就会调用几</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的是老旧办法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        wife1 : &#123;<span class="attr">name</span> : <span class="string">'xioaliu'</span>&#125;,</span><br><span class="line">        wife2 : &#123;<span class="attr">name</span> : <span class="string">'xiaozhang'</span>&#125;,</span><br><span class="line">        wife3 : &#123;<span class="attr">name</span> : <span class="string">'xiaomeng'</span>&#125;,</span><br><span class="line">        wife4 : &#123;<span class="attr">name</span> : <span class="string">'xiaowang'</span>&#125;,</span><br><span class="line">        sayWife : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.wife1;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.wife1;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.wife1;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.wife1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    deng.switch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面用 switch 的方法不是很好，下面的方法比较完善一些</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var obj = &#123;name : 'abc'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用方括号来访问属性也是一样的（里面必须是字符串）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种基本上完全相同 obj.name  ---&gt;   obj['name']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要实现属性名的拼接，只能用方括号的形式</span></span><br><span class="line">    <span class="comment">// &gt;  obj.name</span></span><br><span class="line">    <span class="comment">// &lt;· 'abc'</span></span><br><span class="line">    <span class="comment">// &gt;  obj['name']</span></span><br><span class="line">    <span class="comment">// &lt;· 'abc'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        wife1 : &#123;<span class="attr">name</span> : <span class="string">'xiaoliu'</span>&#125;,</span><br><span class="line">        wife2 : &#123;<span class="attr">name</span> : <span class="string">'xiaozhang'</span>&#125;,</span><br><span class="line">        wife3 : &#123;<span class="attr">name</span> : <span class="string">'xiaomeng'</span>&#125;,</span><br><span class="line">        wife4 : &#123;<span class="attr">name</span> : <span class="string">'xiaownag'</span>&#125;,</span><br><span class="line">        sayWife : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>[<span class="string">'wife'</span> + num];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="对象的枚举（enumeration）"><a href="#对象的枚举（enumeration）" class="headerlink" title="对象的枚举（enumeration）"></a>对象的枚举（enumeration）</h1><p><code>for in 循环（简化版 for 循环），目的是遍历对象，通过对象属性的个数来控制循环圈数，这个对象有多少属性循环多少圈，而且在每一圈的时候，都把对象的属性名放到 Prop 里面，在枚举面前，一定要写成 obj[prop]不能加字符串</code></p><p><code>1. hasOwnProperty</code></p><p><code>2. in</code></p><p><code>3. instanceof</code></p><blockquote><p>枚举也就是遍历，挨个知道信息的过程就叫这个数据组的遍历</p></blockquote><h2 id="for-变量-in-对象"><a href="#for-变量-in-对象" class="headerlink" title="for(变量 in 对象)"></a>for(变量 in 对象)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>: <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="comment">// 遍历 枚举 enumeration</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for( in ) 循环</span></span><br><span class="line">例<span class="number">2</span>: <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"13"</span>,</span><br><span class="line">  age: <span class="number">123</span>,</span><br><span class="line">  sex: <span class="string">"male"</span>,</span><br><span class="line">  height: <span class="number">180</span>,</span><br><span class="line">  weight: <span class="number">75</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop + <span class="string">" "</span> + <span class="keyword">typeof</span> prop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name     string</span></span><br><span class="line"><span class="comment">// age      string</span></span><br><span class="line"><span class="comment">// sex      string</span></span><br><span class="line"><span class="comment">// height   string</span></span><br><span class="line"><span class="comment">// weight   string</span></span><br></pre></td></tr></table></figure><p><code>上面就是 for in 循环，就是遍历用的。通过对象的属性个数来控制循环圈数，有多少个属性就会循环多少圈。</code></p><p><code>for（var prop in obj）在循环每一圈的时候，他会把对象的属性名放在 prop 里面。</code></p><p><code>想遍历谁就 in 谁，prop 可以写别的，obj 就是我们想要遍历的对象。</code></p><p><code>for(XX in XX) 的格式是固定的。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 也可以写在外面，写成 var key; for(key in obj1) 效果是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="number">234</span>,</span><br><span class="line">    c : <span class="number">345</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> key;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">    obj.key ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">写成下面会出错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;                         <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'13'</span>,                        <span class="attr">name</span> : <span class="string">'13'</span>,</span><br><span class="line">        age : <span class="number">123</span>,                          <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,                       <span class="attr">sex</span> : <span class="string">'male'</span>,</span><br><span class="line">        height : <span class="number">180</span>,                       <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        weight : <span class="number">75</span>                         weight : <span class="number">75</span></span><br><span class="line">                                            prop : <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;               <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj.prop);              <span class="built_in">console</span>.log(obj.prop);</span><br><span class="line">    &#125;                                   &#125;</span><br><span class="line">    <span class="comment">// 答案：undefined * 5              答案：123*6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的 console.log(obj.prop); 系统以为我们写的是 console.log(obj['prop']);，系统会以为我们是在让他访问 prop 这个属性，不会把 prop 当成一个变量来使用。写成 obj[prop]就可以成功访问了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'13'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        height : <span class="number">180</span>,</span><br><span class="line">        weight : <span class="number">75</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="comment">// console.log(obj.prop  ----&gt;   obj['prop']);</span></span><br><span class="line">        <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写对象时用方括号的形式不容易犯错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'13'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        height : <span class="number">180</span>,</span><br><span class="line">        weight : <span class="number">75</span>,</span><br><span class="line">        __proto__ : &#123;</span><br><span class="line">            lastName : <span class="string">'Deng'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj[prop])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案：13、123、male、180、75、deng</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p><code>如果在遍历的时候，我们不想把原型上面的属性拿出来，可以用 hasOwnProperty,一般与 for in 循环成套出现</code></p><p><code>hasOwnProperty 是一个方法，来判断这个对象是你自己的还是原型的，任何要给对象里面都有 hasOwnProperty，里面是需要传参的，把属性传进去（如 prop），下面达到了如果不是自己的属性，是原型上的属性，就不会返回</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'13'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        height : <span class="number">180</span>,</span><br><span class="line">        weight : <span class="number">75</span>,</span><br><span class="line">        __proto__ : &#123;</span><br><span class="line">            lastName : <span class="string">'deng'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 答案:  13、123、male、180、75</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注明：for in 循环理论上可以返回原型和原型链上的东西，一旦这个原型链延展到了的 object.prototype 上，不会打印系统的，只会打印自带的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    __proto__:&#123;</span><br><span class="line">        lastName : <span class="string">'deng'</span>,</span><br><span class="line">        __proto__ : <span class="built_in">Object</span>.prototype    <span class="comment">// 不会打印这个 object.prototype</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">加 <span class="built_in">Object</span>.prototype.abc = <span class="string">'123'</span>; 加个 ！变成只有不是它的才打印</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'13'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        height : <span class="number">180</span>,</span><br><span class="line">        weight : <span class="number">75</span>,</span><br><span class="line">        __proto__ : &#123;</span><br><span class="line">            lastName : <span class="string">'deng'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!obj.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><p><code>in 操作符：很少用</code></p><blockquote><p>in 操作符，你的也是你的，你父亲的也是你的，只能判断这个对象能不能访问到这个属性，包括原型上，不是判断属性属不属于这个对象的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'13'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        height : <span class="number">180</span>,</span><br><span class="line">        weight : <span class="number">75</span>,</span><br><span class="line">        __proto__ : &#123;</span><br><span class="line">            lastName : <span class="string">'deng'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!obj.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    &gt;  height <span class="keyword">in</span> obj</span><br><span class="line">    &lt;· 报错</span><br><span class="line">    &gt;  <span class="string">'height'</span> <span class="keyword">in</span> obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line">    &gt;  <span class="string">'lastName'</span> <span class="keyword">in</span> obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个属性属不属于这个对象的只能用 hasOwnProperty</span></span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>instanceof 操作符类似于 in，但是完全不同</p></blockquote><p><code>A instanceof B 的意思是 A 的对象是不是 B 构造函数构造函数构造出来的，记住是：看 Ａ 对象的原型链上有没有 B 的原型</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决了</span></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制器输出 :</span></span><br><span class="line">    <span class="comment">// &gt;  pereson instanceof Object</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  [] instanceof Array</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  [] instanceof Object</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj instanceof Person</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line">    <span class="comment">// &gt;  typeof([])</span></span><br><span class="line">    <span class="comment">// &lt;· 'object'</span></span><br><span class="line">    <span class="comment">// &gt;  typeof(&#123;&#125;)</span></span><br><span class="line">    <span class="comment">// &lt;· 'object'</span></span><br><span class="line"></span><br><span class="line">例:区别传的变量是数组还是对象的方法：一是 <span class="keyword">constructor</span>，二是 instanceof</span><br><span class="line">    var arr = &#123;&#125;;<span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    <span class="comment">// &gt;  obj.constructor</span></span><br><span class="line">    <span class="comment">// &lt;· function Object()&#123;[native code]&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  [] instanceof Array</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var obj = &#123;&#125;;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  obj instanceof Array</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:第三种区分数组还是对象的方法：想让数组调用他的 toString 方法</span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString.call([]);    <span class="comment">//[] 会替换this</span></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 识别this(谁调的它，这个 this 就是谁）就返回相应的及如果)</span></span><br><span class="line">    &#125;</span><br><span class="line">    obj.toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    &gt;  <span class="built_in">Object</span>.prototype.toString.call([]);</span><br><span class="line">    &lt;· <span class="string">'[object Array]'</span></span><br><span class="line">    &gt;  <span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>);</span><br><span class="line">    &lt;· <span class="string">'[object Number]'</span></span><br><span class="line">    &gt;  <span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;);</span><br><span class="line">    &lt;· <span class="string">'[object Object]'</span></span><br></pre></td></tr></table></figure><h1 id="this-笔试真题-进制"><a href="#this-笔试真题-进制" class="headerlink" title="this,笔试真题,进制"></a>this,笔试真题,进制</h1><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p><code>十六进制 0 1 2 3 4 5 6 7 8 9 a b c d e f</code></p><p><code>十六进制的中 10 是十进制的 16， 1f = 16 + 15</code></p><p><code>二进制中的 10是十进制的 2，11 是十进制的3</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|    在十进制中：    |    在二进制中：   |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">1</span> = <span class="number">1</span>            |   <span class="number">1</span> = <span class="number">1</span>          |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">10</span> = <span class="number">10</span>          |   <span class="number">10</span> = <span class="number">2</span>         |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">100</span> = <span class="number">10</span> ^ <span class="number">2</span>     |   <span class="number">100</span> = <span class="number">2</span> ^ <span class="number">2</span>    |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">1000</span> = <span class="number">10</span> ^ <span class="number">3</span>    |   <span class="number">1000</span> = <span class="number">2</span> ^ <span class="number">3</span>   |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">10000</span> = <span class="number">10</span> ^ <span class="number">4</span>   |   <span class="number">10000</span> = <span class="number">2</span> ^ <span class="number">4</span>  |</span><br><span class="line">————————————————————————————————————————</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>函数预编译过程 this ---&gt; 指向 window</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = Object.creat(test.prototype);</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">// __proto__ : test.prototype</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// AO&#123;</span></span><br><span class="line">    <span class="comment">//     arguments : [1],</span></span><br><span class="line">    <span class="comment">//     this : window,</span></span><br><span class="line">    <span class="comment">//     c : 1,</span></span><br><span class="line">    <span class="comment">//     a : undefined,</span></span><br><span class="line">    <span class="comment">//     b : function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">new</span> test();</span><br><span class="line">    <span class="comment">// 前面的 var this = Object.creat(test.prototype);是最标准的写法</span></span><br><span class="line">    <span class="comment">// new test();就会让 var this = Object.creat(test.prototype);如果不 new this 就会指向 window</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// &gt;  window</span></span><br><span class="line">    <span class="comment">// &lt;· Window&#123;</span></span><br><span class="line">        <span class="comment">// .........</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><code>全局作用域里 this ---&gt; 指向 window</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">&lt;· Window&#123;......&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>call / apply 可以改变函数运行时的 this 指向</code></p></li><li><p><code>obj.func(); func()里面的 this 就指向谁</code></p></li></ol><blockquote><p>总结</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> name : <span class="string">'222'</span>;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;</span><br><span class="line">        name : <span class="string">'111'</span>,</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun = a.say;</span><br><span class="line">    fun() <span class="comment">// 222</span></span><br><span class="line">    a.say() <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = &#123;</span><br><span class="line">        name : <span class="string">'333'</span>,</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">            fun();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b.say(a.say); <span class="comment">// 222</span></span><br><span class="line">    b.say = a.say;</span><br><span class="line">    b.say(); <span class="comment">// 333</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分析：</span></span><br><span class="line">        <span class="comment">// a.say 是 function 函数体</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this  --&gt;   b</span></span><br><span class="line">            <span class="comment">// console.log(this) --&gt; b</span></span><br><span class="line">            fun();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fun()空执行，走预编译</span></span><br><span class="line">        <span class="comment">// 在 b.say(a.say)中</span></span><br><span class="line">        <span class="comment">// a.say 当作参数传进来了</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    name : <span class="string">'abc'</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure><h2 id="笔试真题"><a href="#笔试真题" class="headerlink" title="笔试真题"></a>笔试真题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>：下面这段代码执行完毕后，x,y,z的值分别是多少？</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>, y = z = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    y = add(x);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z = add(x);</span><br><span class="line"><span class="comment">// 答案：1，4，4; 同一个函数，后面的肯定会覆盖前面的，因为预编译会覆盖</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：下面代码中 <span class="built_in">console</span>.log 的结果是[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]的选项是：</span><br><span class="line">    A. function foo(x)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    B. function foo(x)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    C. (<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    D. function foo()&#123;</span><br><span class="line">            bar.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 答案：A、C、D 其中b执行不了，但是不报错，bar里面传了一下参数。bar.apply(null,arguments); 写成 bar(arguments);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：一行文本，水平垂直居中</span><br><span class="line">    <span class="comment">// 答案：height = line height;     text-align:center</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：请问以下表达式的结果是什么？</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">8</span>)       <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">2</span>)       <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">    A<span class="number">.3</span>,<span class="number">3</span>,<span class="number">3</span>     B<span class="number">.3</span>,<span class="number">3</span>,<span class="literal">NaN</span>     C<span class="number">.3</span>,<span class="literal">NaN</span>,<span class="literal">NaN</span>     D.other</span><br><span class="line">    <span class="comment">// 答案:C 或 D（有的浏览器 0 进制报错，有的不报错）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">5</span>：以下那些是 javascript 语言 <span class="keyword">typeof</span> 可能返回的结果</span><br><span class="line">    A. string   B.array    C.object    D.null</span><br><span class="line">    <span class="comment">//答案：A、C (typeof 只能返回 number、string、undefined、boolean、object、function)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">6</span>：javascript 的 call 和 apply 方法是做什么的？两者有什么区别</span><br><span class="line"></span><br><span class="line">    Wheel.apply(<span class="keyword">this</span>,[wheelSize,style]);</span><br><span class="line">    Wheel.call(<span class="keyword">this</span>,wheelSize,style);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//答案：call 和 apply 的作用都是改变 this 指向的，不过两个的传参列表不同，apply 只能传一个实参，而且必须传数组 arguments</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">7</span>：看看下面 alert 的结果是什么？</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">x,y,a</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    b(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 如果函数体改成下面，结果会是怎么样</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//答案：10，10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">8</span>：逗号操作符，这种情况，会先看一眼<span class="number">1</span>，再看一眼<span class="number">2</span>，然后返回<span class="number">2</span>，就是<span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> f = (</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    )();</span><br><span class="line">    <span class="keyword">typeof</span> f;</span><br><span class="line">    <span class="comment">// 在控制器中输出：</span></span><br><span class="line">    <span class="comment">// &gt;  1,2</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = (1,2);</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">9</span>：</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        x += <span class="keyword">typeof</span> f;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="comment">// 分析：用括号把 function f()&#123;&#125; 转换成一个表达式，就会被立即执行了，就找不到了，因为 function f() &#123;&#125; 肯定是 true，所以会执行 &#123;&#125;，但是 typeof 中的 f 已经找不到了</span></span><br><span class="line">    <span class="comment">// 答案：1undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">10</span>：以下哪些表达式的结果为<span class="literal">true</span>的</span><br><span class="line">    A.undefined == <span class="literal">null</span>     B.undefined === <span class="literal">null</span>     C.isNaN(<span class="string">'100'</span>)     D.parseInt(<span class="string">'1a'</span>) == <span class="number">1</span></span><br><span class="line">    <span class="comment">// 答案：A、C、D    isNaN('100')意思是这个数经过 number 转换后是不是NaN</span></span><br><span class="line"></span><br><span class="line">    C。<span class="function"><span class="keyword">function</span> <span class="title">myIsNaN</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="built_in">Number</span>(num);</span><br><span class="line">        ret += <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="string">'NaN'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  myIsNaN('123')</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  myIsNaN('NaN')</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">10</span>：引用值比的是地址</span><br><span class="line">    &gt;  &#123;&#125; == &#123;&#125;</span><br><span class="line">    &lt;· <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    &gt;  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    &lt;· <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    &gt;  <span class="keyword">var</span> obj1 = obj</span><br><span class="line">    &lt;· <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    &gt;  obj1 == obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &gt;  obj1 == obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">11</span>：</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">'123'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="string">'456'</span>;</span><br><span class="line">        <span class="keyword">this</span>.foo = <span class="string">'789'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 456</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把上面的题变形</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案打印 234，要 console.log(foo);是全局的 foo，但是这里 this.foo 的 this是指向全局 window 的，相当于就把外面的 123 改成了 234</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在变形一下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = Object.creat(print.prototype)</span></span><br><span class="line">        <span class="keyword">this</span>.foo = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.logf(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> print();</span><br><span class="line">    <span class="comment">// 答案:123</span></span><br><span class="line">    <span class="comment">//，new 了以后，隐式 var this = Object.create(print.prototype)这时候 this.foo 不 再指向 window，转而指向 var this，所以打印的时候找不到 234，就到全局找到 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">12</span>：运行 test() 和 <span class="keyword">new</span> test() 的结果分别是什么？</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        alert(a);</span><br><span class="line">        alert(<span class="keyword">this</span>.a);</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 答案：0，5，0</span></span><br><span class="line">    <span class="comment">// new test() 之后是 0，undefined，0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分析: 【之前其中 this.a 指代的是 window，所以是 0，5，0】</span></span><br><span class="line">    <span class="comment">//       【之后，因为 this 上没有 a ,所以打印 undefined】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">13</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">        <span class="built_in">console</span>.log(hello);</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案：undefiend,2,hello is no defined(报错，因为hello 没有被定义，所以报错)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">14</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> test;</span><br><span class="line">        test();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">15</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'One!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x === <span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Two!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 答案：One</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">16</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> marty = &#123;</span><br><span class="line">            name : <span class="string">'marty'</span>,</span><br><span class="line">            printName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> test1 = &#123;<span class="attr">name</span> : <span class="string">"test1"</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> test2 = &#123;<span class="attr">name</span> : <span class="string">'test2'</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> test3 = &#123;<span class="attr">name</span> : <span class="string">'test3'</span>&#125;;</span><br><span class="line">        test3.printName = marty.printName;</span><br><span class="line">        <span class="keyword">var</span> printName2 = marty.printName.bind(&#123;<span class="attr">name</span>:<span class="number">123</span>&#125;);<span class="comment">//做不了</span></span><br><span class="line">        marty.printName.call(test1);</span><br><span class="line">        marty.printName.apply(test2);</span><br><span class="line">        marty.printName();</span><br><span class="line">        printName2();</span><br><span class="line">        test3.printName();</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案：test1，test2，marty，做不了有bind，test3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">17</span>：</span><br><span class="line">    <span class="keyword">var</span> bar = &#123;<span class="attr">a</span> : <span class="string">'002'</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        bar.a = <span class="string">'a'</span>;</span><br><span class="line">        <span class="built_in">Object</span>.prototype.b = <span class="string">'b'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(bar.a);</span><br><span class="line">            <span class="built_in">console</span>.log(bar.b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print()();</span><br><span class="line">    <span class="comment">// 答案：a,b</span></span><br><span class="line">    <span class="comment">// print()() 第一个括号返回的是一个函数，第二个再来函数执行</span></span><br></pre></td></tr></table></figure><h1 id="arguments-callee、function-caller"><a href="#arguments-callee、function-caller" class="headerlink" title="arguments.callee、function.caller"></a>arguments.callee、function.caller</h1><p><code>arguments.callee 指向函数的引用(函数自己)</code></p><p><code>function.caller 返回执行程序的坏境名称</code></p><h2 id="一、callee"><a href="#一、callee" class="headerlink" title="一、callee"></a>一、callee</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 答案：test</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == test);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 答案:true</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：我们要初始化数据，是<span class="number">100</span>以内的阶乘，用立即执行函数找自己的引用来解决</span><br><span class="line">    <span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n * arguemtns.callee(n - <span class="number">1</span>);</span><br><span class="line">    &#125;)(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(arguemtns.callee);</span><br><span class="line">        &#125;</span><br><span class="line">        demo(); <span class="comment">// demo</span></span><br><span class="line">    &#125;</span><br><span class="line">    test(); <span class="comment">// test</span></span><br><span class="line">    <span class="comment">// 在那个函数里面的 argument.callee 就指代了哪个函数</span></span><br></pre></td></tr></table></figure><h2 id="二、caller"><a href="#二、caller" class="headerlink" title="二、caller"></a>二、caller</h2><p><code>caller 是他在哪个环境执行，就返回哪个环境的名字，不能再arguments里面</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    demo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(demo.caller);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo 被调用的环境是 test</span></span><br><span class="line"><span class="comment">// 所以这个 caller 指代的 test</span></span><br></pre></td></tr></table></figure><h1 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h1><p><code>浅层克隆</code></p><p><code>深层克隆</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>：这个是做的浅层克隆</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'abc'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'female'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">            target[prop] == origin[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clone(obj,obj1);</span><br><span class="line">    <span class="comment">// 在控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : 'abc',age : 123,sex : 'female'&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : 'abc',age : 123,sex : 'female'&#125;</span></span><br><span class="line"></span><br><span class="line">把上面的改一下，写一个兼容性的写法，为了防止用户不传 target（容错），给了参数就直接用，不给就当空对象，见下方：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'abc'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'female'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = target || &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">            target[prop] == origin[prop];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    clone(obj,obj1);</span><br><span class="line">    <span class="comment">// 在控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : 'abc',age : 123,sex : 'female'&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : 'abc',age : 123,sex : 'female'&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj.name = 'bcd';</span></span><br><span class="line">    <span class="comment">// &lt;· 'bcd'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1.name</span></span><br><span class="line">    <span class="comment">// &lt;· 'abc'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'abc'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        sex : <span class="string">'female'</span>,</span><br><span class="line">        card : [<span class="string">'visa'</span>,<span class="string">'unionpay'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = target || &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">            target[prop] == origin[prop];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    clone(obj,obj1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj1</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : 'abc',age : 123,sex : 'female'&#125;</span></span><br><span class="line">    <span class="comment">//    card : Array[2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1.card.push('master')</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1.crad</span></span><br><span class="line">    <span class="comment">// &lt;· &#123;'visa','unionpay','master'sss&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : 'abc',age : 123,sex : 'female',card : Array[3]&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj.card</span></span><br><span class="line">    <span class="comment">// &lt;· ['visa','unionpay','master']</span></span><br><span class="line"></span><br><span class="line">现在我们想实现深度克隆（只考虑数组和对象），copy过去后，我改，但是你不会改， 引用值不能直接拷贝</span><br></pre></td></tr></table></figure><p><code>思考上一道题做深度克隆，分析它是什么，建立是什么，收尾需要要给递归，提示：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例: obj = &#123;</span><br><span class="line">  card: [<span class="string">"visa"</span>, <span class="string">"unionpay"</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  card: [obj.card[<span class="number">0</span>], obj.card[<span class="number">1</span>], []]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>作业：做一个深度克隆（copy后，各自独立，互不影响）</code></p><p><code>思路：需要一个分析环节，分析是什么，是原始值就按原来的方法拷贝过来，是引 用值就分析是数组还是对象。如果是数组，就新建一个数组；如果是对象，就新建一个对象。再一层层看，里面有一个递归。引用值不能直接拷贝，引用值拷贝的是 地址</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'abc'</span>,</span><br><span class="line">    age : <span class="number">123</span>,</span><br><span class="line">    card : [<span class="string">'visa'</span>,<span class="string">'master'</span>],</span><br><span class="line">    wife : &#123;</span><br><span class="line">        name : <span class="string">'bcd'</span>,</span><br><span class="line">        son : &#123;</span><br><span class="line">            name : <span class="string">'aaa'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;, <span class="comment">// 有就用你的，没有就用后面的</span></span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString, <span class="comment">// 引用，目的是简化</span></span><br><span class="line">        arrStr = <span class="string">'[Object Array]'</span>; <span class="comment">// 引用，目的是简化比对</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> origin) &#123; <span class="comment">// 从原始 origin 拷贝到 target</span></span><br><span class="line">        <span class="keyword">if</span> (origin.hasOwnProperty(prop)) &#123; <span class="comment">// 先判断是不是原型上的属性，如果是 false 就是原型上的</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> (origin[prop]) !== <span class="string">'null'</span> &amp;&amp; <span class="keyword">typeof</span> (origin[prop]) == <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((toStr.call(origin[prop])) == arrStr) &#123;</span><br><span class="line">                    target[prop] = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    target[prop] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                deepClone(origin[prop], target[prop]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// else 后面是原始值</span></span><br><span class="line">                target[prop] = origin[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'abc'</span>,</span><br><span class="line">    agfe : <span class="number">123</span>,</span><br><span class="line">    card : [<span class="string">'visa'</span>,<span class="string">'master'</span>] <span class="comment">//原始对象</span></span><br><span class="line">    wife : &#123;</span><br><span class="line">        name : <span class="string">'bcd'</span>,</span><br><span class="line">        son : &#123;</span><br><span class="line">            name : <span class="string">'aaa'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name : <span class="string">'abc'</span>,</span><br><span class="line">    age : <span class="number">123</span>,</span><br><span class="line">    card : [obj.card[<span class="number">0</span>],obj.card[<span class="number">1</span>]],</span><br><span class="line">    <span class="comment">// 要拷贝的对象，进行 obj 里面的数组，对这个数组的拷贝再一次拷贝</span></span><br><span class="line">    wife : &#123;</span><br><span class="line">        name : <span class="string">'bcd'</span>,</span><br><span class="line">        son : &#123;</span><br><span class="line">            name : <span class="string">'aaa'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">深度克隆的步骤：</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> 先把所有的值都遍历一遍（看是引用值和原始值）</span><br><span class="line">       用<span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj),对象和数组都可以使用</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> 判断是原始值，还是引用值？用<span class="keyword">typeof</span>判断是不是object</span><br><span class="line">        <span class="number">1</span>) 如果是原始值就直接拷贝</span><br><span class="line">        <span class="number">2</span>) 如果是引用值，判断是数组还是对象</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span> 判断是数组还是对象？（方法 intanceof 【看 a 的原型链上有没有 b 的原型链】、toString、<span class="keyword">constructor</span>,建议用 toString，另外两个有个小 bug ———— 跨父子域不行）</span><br><span class="line">        1）如果是数组，就新建一个空数组</span><br><span class="line">        2）如果是对象，就新建一个空对象</span><br><span class="line"></span><br><span class="line">    4. 建立了数组以后，如果是挨个看原始对象里面是什么，都是原始值就可以直接拷过来了；或者，建立了对象以后，挨个判断对象里面的每一个值，看是原始值还是引用值</span><br><span class="line"></span><br><span class="line">    5. 递归</span><br></pre></td></tr></table></figure><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p><code>形式：?（问号）前面是一个条件判断，判断true就执行:（冒号）前面的；false就执行:（冒号）后面的，并且返回值</code></p><p><code>条件判断 ? 是 : 否 并且会返回值</code></p><p><code>三木运算符是 简化 版的if（条件判断）{是在这里}else{否在这里}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? <span class="number">2</span> + <span class="number">2</span> : <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 答案：4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &lt; <span class="number">0</span> ? <span class="number">2</span> + <span class="number">2</span> : <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 答案：2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? (<span class="string">'10'</span> &gt; <span class="number">9</span> ? <span class="number">1</span> : <span class="number">0</span>) : <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 答案：2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? (<span class="string">'10'</span> &gt; <span class="string">'9'</span> ? <span class="number">1</span> : <span class="number">0</span>) : <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 答案：0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析：因为 '10' &gt; '9' 比的是 ASCII 码，一位位比，10（一零）小于 9 ，先用 1 和 9 比，在 ASCII 码里面 1 小于 9；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当“10” &gt;  9 字符串和数字比，会先转换成数字再比较</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 可利用三木运算符简化克隆代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'yu'</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    card : [<span class="string">'visa'</span>,<span class="string">'master'</span>],</span><br><span class="line">    wife : &#123;</span><br><span class="line">        name : <span class="string">'Long'</span>,</span><br><span class="line">        age : <span class="number">18</span>,</span><br><span class="line">        son : &#123;</span><br><span class="line">            lastName : <span class="string">'YU'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;,</span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        arrStr = <span class="string">'[Object Array]'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="keyword">if</span>(origin[prop] !== <span class="string">'null'</span> &amp;&amp; <span class="keyword">typeof</span>(origin[prop]) == <span class="string">'object'</span>)&#123;</span><br><span class="line">                target[prop] = (toStr.call(origin[prop]) == arrStr) ? [] : &#123;&#125;;</span><br><span class="line">                deepClone(target[prop],origin[prop]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                target[prop] = origin[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">deepClone(obj,obj1);</span><br></pre></td></tr></table></figure><h1 id="数组-预习"><a href="#数组-预习" class="headerlink" title="(数组)预习"></a>(数组)预习</h1><p><code>定义对象方式：自变量，构造函数，自定义的构造函数，Object.create</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">定义数组的方式：</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> <span class="keyword">var</span> arr = [];   数组自变量（自定义）；</span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();  系统提供</span><br><span class="line"></span><br><span class="line">    两者区别就只一位数的情况</span><br><span class="line"></span><br><span class="line">    数组能用的方法来源于 <span class="built_in">Array</span>.prototype</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">如果写出 <span class="keyword">var</span> arr = [<span class="number">1</span>,,<span class="number">1</span>],出来就是 <span class="number">1</span>,<span class="literal">undefined</span>*<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">数组不是每一位都有值，稀疏数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);和自定义数组显示效果一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统提供的数组和自定义的数组有一点不同，如下</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">长度为<span class="number">10</span>的稀疏数组，括号里面只有一位数，就代表着长度，并且里面每一位都没有值，<span class="built_in">console</span> 里面会是 <span class="literal">undefined</span> * <span class="number">10</span>。并且里面不能写小数，会报错。</span><br></pre></td></tr></table></figure><p><code>数组的读和写，基本上没有报错的情况，除非是引用了没有的方法</code></p><p><code>js数组是基于对象的，数组是一种特殊的对象</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  arr[<span class="number">10</span>] = <span class="string">'abc'</span></span><br><span class="line">&lt;  <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">&gt;  arr</span><br><span class="line">&lt;  [<span class="literal">undefined</span> * <span class="number">10</span>,<span class="string">'abc'</span>]</span><br><span class="line"></span><br><span class="line">&gt;  arr.length</span><br><span class="line">&lt;  <span class="number">11</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一、数组的定义（来源于-Array-prototype）"><a href="#一、数组的定义（来源于-Array-prototype）" class="headerlink" title="一、数组的定义（来源于 Array.prototype）"></a>一、数组的定义（来源于 Array.prototype）</h2><p><code>1）系统提供 new Array(length / content) var arr = new Array(1,2,3,4,5)</code></p><p><code>2）自变量 var arr = [1,2,3,4,5];</code></p><h2 id="二、数组的-‘读’-和-‘写’"><a href="#二、数组的-‘读’-和-‘写’" class="headerlink" title="二、数组的 ‘读’ 和 ‘写’"></a>二、数组的 ‘读’ 和 ‘写’</h2><p><code>arr[num] // 不可以溢出读，结果 undefiend</code></p><p><code>arr[num] = XXX; // 不可以溢出读</code></p><p><code>arr[num] = xxx; // 可以溢出读</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">es3<span class="number">.0</span> 最标准最基础</span><br><span class="line"></span><br><span class="line">es5<span class="number">.0</span>  es6<span class="number">.0</span>，最新的 es7<span class="number">.0</span>还没有普及，今天讲的都是 es3<span class="number">.0</span></span><br><span class="line"></span><br><span class="line">对象的定义方式</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 自变量</span><br><span class="line"><span class="number">2</span> 构造函数</span><br><span class="line"><span class="number">3</span> 自定义构造函数</span><br><span class="line"><span class="number">4</span> object.create 数组是一种特殊的对象，在本质上两者没有太大的区别</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">可以写 <span class="keyword">var</span> arr = [,]    <span class="comment">// 稀松数组，相当于定义了两个位置，console(控制台 结果是 undefiend)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,,,,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 答案[1, 2, undefiend * 3, 3, 4]</span></span><br><span class="line">    <span class="comment">//     arr.length = 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = []; 和 <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); 唯一的区别实在 <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); 只传了一个参数的情况下，会被当成长度，并且成为一个稀松数组</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// [undefined * 10]</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>]; <span class="comment">// [10]</span></span><br><span class="line"></span><br><span class="line">    如果传进去一个小数，就非法：<span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10.2</span>); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="comment">// &gt;  arr[10]</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr[10] = 'abc'</span></span><br><span class="line">    <span class="comment">// &lt;· 'abc'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [undefined * 10, 'abc']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.length</span></span><br><span class="line">    <span class="comment">// &lt;· 11</span></span><br></pre></td></tr></table></figure><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><h3 id="一、改变原数组（在原来数组基础上去改变）"><a href="#一、改变原数组（在原来数组基础上去改变）" class="headerlink" title="一、改变原数组（在原来数组基础上去改变）"></a>一、改变原数组（在原来数组基础上去改变）</h3><p><code>1）reverse，sort，push，pop，unshift，shift</code></p><p><code>2）splice</code></p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`push`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`push 在数组的最后一位添加数据，可以添加一个，也可以添加很多个`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.push(10)</span></span><br><span class="line">    <span class="comment">// &lt;· 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [10]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.push(11)</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [10,11]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.push(9)</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [10,11,9]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.push(1,2,3,4,5,6,7)</span></span><br><span class="line">    <span class="comment">// &lt;· 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="comment">// 说明能重写</span></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'haha'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.push()</span></span><br><span class="line">    <span class="comment">// &lt;· 'haha'</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：数组有三位，想在数组的最后一位添加东西</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; 如果在第四位加东西写成 arr = [<span class="number">3</span>]  <span class="comment">// length - 1 位添加东西</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">this</span>[<span class="keyword">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.push(4,5,6)</span></span><br><span class="line">    <span class="comment">// &lt;· 6</span></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="string">`Array.prototype.push = function()&#123;&#125;    不能写形参`</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`pop`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`pop 是剪切方法（把最后一位数剪切出去）。在 pop() 括号里面不能传参，写了会忽略`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.pop()</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.pop()</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  var num = arr.pop()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.pop(2)</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2]</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`unshift`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`unshift 是从第一位加东西`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.unshift(0)</span></span><br><span class="line">    <span class="comment">// &lt;· 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [0,1,2,3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.unshift(-1,0)</span></span><br><span class="line">    <span class="comment">// &lt;· 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [-1,0,1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`shift`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`shift 是从第一位减东西`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.shife()</span></span><br><span class="line">    <span class="comment">// &lt;· 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：数组不能从 <span class="number">-1</span> 位插入东西</span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr[-1] = 0</span></span><br><span class="line">    <span class="comment">// &lt;· 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3]</span></span><br><span class="line">    <span class="comment">// 可以用两个数组拼接成一个数组的方式添加东西</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`reverse`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`reverse 逆反`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.reverse()</span></span><br><span class="line">    <span class="comment">// &lt;· [3,2,1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.reverse()</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`splice`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`splice 一种剪切，切片`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`arr.splice(从第几位开始，截取多少长度，传参在切口处添加新的数据)`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line">    arr.splice(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//从第 1 位开始截取 2 位，传参可以不填</span></span><br><span class="line">    <span class="comment">// 截取的是[1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(1,2)</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(0,3)</span></span><br><span class="line">    <span class="comment">// &lt;· [1,1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3,3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(1,1,0,0,0)</span></span><br><span class="line">    <span class="comment">// &lt;· [1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(0.3)</span></span><br><span class="line">    <span class="comment">// &lt;· [1,0,0,0,2,2,3,3]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//意思是从第 1 位起截取 1 位，然后加上0，0，0这三个数</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];   <span class="comment">//1是第0位，2是第1位, 3是第2位，5是第3位</span></span><br><span class="line">    arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 答案：[1,2,3,4,5];</span></span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    arr.splice(<span class="number">-1</span>,<span class="number">1</span>);   <span class="comment">// 这里的 -1 是倒数第一位，数组一般的方法都可以带负数</span></span><br><span class="line">    <span class="comment">// 答案：[1,2,3];</span></span><br><span class="line"></span><br><span class="line">例<span class="number">5</span>：下面是系统内部解决附属问题的兼容</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    splice = <span class="function"><span class="keyword">function</span> (<span class="params">pos</span>)</span>&#123;</span><br><span class="line">        pos += pos &gt; <span class="number">0</span> ? <span class="number">0</span> : <span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -1 + 4 = 3</span></span><br><span class="line"></span><br><span class="line">例<span class="number">6</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.length,</span><br><span class="line">        j = +i + (i &lt; <span class="number">0</span> ? len : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(j &gt;= &amp;&amp; j &lt; len ? [<span class="keyword">this</span> [j] ]d : [])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// splice = function (pos)&#123;</span></span><br><span class="line">        <span class="comment">// pos += pos &gt; 0 ? 0 : this.length;</span></span><br><span class="line">        pos &gt;= <span class="number">0</span> || pos &lt;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`sort`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`sort 给数组排序，（按照从小到大），改变原数组`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sotr()</span></span><br><span class="line">    <span class="comment">// &lt;· [-1,0,1,3,4,9]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在sort后面加 reversve 就是降序</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sotr().reverse()</span></span><br><span class="line">    <span class="comment">// &lt;· [9,4,3,1,0,-1]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：下面这个按照 ASCII 码排序的</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sotr()</span></span><br><span class="line">    <span class="comment">// &lt;· [-1,10,3,4,5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">`所以给我们留了一个接口，如下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 必须写两形参</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 看返回值 return</span></span><br><span class="line"><span class="string">    1）当返回值为负数时，那么前面的数放在前面，</span></span><br><span class="line"><span class="string">    2）当返回值为正数时，那么后面的数在前，</span></span><br><span class="line"><span class="string">    3）为0，不动</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;    <span class="comment">//此处的 1代表返回正的 return -1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>    <span class="comment">//此处的-1 代表返回负的</span></span><br><span class="line"></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">思维方式:上面就控制了升序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个函数第一次调动时，会把数组的第一位和第二位传进来，也就是 a=1，b=3，然 后通过规则比较，当你把返回值返回为正，为负，为 0。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">传参的顺序（但是这个顺序是位置的顺序，不是按数字比），第一次是1,3，第二次 1,5,第三次1,4,第四次 1,10，第五次 3,5,第六次3,4,第七次 3,10，第八次 5,4，第九次 5,10，第十次 4,10；依次传参（符合冒号排序的算法）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">是以换位置的方式改变顺序</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：<span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">4</span>];   <span class="comment">// 到 13 这一位的时候，换位置变成了[2,4,19,13]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：下面变成了降序</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：</span><br><span class="line">    <span class="string">`升序简化版`</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a - b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="string">`再简化版`</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">`升序 return a - b`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`降序 return b - a`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">5</span>：直接调用 arr.sort() 比的是 ASCII 码，要在里面填函数才可以</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">4</span>,,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// return a - b; 升序</span></span><br><span class="line">        <span class="comment">// return b - a; 降序</span></span><br><span class="line">        <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [20,13,10,9,8,4,2];</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sort(function()&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line">例<span class="number">6</span>：给一个有序的数组，让它乱序，当我们没规律可以遵循的时候，返回时是随机的</span><br><span class="line">    <span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Math.random() 回生成一个 0 到 1 （包括 0，但是不包括 1）的随机数</span></span><br><span class="line"></span><br><span class="line">例<span class="number">7</span>：给以下按照年龄排序</span><br><span class="line">    <span class="keyword">var</span> cheng = &#123;</span><br><span class="line">        name : <span class="string">'cheng'</span>,</span><br><span class="line">        age : <span class="number">18</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">        face : <span class="string">'handsome'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        name : <span class="string">'deng'</span>,</span><br><span class="line">        age : <span class="number">40</span>,</span><br><span class="line">        sex : <span class="literal">undefined</span>,</span><br><span class="line">        face : <span class="string">'amazing'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> zhang = &#123;</span><br><span class="line">        name : <span class="string">'zhang'</span>,</span><br><span class="line">        age : <span class="number">20</span>,</span><br><span class="line">        sex : <span class="string">'male'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [cheng,deng,zhang];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.age &gt; b.age)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 简化</span></span><br><span class="line">    <span class="keyword">var</span> arr = [cheng,deng,zhang];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.age - b.age;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">例<span class="number">7</span>：按照字符串长度排序</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'ab'</span>,<span class="string">'abcde'</span>,<span class="string">'abcd'</span>,<span class="string">'abcdefg'</span>,,<span class="string">'abcdef'</span><span class="string">'abc'</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.length - b.length;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">例<span class="number">8</span>：按照字节长度排序</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">retBytes</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = str.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.chatCode(i) &gt; <span class="number">255</span>)&#123;</span><br><span class="line">                num ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'ac'</span>,<span class="string">'alkdjf于lkajsd'</span>,<span class="string">'aksd泽jfk'</span>,<span class="string">'iuwe龙oiru'</span>,<span class="string">'dddd'</span>,<span class="string">'aaa'</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> retBytes(a) - retBytes(b);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="二、不改变原数组"><a href="#二、不改变原数组" class="headerlink" title="二、不改变原数组"></a>二、不改变原数组</h3><p><code>1）forEach，filter，map，reduce，reduceRight</code></p><p><code>2）slice，concat，join ————&gt; split，toString</code></p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`concat`</span><span class="string">`concat 连接，把后面的数组拼接到前面，并成立一个新的数组，不影响之前的两个数组，不能改变原数组`</span>;</span><br><span class="line"></span><br><span class="line">例: <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 console 操作：</span></span><br><span class="line"><span class="comment">// &gt;  arr.concat(arr1)</span></span><br><span class="line"><span class="comment">// &lt;· [1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  arr</span></span><br><span class="line"><span class="comment">// &lt;· [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  arr1</span></span><br><span class="line"><span class="comment">// &lt;· [7,8,9]</span></span><br></pre></td></tr></table></figure><h4 id="toString"><a href="#toString" class="headerlink" title="`toString"></a>`toString</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`toString`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`toString 是把数组当作字符串展示出来`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '1,2,3,4,5,6'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`slice`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`slice 从该位开始截取，截取到该位，并不改变原数组，这里也可以写负数`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// slice(从改位开始截取，截取到该位)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.slice(1,2)</span></span><br><span class="line">    <span class="comment">// &lt;· [2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line">    <span class="string">`slice 并不改变原数组，slice完了以后需要有东西接受，不然没有意义`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// slice(从改位开始截取，截取到该位)</span></span><br><span class="line">    <span class="keyword">var</span> newArr = arr.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  newArr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3]</span></span><br><span class="line"><span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  newArr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3]</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">slice 里面可以填 0 个参数，也可以填 1 个参数，也可以填两个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 如果填两个参数，slice（从该位开始截取，截取到该位）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   如：arr.slice(1,2)，从第一位开始截取，截取到第二位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 如果填一个参数，从第几位开始截取，一直截取到最后。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    如：arr.slice(1)，从第 1 位开始截取，截取到最后一位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 不写参数就是整个截取数组（把类数组转换成数组的时候经常用）`</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`join`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`join 括号里面需要用字符串形式（标准语法规定），就会用加的东西连接起来数组`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.join('-')</span></span><br><span class="line">    <span class="comment">// &lt;· [1-2-3-4-5-6]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.join('!')</span></span><br><span class="line">    <span class="comment">// &lt;· [1!2!3!4!5!6]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.join('~')</span></span><br><span class="line">    <span class="comment">// &lt;· [1~2~3~4~5~6]</span></span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`split`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`split() 是string字符串方法 是 join() 方法的可逆方法，join方法是输入什么连接什么，split是输入什么拆分什么`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">var</span> str = arr.join(<span class="string">'-'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  str.split('4')</span></span><br><span class="line">    <span class="comment">// &lt;· ['1-2-3-' , '-5-6']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  str</span></span><br><span class="line">    <span class="comment">// &lt;· '1-2-3-4-5-6'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  str.split('-')</span></span><br><span class="line">    <span class="comment">// &lt;· ['1','2','3','4','5','6']</span></span><br><span class="line"></span><br><span class="line"><span class="string">`split 按照什么拆分为数组。用什么拆，什么就没了，按 - 拆就去掉了，按 4 拆就去掉了4.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">split 可以返回数组，数组可以返回字符串`</span></span><br><span class="line"></span><br><span class="line">把下面啊字符串拼到一起</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'alibaba'</span>;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">'baidu'</span>;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">'tencent'</span>;</span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">'toutiao'</span>;</span><br><span class="line">    <span class="keyword">var</span> str4 = <span class="string">'wangyi'</span>;</span><br><span class="line">    <span class="keyword">var</span> str5 = <span class="string">'xiaowang'</span>;</span><br><span class="line">    <span class="keyword">var</span> str6 = <span class="string">'nv'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种写法不好，字符串是在栈内存里面的，先进后出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str Final = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [str,str1,str2.str3,str4];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length; i ++)&#123;</span><br><span class="line">        strFinal += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用下面这种方式更好，join 里面不传参默认用逗号连接，传空串如下图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 散列</span></span><br><span class="line">    <span class="keyword">var</span> arr = [str,str1,str2,str3,str4,str5,str6];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join(<span class="string">''</span>));</span><br></pre></td></tr></table></figure><h4 id="forEach-–-循环遍历数组"><a href="#forEach-–-循环遍历数组" class="headerlink" title="forEach() – 循环遍历数组"></a>forEach() – 循环遍历数组</h4><p><code>forEach(function(ele,index,array){}) -- 循环遍历数组</code></p><p><strong>参数：</strong></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王港'</span>, <span class="attr">src</span>:<span class="string">'./img/3.png'</span>,<span class="attr">des</span>:<span class="string">'颈椎不好'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘莹'</span>, <span class="attr">src</span>:<span class="string">'./img/5.png'</span>,<span class="attr">des</span>:<span class="string">'我是谁'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王秀莹'</span>, <span class="attr">src</span>:<span class="string">'./img/4.png'</span>,<span class="attr">des</span>:<span class="string">'我很好看'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘金雷'</span>, <span class="attr">src</span>:<span class="string">'./img/1.png'</span>,<span class="attr">des</span>:<span class="string">'陌生的脸'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘飞翔'</span>, <span class="attr">src</span>:<span class="string">'./img/2.png'</span>,<span class="attr">des</span>:<span class="string">'六六六'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">personArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index,array</span>)</span>&#123;</span><br><span class="line"><span class="comment">// ele : 循环遍历的每一个元素对象</span></span><br><span class="line"><span class="comment">// index : 相当于for循环的那个 i，代表索引，遍历第一遍：0，第二遍：1</span></span><br><span class="line"><span class="comment">// array : 相当于this，就是调用的是那个数组，一般用不到</span></span><br><span class="line">    <span class="built_in">console</span>.log(ele); <span class="comment">// 打印出循环遍历的每一位</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">forEach的源码剖析：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myForEach(func)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.length;i ++)&#123;</span><br><span class="line">        func(<span class="keyword">this</span>[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// break不能使用，因为break在源码中不是写到for循环里面，而是写到了func函数里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return不能使用，因为return的话，就只是在return的那个遍历的对象不执行了，直接跳到下一个遍历对象执行</span></span><br></pre></td></tr></table></figure><h4 id="filter-–-筛选元素"><a href="#filter-–-筛选元素" class="headerlink" title="filter – 筛选元素"></a>filter – 筛选元素</h4><p><code>fliter 筛选，和 forEach 一样会遍历循环，也有三个参数，不过筛选出来的值由 return 来决定</code></p><p><code>filter 循环遍历筛选，返回判断是 true 的值，然后return出来，false，丢掉</code></p><p><code>filter(function(ele,index,array){}) -- 循环遍历筛选数组</code></p><p><strong>参数：</strong></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p><blockquote><p>意思是现在循环遍历的数组，如果循环遍历的返回值是true的话，就留下,如果说 返回如果循环遍历的返回值是false的话，就不要了。并且把所有返回true的数组（元素）放到到一个新的数组里面，所以说 filter 会有返回一个结果，这个结果就是 filter 筛选出来的元素组合成的一个新的数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王港'</span>, <span class="attr">src</span>:<span class="string">'./img/3.png'</span>,<span class="attr">des</span>:<span class="string">'颈椎不好'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘莹'</span>, <span class="attr">src</span>:<span class="string">'./img/5.png'</span>,<span class="attr">des</span>:<span class="string">'我是谁'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王秀莹'</span>, <span class="attr">src</span>:<span class="string">'./img/4.png'</span>,<span class="attr">des</span>:<span class="string">'我很好看'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘金雷'</span>, <span class="attr">src</span>:<span class="string">'./img/1.png'</span>,<span class="attr">des</span>:<span class="string">'陌生的脸'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘飞翔'</span>, <span class="attr">src</span>:<span class="string">'./img/2.png'</span>,<span class="attr">des</span>:<span class="string">'六六六'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = personArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line"><span class="comment">// ele : 循环遍历的每一个元素对象</span></span><br><span class="line"><span class="comment">// index : 相当于for循环的那个 i，代表索引，遍历第一遍：0，第二遍：1</span></span><br><span class="line"><span class="comment">// array : 相当于this，就是调用的是那个数组，一般用不到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 这个返回的可以是任何东西，只要转换完成之后不是 空 就可以。</span></span><br><span class="line">    <span class="comment">// 意思是现在循环遍历的数组，如果循环遍历的返回值是true的话，就留下</span></span><br><span class="line">    <span class="comment">// 如果说 返回如果循环遍历的返回值是false的话，就不要了。</span></span><br><span class="line">    <span class="comment">// 并且把所有返回true的数组（元素）放到到一个新的数组里面</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 打印筛选的元素组成的新数组</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">判断<span class="literal">false</span>和<span class="literal">true</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王港'</span>, <span class="attr">src</span>:<span class="string">'./img/3.png'</span>,<span class="attr">des</span>:<span class="string">'颈椎不好'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘莹'</span>, <span class="attr">src</span>:<span class="string">'./img/5.png'</span>,<span class="attr">des</span>:<span class="string">'我是谁'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王秀莹'</span>, <span class="attr">src</span>:<span class="string">'./img/4.png'</span>,<span class="attr">des</span>:<span class="string">'我很好看'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘金雷'</span>, <span class="attr">src</span>:<span class="string">'./img/1.png'</span>,<span class="attr">des</span>:<span class="string">'陌生的脸'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘飞翔'</span>, <span class="attr">src</span>:<span class="string">'./img/2.png'</span>,<span class="attr">des</span>:<span class="string">'六六六'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = personArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ele.sex == <span class="string">'f'</span>)&#123; <span class="comment">// 可以来判断true和false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [&#123;…&#125;, &#123;…&#125;]，两个女生</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filter源码剖析：</span><br><span class="line"><span class="built_in">Array</span>.prototype.myfilter = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.length;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(func(<span class="keyword">this</span>[i],i))&#123;</span><br><span class="line">            arr.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map-–-循环遍历数组，返回-true-的结果"><a href="#map-–-循环遍历数组，返回-true-的结果" class="headerlink" title="map – 循环遍历数组，返回 true 的结果"></a>map – 循环遍历数组，返回 true 的结果</h4><p><code>map 直接由 return 返回出来的值来返回，把当前 return 返回的值放到新的数组当中</code></p><p><code>map 返回结果，和 forEach和filter 一样会遍历循环，也有三个参数，功能也一样，不过筛选出来的值由 return 返回出来的结果来决定，就是 return 每一次返回的值是什么，就返回什么每一次的结果</code></p><p><code>map(function(ele,index,array){}) -- 循环遍历筛选数组</code></p><p><strong>参数：</strong></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王港'</span>, <span class="attr">src</span>:<span class="string">'./img/3.png'</span>,<span class="attr">des</span>:<span class="string">'颈椎不好'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘莹'</span>, <span class="attr">src</span>:<span class="string">'./img/5.png'</span>,<span class="attr">des</span>:<span class="string">'我是谁'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王秀莹'</span>, <span class="attr">src</span>:<span class="string">'./img/4.png'</span>,<span class="attr">des</span>:<span class="string">'我很好看'</span>,<span class="attr">sex</span>:<span class="string">'f'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘金雷'</span>, <span class="attr">src</span>:<span class="string">'./img/1.png'</span>,<span class="attr">des</span>:<span class="string">'陌生的脸'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'刘飞翔'</span>, <span class="attr">src</span>:<span class="string">'./img/2.png'</span>,<span class="attr">des</span>:<span class="string">'六六六'</span>,<span class="attr">sex</span>:<span class="string">'m'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 给男生加上一个 girF = true，给女生加一个boyF = true;</span></span><br><span class="line"><span class="keyword">var</span> newArr = personArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ele.sex == <span class="string">'m'</span>)&#123;</span><br><span class="line">        ele.girlF = <span class="string">'true'</span>;</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ele.boyF = <span class="string">'true'</span>;</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//(5) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]，五个对象</span></span><br><span class="line"><span class="comment">// newArr 和 personArr 的对象来自通过一个地址，你改我也改</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`map的源码剖析，浅拷贝`</span>：</span><br><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.length;i ++)&#123;</span><br><span class="line">        arr.push(func(<span class="keyword">this</span>[i],i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`map的源码剖析，深度拷贝（配合深度克隆来解决）`</span>：</span><br><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>[i] &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>[i] == <span class="string">'object'</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> newObj = &#123;&#125;;</span><br><span class="line">            deepClone(ownObj,<span class="keyword">this</span>[i]);</span><br><span class="line">            arr.push(func(newObj,i));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push(func(<span class="keyword">this</span>[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`深度拷贝（深度克隆）`</span>：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target, origin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prop,</span><br><span class="line">        src,</span><br><span class="line">        copy;</span><br><span class="line">    <span class="keyword">if</span> (target !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">            src = target[prop];</span><br><span class="line">            copy = origin[prop];</span><br><span class="line">            <span class="keyword">if</span> (copy &amp;&amp; <span class="keyword">typeof</span> copy == <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(copy) == <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">                    src = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    src = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                target[prop] = deepClone(src, copy);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                target[prop] = copy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'aimee'</span>,</span><br><span class="line">    hobby: &#123;</span><br><span class="line">        sing: <span class="string">'good'</span>,</span><br><span class="line">        dance: <span class="string">'well'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">deepClone(obj1, obj2);</span><br><span class="line"><span class="comment">// 这是一个深拷贝的过程，谁改变自己里面的东西，都和另一个对象没有关系</span></span><br></pre></td></tr></table></figure><h4 id="reduce-–-累加器（从左向右执行）"><a href="#reduce-–-累加器（从左向右执行）" class="headerlink" title="reduce – 累加器（从左向右执行）"></a>reduce – 累加器（从左向右执行）</h4><p><code>reduce 从左向右循环遍历数组，累加器（就是把之前遍历的数组），取出来的值只有一个。效率及其高</code></p><p><code>该方法应用一个函数是&quot;累加器&quot;，并处理列表的每个值（从左到右），以便将其减少到单个值。</code></p><p><code>reduce 返回结果，一样会遍历循环，有四个参数，它是会等全部循环遍历完成之后，然后在取那个 return 的值，意思就是取最后return出来的那个结果</code></p><p><strong>参数：</strong></p><p><strong>preValue</strong> : 代表上一次回调函数调用返回的值 <code>（第 1 个参数）</code></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 3 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 4 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue);</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;,<span class="number">10</span>) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">累加器:</span><br><span class="line"><span class="comment">// 为什么说要用 reduce 做累加器呢，因为效率比for循环高</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + ele;</span><br><span class="line">&#125;) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">reduce 源码剖析：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">func, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = init,</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (init == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        previous = <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k; k &lt; <span class="keyword">this</span>.length; k++) &#123;</span><br><span class="line">        previous = func(previous, <span class="keyword">this</span>[k], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reduceRight-累加器（从右向左）"><a href="#reduceRight-累加器（从右向左）" class="headerlink" title="reduceRight 累加器（从右向左）"></a>reduceRight 累加器（从右向左）</h4><p><code>reduce 从右向左循环遍历数组，累加器（就是把之前遍历的数组），取出来的值只有一个。效率及其高</code></p><p><code>该方法应用一个函数是&quot;累加器&quot;，并处理列表的每个值（从左到右），以便将其减少到单个值。</code></p><p><code>reduceRight 返回结果，一样会遍历循环，有四个参数，它是会等全部循环遍历完成之后，然后在取那个 return 的值，意思就是取最后return出来的那个结果</code></p><p><strong>参数：</strong></p><p><strong>preValue</strong> : 代表上一次回调函数调用返回的值 <code>（第 1 个参数）</code></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 3 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 4 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue);</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;,<span class="number">10</span>) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">累加器:</span><br><span class="line"><span class="comment">// 为什么说要用 reduce 做累加器呢，因为效率比for循环高</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + ele;</span><br><span class="line">&#125;) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">reduce 源码剖析：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">func, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = init,</span><br><span class="line">        k = <span class="keyword">this</span>.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (init == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        previous = <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line">        k = <span class="keyword">this</span>.length - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k; k &gt; <span class="keyword">this</span>.length; k --) &#123;</span><br><span class="line">        previous = func(previous, <span class="keyword">this</span>[k], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p><code>1. 可以利用属性名模拟数组的特性</code></p><p><code>2. 可以动态的增长 length 属性</code></p><p><code>3. 如果强行让类数组调用 push 方法，则会根据 length 属性值的位置进行属性的扩充</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">这个看着像数组，但是数组有的方法，他全部都没有，所以他是类数组</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        foncole.log(<span class="built_in">arguments</span>);</span><br><span class="line">        argumetns.push(<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  [1,2,3,5,6,7]</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br><span class="line"></span><br><span class="line"><span class="string">`类数组长得很像数组，但是没有数组所拥有的方法`</span>。</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">'0'</span> = <span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'1'</span> = <span class="string">'b'</span>,</span><br><span class="line">        <span class="string">'2'</span> = <span class="string">'c'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj[0]</span></span><br><span class="line">    <span class="comment">// &lt;· 'a'</span></span><br><span class="line">    <span class="comment">// &gt;  obj[0]</span></span><br><span class="line">    <span class="comment">// &lt;· 'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`下面就是类数组的基本形态`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">'0'</span> : <span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'1'</span> : <span class="string">'b'</span>,</span><br><span class="line">        <span class="string">'2'</span> : <span class="string">'c'</span></span><br><span class="line">        <span class="string">'length'</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="string">'push'</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj.length('d')</span></span><br><span class="line">    <span class="comment">// &lt;· 4</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;0:'a',1:'b',2:'c',3:'d',length:4&#125;</span></span><br><span class="line"><span class="comment">// 分析：在控制台 push('d') 以后，obj的object多了一个 3 : d,长度也变成了 4</span></span><br><span class="line"></span><br><span class="line"><span class="string">`类数组：属性要为索引（数字）属性，必须要有 length 属性，最好加上 push 方法。`</span></span><br><span class="line"></span><br><span class="line">如果给一个对象加上 splice 方法，那么这个对象就长得像数组了。但是他仍探视对象，但是可以当作数组来用，需要自己添方法。</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">'0'</span> : <span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'1'</span> : <span class="string">'b'</span>,</span><br><span class="line">        <span class="string">'2'</span> : <span class="string">'c'</span>,</span><br><span class="line">        <span class="string">'length'</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="string">'push'</span> : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        <span class="string">'splice'</span> : <span class="built_in">Array</span>.prototype.splice <span class="comment">// 可以把类数组变成数字</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        thsi[thsi.length] = target;</span><br><span class="line">        <span class="keyword">this</span>.length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">`如果对象 obj 调用这个方法，那么 this 变成了 obj`</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        obj[obj.length] = target;</span><br><span class="line">        obj.length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">阿里巴巴题目，问这个 obj 长什么样子？</span><br><span class="line">    bar obj = &#123;</span><br><span class="line">        <span class="string">'2'</span> : <span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'3'</span> : <span class="string">'b'</span>,</span><br><span class="line">        <span class="string">'length'</span> : <span class="number">2</span>，</span><br><span class="line">        <span class="string">'push'</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">    &#125;</span><br><span class="line">    obj.push(<span class="string">'c'</span>);</span><br><span class="line">    obj.push(<span class="string">'d'</span>);</span><br><span class="line">    <span class="comment">// 答案：</span></span><br><span class="line">    <span class="comment">// obj</span></span><br><span class="line">    <span class="built_in">Object</span>&#123;<span class="number">2</span>:<span class="string">'c'</span>,<span class="number">3</span>:<span class="string">'d'</span>,<span class="attr">length</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`关键点在 length 上面，根据 length 改变而改变，走一下length，既：`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">taret</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[obj.length] = target;</span><br><span class="line">    <span class="keyword">this</span>.length ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">'1'</span> : <span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'2'</span> : <span class="string">'c'</span>,</span><br><span class="line">        <span class="string">'3'</span> : <span class="string">'d'</span>,</span><br><span class="line">        <span class="string">'length'</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="string">'push'</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">    &#125;</span><br><span class="line">    obj.push(<span class="string">'b'</span>);</span><br><span class="line">    <span class="comment">// 答案：“ 1”：“a”，“2”：“ c”，“ 3”：“b”，“ length”： 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">'0'</span> : <span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'1'</span> : <span class="string">'b'</span>,</span><br><span class="line">        <span class="string">'2'</span> : <span class="string">'c'</span>,</span><br><span class="line">        name : <span class="string">'abc'</span>,</span><br><span class="line">        age : <span class="number">123</span>,</span><br><span class="line">        length : <span class="number">3</span>,</span><br><span class="line">        push : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        splice : <span class="built_in">Array</span>.prototype.splice</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从 console 输出:</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· ['a','b','c']</span></span><br><span class="line">    <span class="comment">// &gt;  obj.name</span></span><br><span class="line">    <span class="comment">// &lt;· 'abc'</span></span><br><span class="line">    <span class="comment">// &gt;  obj.age</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &gt;  obj.length</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line">    <span class="comment">// &gt;  for(var prop in obj)&#123;console.log(obj[prop])&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· a</span></span><br><span class="line">    <span class="comment">// &lt;· b</span></span><br><span class="line">    <span class="comment">// &lt;· c</span></span><br><span class="line">    <span class="comment">// &lt;· abc</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line">    <span class="comment">// &lt;· function push()&#123;[native code]&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· function splice()&#123;[native code]&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><h2 id="作业，练习"><a href="#作业，练习" class="headerlink" title="作业，练习"></a>作业，练习</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 封装 type 方法达到下面的效果</span><br><span class="line">    <span class="comment">// 封装 type</span></span><br><span class="line">    <span class="keyword">typeof</span>([]) -- array</span><br><span class="line">    <span class="keyword">typeof</span>(&#123;&#125;) -- object</span><br><span class="line">    <span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span>) -- <span class="title">object</span></span></span><br><span class="line"><span class="function">    <span class="title">typeof</span>(<span class="params">new Number(</span>)) -- <span class="title">number</span> <span class="title">Object</span></span></span><br><span class="line"><span class="function">    <span class="title">typeof</span>(<span class="params"><span class="number">123</span></span>) -- <span class="title">number</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">console</span> 输出</span></span><br><span class="line"><span class="function">    // &gt;  <span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">toString</span>.<span class="title">call</span>(<span class="params">new Number(<span class="number">123</span></span>))</span></span><br><span class="line">    // &lt;· '[object Number]'</span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.toSTring.call(123)</span></span><br><span class="line">    <span class="comment">// &lt;· '[object Number]'</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">答案:</span><br><span class="line">    <span class="number">1.</span> 封装 type （这个方法是一个工具类方法，可以存放在库里面），区分 <span class="keyword">typeof</span> 方法</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span>）先分类，原始值，引用值</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>）区分引用值，先判断是不是 <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    数组，对象，包装类（<span class="keyword">new</span> number）会返回 object，通过 <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> template = &#123;</span><br><span class="line">            <span class="string">'[object Array]'</span> : <span class="string">'array'</span>,</span><br><span class="line">            <span class="string">'[object Object]'</span> : <span class="string">'object'</span>,</span><br><span class="line">            <span class="string">'[object Number]'</span> : <span class="string">'number - object'</span>,</span><br><span class="line">            <span class="string">'[object Boolean]'</span> : <span class="string">'boolean - object'</span>,</span><br><span class="line">            <span class="string">'[object String]'</span> : <span class="string">'string - object'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span>(target) == <span class="string">'function'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'function'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span>(target) == <span class="string">'object'</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">            <span class="keyword">return</span> template(str);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span>(target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`简化之后`</span></span><br><span class="line"></span><br><span class="line"> <span class="number">2.</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> template = &#123;</span><br><span class="line">        <span class="string">'[object Array]'</span> : <span class="string">'array'</span>,</span><br><span class="line">        <span class="string">'[object Object]'</span> : <span class="string">'object'</span>,</span><br><span class="line">        <span class="string">'[object Number]'</span> : <span class="string">'number - object'</span>,</span><br><span class="line">        <span class="string">'[object Boolean]'</span> : <span class="string">'boolean - object'</span>,</span><br><span class="line">        <span class="string">'[object String]'</span> : <span class="string">'string - object'</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">typeof</span>(target))&#123;</span><br><span class="line">         <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">         <span class="keyword">return</span> template[str];</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">typeof</span>(target);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="string">`进一步简化`</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">typeof</span>(target);</span><br><span class="line">     <span class="keyword">var</span> temp = &#123;</span><br><span class="line">        <span class="string">'[object Array]'</span> : <span class="string">'array'</span>,</span><br><span class="line">        <span class="string">'[object Object]'</span> : <span class="string">'object'</span>,</span><br><span class="line">        <span class="string">'[object Number]'</span> : <span class="string">'number - object'</span>,</span><br><span class="line">        <span class="string">'[object Boolean]'</span> : <span class="string">'boolean - object'</span>,</span><br><span class="line">        <span class="string">'[object String]'</span> : <span class="string">'string - object'</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret = <span class="string">'object'</span>)&#123;</span><br><span class="line">         <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">         <span class="keyword">return</span> temolate[str];</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 数组去重</span><br><span class="line">    <span class="comment">// 数组去重</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>]</span><br><span class="line">    arr.unique() --&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">`数组去重(利用对象的特性做数组去重，去重就是去掉重复)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">思路：写一个对象，把数组的每一位当做对象的属性名。利用对象的特性（同一属性名不可以出现两次），先把第一位当作属性名添加进去，属性值随便写个，在看第一二位，如果第二位在对象里面有属性名，就看下一位，如果对象没有属性名，就把这个值添加进去当属姓名，只看对象的属性名，就去重了，这个方法叫 hash</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">答案：</span><br><span class="line">    <span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = &#123;&#125;,</span><br><span class="line">            arr = [],</span><br><span class="line">            len = <span class="keyword">this</span>.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!temp[<span class="keyword">this</span>[i]])&#123;</span><br><span class="line">                temp[<span class="keyword">this</span>[i]] = <span class="string">'abc'</span>;</span><br><span class="line">                arr.push(<span class="keyword">this</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`每一圈循环都要 this.length; 写成 var len = this.length;这样直接放值能少一些运算。 [this[i]]代表数组的第几位。 “abc”可以随便填值（要求是字符串，但是不为 false）， 但是填[this[i]]= [this[i]];在数组有 0 的时候就会有 bug。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if 里面取到值什么都不敢，取到 undefined才开始操作，所以写非！，没有值，才处理 `</span></span><br></pre></td></tr></table></figure><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><h2 id="复习包装类"><a href="#复习包装类" class="headerlink" title="复习包装类"></a>复习包装类</h2><p><code>引用值就是一种对象（泛泛的概括类对象），包括数组，函数，对象。在内存里面存储。原始值不能有属性和方法，引用之才可以有，但是经过包装类后，原始值就能有属性和方法。</code></p><p><code>通过原始值访问属性和方法，系统为了让语法好用，不报错，系统会帮我们进行一个 js 内部机制包装类</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="comment">// new String('abc').length</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line"><span class="string">`思路：即隐式的 new String构造出一个字符串对象，然后把字符串内容与原来保持一 致 new String (‘abc’)，因为我们进行了 str.length 操作，那么他也加上.length，变成 了隐式 new String (‘abc’).length。这里虽然写的是 console.log(str.length)，实际上执 行的是 console.log(new String (‘abc’).length)  这样隐式的执行过程就是包装类。`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    num.abc = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="comment">// new Number(num).abc = 'abc'; --&gt; delete</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// new Number(num).abc;</span></span><br><span class="line">    <span class="built_in">console</span>.log(num.abc);</span><br><span class="line"></span><br><span class="line"><span class="string">`答案 undefined思路：当num.abc = “abc”时，系统会进行包装类，隐式的 new Number(num).abc = “abc”；执行完这一步以后就会delet 掉这个隐式的值，并不保 留。等下一步又遇到 num.abc 时，又隐式的 new了一个 number。但是这个和上一个 是两个 new Number，是两个彼此独立的对象。`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`new.Number(123).abc 和 var num = new Number(123); num.abc 是一样的`</span></span><br></pre></td></tr></table></figure><h2 id="复习原型"><a href="#复习原型" class="headerlink" title="复习原型"></a>复习原型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`任何函数都有原型，包括构造函数，这是一个构造函数，原型需要基于构造函数，没有原型的构造函数没有意义，任何一个函数都有 prototype`</span></span><br><span class="line">    Person.prototype.lastName = <span class="string">'deng'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Pereson</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">this</span> = &#123;</span><br><span class="line">            __proto__ : Person.prototype</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="built_in">console</span>.log(person.lastName);</span><br></pre></td></tr></table></figure><h2 id="复习-creat"><a href="#复习-creat" class="headerlink" title="复习 creat"></a>复习 creat</h2><p><code>Object.creat(); 是创造的对象，对象必须要有原型，Object.creat();需要指定创建对象的原型是谁，括号里面就要填谁（所以括号里面一定要估值）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> demo = &#123;</span><br><span class="line">        lastName : <span class="string">'deng'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.creat(demo);</span><br><span class="line">    obj = &#123;</span><br><span class="line">        __proto__ : demo</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`Object.creat(prototype.definedProperty)还能填第二个参数。第一个填的 prototype 表示你的原型是谁，第二个参数 definedProperty 是特性.(可读可写都是特性)`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 中控制：</span></span><br><span class="line">    <span class="comment">// &gt;  delete num</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line">    <span class="comment">// &gt;  delete widnow.num</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line"><span class="string">`这个 nun 算是 window 的苏醒。写在全局的属性，一旦经历了 var 的操作，所得出的属性 window，这种属性叫做不可配置的属性，不可配置的属性，delete不掉。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">直接增加的属性卡叫做可配置属性，delete 只能删除可配置的属性`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    obj.num;</span><br><span class="line">    <span class="comment">// 从 console 中控制：</span></span><br><span class="line">    <span class="comment">// &gt;  delete obj.num</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">直接在控制台操作对比，发现 <span class="keyword">var</span> 过的属性是不可配置的属性,<span class="keyword">delete</span>不掉</span><br><span class="line">    <span class="comment">// 从 console 中控制：</span></span><br><span class="line">    <span class="comment">// &gt;  window.num = 123</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &gt;  delete window.num</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  window.num</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  window.num</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &gt;  delete window.num</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line">    <span class="comment">// &gt;  window.num</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br></pre></td></tr></table></figure><h2 id="复习-this-amp-call"><a href="#复习-this-amp-call" class="headerlink" title="复习 this &amp; call"></a>复习 this &amp; call</h2><p><code>1. 预编译 this --&gt; window</code></p><p><code>2. 谁调用的，this 指向谁</code></p><p><code>3. call 和 apply 能改变 this 的指向</code></p><p><code>4. 全局 this --&gt; window</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">注释掉的是预编译的过程</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test() --&gt; AO&#123;</span></span><br><span class="line">    <span class="comment">//     arguments : &#123;&#125;，</span></span><br><span class="line">    <span class="comment">//     this : window,</span></span><br><span class="line">    <span class="comment">//     num : undefined,</span></span><br><span class="line">    <span class="comment">//     a : function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">test();完全是等于 test.call();执行，其实 test() 执行会内部转换成 test.call();执行</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test.call();</span><br><span class="line">    <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line">如果我们在 test.call();里面传值，第一个值就会作为函数执行时的 <span class="keyword">this</span> 环境</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test();</span></span><br><span class="line">    test.call(&#123;<span class="attr">name</span> : <span class="string">'deng'</span>&#125;); <span class="comment">// Object&#123;name : 'deng'&#125;</span></span><br><span class="line">    <span class="comment">// test() --&gt; AO&#123;</span></span><br><span class="line">    <span class="comment">//         arguments : &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//         this : &#123;name : 'deng'&#125;,</span></span><br><span class="line">    <span class="comment">//         num : undefined,</span></span><br><span class="line">    <span class="comment">//         a : function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'obj'</span>,</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            name : <span class="string">'obj'</span>,</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.say();</span><br><span class="line">    <span class="comment">//  obj</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'obj'</span>,</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            name : <span class="string">'obj'</span>,</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.say.call(<span class="built_in">window</span>);</span><br><span class="line">    <span class="comment">//  window</span></span><br><span class="line"><span class="string">`obj.say.call(window);有 call 就打破一切规则，call() 里面传的是谁，就是谁`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        naem : <span class="string">'obj'</span>m</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun = obj.say;</span><br><span class="line">    fun(); <span class="comment">//--&gt; 只能走预编译</span></span><br><span class="line"></span><br><span class="line"><span class="string">`var fun = obj.say 先当与 var fun = say : function()&#123;&#125; 里面的函数体`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`fun(); 相当于让 say : function 在这函数在全局范围内自调用，不是谁调用的，就只能走预编译，this 就是 window`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'obj'</span>,</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun = obj.say;</span><br><span class="line">    fun.call(obj);</span><br><span class="line">    <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">想让 Person 实现 Student 的功能</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = Object.creat(Student.prototype);</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age; <span class="comment">// 简化为 Person.call(this,name,age);</span></span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'long'</span>,<span class="number">18</span>,<span class="string">'male'</span>);</span><br></pre></td></tr></table></figure><h2 id="复习闭包"><a href="#复习闭包" class="headerlink" title="复习闭包"></a>复习闭包</h2><p><code>闭包表象：一个函数套着另外一个函数，你把被嵌套的函数保存到套他的函数外面（a 套着 b，你把 b 弄出 a 里面），就形成了闭包（不一定要 return）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">下面两种都可以实现闭包</span><br><span class="line">  <span class="number">1</span>)<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)<span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        obj.fun = b;</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">// this call</span></span><br><span class="line">    go &#123;</span><br><span class="line">        a : <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">    ao &#123;</span><br><span class="line">        a : <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br></pre></td></tr></table></figure><h2 id="复习构造函数"><a href="#复习构造函数" class="headerlink" title="复习构造函数"></a>复习构造函数</h2><p><code>通过构造函数构造对象的时候用 new,我执行函数的时候就不用 new</code></p><p><code>构造对象必须是 new 加上构造函数执行（如 person();）才能构造出对象</code></p><p><code>有了 new 之后，才会发生两步隐式变化（var this = {}； return this）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = &#123;&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'abc'</span>;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">123</span>;</span><br><span class="line">        <span class="comment">// return this;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pereson = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 没有 var person = new Person(); 只 Person 会走预编译，此时 this 指向 window</span></span><br><span class="line"></span><br><span class="line">私有化属性看不到 Var money = <span class="number">100</span>; 外部看不到 <span class="keyword">var</span> money,就是闭包</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = &#123;</span></span><br><span class="line">            <span class="comment">// makeMoney : function()&#123;&#125;</span></span><br><span class="line">            <span class="comment">// offer : function()&#123;&#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">var</span> money = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.makeMoney = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            money ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.offer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            money --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return this;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">            F.prototype = Origin.prototype;</span><br><span class="line">            Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;())</span><br><span class="line">    <span class="string">`立即执行函数执行完就成下面这样了`</span></span><br><span class="line">    <span class="keyword">var</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">引用值也可以进行类型转换</span><br><span class="line"></span><br><span class="line"><span class="string">`数组不等于数组，因为里面的地址不一样`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出</span></span><br><span class="line">    &gt;  [] + <span class="string">''</span></span><br><span class="line">    &lt;· <span class="string">''</span></span><br><span class="line">    &gt;  [] + <span class="number">2</span></span><br><span class="line">    &lt;· <span class="string">'2'</span></span><br><span class="line">    &gt;  <span class="built_in">Number</span>([])</span><br><span class="line">    &lt;· <span class="number">0</span></span><br><span class="line">    &gt;  [] == []</span><br><span class="line">    &lt;· <span class="literal">false</span></span><br><span class="line">    &gt;  <span class="built_in">String</span>([]) + <span class="number">1</span></span><br><span class="line">    &lt;· <span class="string">'1'</span></span><br></pre></td></tr></table></figure><h2 id="复习克隆"><a href="#复习克隆" class="headerlink" title="复习克隆"></a>复习克隆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        naem : <span class="string">'abc'</span></span><br><span class="line">    &#125;               <span class="comment">// 浅克隆</span></span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;    <span class="comment">// 当拷贝引用值的收就不行了</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> prop)&#123;</span><br><span class="line">        obj1[prop] = obj[prop];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">`这样浅度克隆，克隆的是地址，缺点是你改我也改`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`深度克隆解决的就是引用值`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`null 和 undefined 不能和数字进行比较，不会进行类型转换，他们不作为比较值存在`</span></span><br></pre></td></tr></table></figure><h2 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">私有化变量</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a ++;</span><br><span class="line">            documents.write(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.say = sss;</span><br><span class="line">    &#125;</span><br><span class="line">    bst oPrtrdon = mre Person();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    <span class="keyword">var</span> oPerson1 = <span class="keyword">new</span> Person();</span><br><span class="line">    oPerson1.say();</span><br><span class="line">    <span class="comment">// 打印 1，2，1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> x;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 答案 1，删不掉x，该是什么是什么</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 返回 object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a());</span><br><span class="line">    <span class="comment">// error : a is not a defined</span></span><br><span class="line">    <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">选择你熟悉的一种方式实现JavaScript 对象的继承</span><br><span class="line">    <span class="comment">// 案：声明模式</span></span><br><span class="line"></span><br><span class="line">实现 object 类型的 clone()方法</span><br><span class="line">    <span class="comment">// 答案：深度克隆</span></span><br><span class="line"></span><br><span class="line">尝试优化以下代码，让代码看起来更优雅</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params">day</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(day)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Monday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Tuesday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Wednesday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Thursday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Friday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Saturday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Sunday'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">default</span>:</span><br><span class="line">                documents.wirte(<span class="string">'Error'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 答案：</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">retDate</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</span><br><span class="line">            <span class="keyword">var</span> ret = arr[date - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(ret === <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`SEO 是搜索引擎优化`</span></span><br><span class="line"></span><br><span class="line">HTML布局实现：头和尾固定，中间自适应。</span><br><span class="line"><span class="comment">// 答案：三栏布局，头尾是指左右</span></span><br><span class="line"></span><br><span class="line">在页面中增加一个 div（宽度 <span class="number">400</span>px，高度<span class="number">400</span>px，背景颜色蓝色，边框颜色红 色），该 div要求在页面中居中显示。</span><br><span class="line">简单画图描述CSS盒模型</span><br><span class="line"></span><br><span class="line">css中的选择器有哪些？</span><br><span class="line"><span class="comment">// 答案：id 选择器是 xxx，先说类型在举例</span></span><br><span class="line"></span><br><span class="line">JavaScript 中有哪些数据类型？</span><br><span class="line"><span class="comment">// 答案：原始值里面有 XXX，引用值里面有 XXXX</span></span><br><span class="line"></span><br><span class="line">什么是 rem布局？</span><br><span class="line">html 顶部的DOCTYPE 有什么作用？有什么影响？</span><br><span class="line">Display的参数值及其含义</span><br><span class="line"></span><br><span class="line">描述一下盒模型</span><br><span class="line"><span class="comment">// 答案：需要讲两种才满分</span></span><br><span class="line"></span><br><span class="line">css3可用伪类都有那些？</span><br><span class="line">position属性有哪些值，有什么区别？</span><br><span class="line">如何创建一个 div，并添加到页面里。</span><br><span class="line">写一个正则表达式，检验字符串首尾是否含有数字</span><br><span class="line">跨域请求数据的方法都有哪些？</span><br><span class="line">编写一个类和类继承，类名为Person，含有属性 name，age，含有方法$。一个 student 类，继承自Person，自由属性 score，自有方法 study</span><br><span class="line">（类指的就是构造函数）</span><br><span class="line"></span><br><span class="line"><span class="string">`一个字符串[a - z]组成，请找出该字符串第一只出现一次的字母。`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`字符串去重`</span></span><br></pre></td></tr></table></figure><h1 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h1><p><code>防止我们报错的</code></p><p><code>try花括号{里面会正常执行，但是遇到 b 报错时 b 就执行不出来，后面的代码 c 就不执行了，但是外面的代码 d 还能执行}catch(e),这个 e 是可以随便写的，写 abc 都可以，也是一个形参</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'d'</span>);</span><br><span class="line"><span class="string">`报错后，不执行后续的代码，但是依然可以执行外面的d`</span></span><br></pre></td></tr></table></figure><p><code>在 try 里面发生的错误，不会执行错误后的 try 的里面的代码</code></p><p><code>catch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'e'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'d'</span>);</span><br><span class="line"><span class="string">`如果 try里面的代码不出错，在 catch 里面的代码就不执行；`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'e'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'d'</span>);</span><br><span class="line"><span class="string">`如果 try里面的代码出错，catch 负责补抓到错误信息封装到里面（error.massage    error.name）， 错误对象只有 message 和 name。 `</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;<span class="comment">// error   error.message error.name --&gt; error</span></span><br><span class="line">        onsole.log(e.message + <span class="string">" "</span> + e.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'d'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// b is not defined ReferenceError</span></span><br><span class="line">    <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.name + <span class="string">' : '</span> + e.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'d'</span>);</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// ReferenceError : b is not defined</span></span><br><span class="line">    <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line"><span class="string">`try&#123;&#125;catch(e)finally&#123;&#125;`</span></span><br></pre></td></tr></table></figure><h1 id="Error-name-的六种值对应的信息"><a href="#Error-name-的六种值对应的信息" class="headerlink" title="Error.name 的六种值对应的信息"></a>Error.name 的六种值对应的信息</h1><p><code>Error.name : 前面是错误名称，后面是错误信息</code></p><p><code>1. EvalError : eval() 使用与定义不一致不一致（eval 是不允许被使用的）</code></p><p><code>2. RangeError : 数值越界</code></p><p><code>3. ReferenceError : 非法或不能识别的引用数值（未经声明就使用，未经定义就使用）</code></p><p><code>4. SyntaxError : 操作数类型错误</code></p><p><code>5. TypeError : 操作数类型错误</code></p><p><code>6. URIError : URI处理函数使用不当（引用地址错误）</code></p><blockquote><p>大部分都是 3 和 4 这种错误，</p></blockquote><p><code>伪代码也可以写，就比如 var 老于 = 123; 这就是伪代码</code></p><p><code>var str = avs ==&gt; ReferenceError</code></p><h1 id="es5-0-严格模式"><a href="#es5-0-严格模式" class="headerlink" title="es5.0 严格模式"></a>es5.0 严格模式</h1><p><code>（这一章就是讲 es3.0 和 es5.0产生冲突的部分）</code></p><p><code>浏览器是基于 es3.0 和 es5.0 的新增方法使用的。</code></p><p><code>如果两种发生了冲突，就用 es3.0。</code></p><p><code>es5.0 严格模式是指 es3.0 和 es5.0 产生冲突发部分就是用 es5.0，否则就用 es3.0</code></p><p><code>es5.0 严格模式的启动方式，在页面逻辑最顶端写 &#39;use strict&#39;</code></p><p><code>用法在整个页面的最顶端写 &#39;use strict&#39;,可以写在全局的最顶端，也可以写在 某函数（局部）的最顶端，推荐使用局部的</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">es5<span class="number">.0</span> 不能用 argument.callee,但是 es3<span class="number">.0</span> 可以用</span><br><span class="line">    <span class="comment">// es5.0 严格模式的启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(argumetns.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 报错：es5.0模式下不能用 callee 和 caller</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125; 里面加 <span class="string">'use strict'</span>; 是局部启动严格模式</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">        'use strict'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// function demo()&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(arguments.callee)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>&#39;use strict&#39;</code></p><blockquote><p>不在兼容 es3.0 的一些不规则语法。使用全新的 es5.0 规范。两种用法：</p></blockquote><p><code>一、全局严格模式</code></p><p><code>局部函数内严格模式（推荐）</code></p><p><code>就是一行字符串，不会对不兼容严格模式的浏览器产生影响。</code></p><p><code>不支持 with，argumetns.callee，function.caller，变量赋值前必须声明，局部 this 必须被赋值（Perosn.call(null/unfined)) 赋值什么就是什么，拒绝重复属性和参数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line">浏览器升级到 es5<span class="number">.0</span> 才好用</span><br><span class="line">写成 strice();就有风险</span><br><span class="line">写成 <span class="string">'use strict'</span>; 就有一个向后兼容的作用</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">es5<span class="number">.0</span> 严格模式下不能用 <span class="keyword">with</span></span><br><span class="line">    <span class="keyword">with</span> 可以改变作用域链</span><br><span class="line">    <span class="keyword">with</span>()括号里面的代码会按照正常顺序执行，但是如果在括号里面添加了对象，就会把对象当作 <span class="keyword">with</span> 要执行的代码体的作用域链的最顶端（最直接的最近的 AO）</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">下面这个 <span class="keyword">with</span> 看到的就是 <span class="keyword">var</span> obj 的 name （<span class="keyword">with</span> 改变作用域链）</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'obj'</span>,</span><br><span class="line">        age = <span class="number">234</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">'spoce'</span>;</span><br><span class="line">        <span class="keyword">with</span>(obj)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(name);</span><br><span class="line">            <span class="built_in">console</span>.log(age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// obj,234</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">命名空间应该像下面这样用的，<span class="keyword">with</span> 可以简化代码</span><br><span class="line">    <span class="keyword">var</span> org = &#123;</span><br><span class="line">        dp1 : &#123;</span><br><span class="line">            jc : &#123;</span><br><span class="line">                name : <span class="string">'abc'</span>,</span><br><span class="line">                age : <span class="number">123</span></span><br><span class="line">            &#125;,</span><br><span class="line">            deng : &#123;</span><br><span class="line">                name : <span class="string">'xiaodeng'</span>,</span><br><span class="line">                age : <span class="number">234</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        dp2 : &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">with</span>(org.dp1.jc)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span>(<span class="built_in">document</span>)&#123;</span><br><span class="line">        write(<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">`这也是 with 的运用方式，用with 表示 document.write();`</span></span><br></pre></td></tr></table></figure><blockquote><p>with 过于强大，可以改变作用域链，失去效率，所以es5.0不能用</p></blockquote><p><code>argumetns.callee</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(argumetns.callee);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">// 报错 -- TypeError ：'caller','callee'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">arguments</span>.callee 在 es5<span class="number">.0</span> 严格模式下报错</span><br><span class="line">    <span class="string">'use strice'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(test.caller);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line">    <span class="comment">// 报错 -- TypeError ：'caller','callee'</span></span><br></pre></td></tr></table></figure><p><code>es5.0 严格模式下：变量赋值前必须声明，局部 this 必须被赋值</code></p><p><code>（Person.call(null/undefined) 赋值什么就是什么），拒绝重复属性和参数（this 不在指向 window）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">局部 <span class="keyword">this</span> 必须被赋值 (Person.call(<span class="literal">null</span>/<span class="literal">undefined</span>)赋值什么就是什么)</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">该对象的 <span class="keyword">constructor</span>是 Test</span><br><span class="line">    'use strict';</span><br><span class="line">    function Test()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="comment">// Test&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Test.call(&#123;&#125;);</span><br><span class="line">    <span class="comment">// Object&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Test.call(<span class="number">123</span>);</span><br><span class="line">    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`在 es3.0 里面是不能这样的`</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Test.call(<span class="number">123</span>);</span><br><span class="line">    <span class="comment">// Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  new Number(123) 这是包装类的显示形式</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 es5<span class="number">.0</span> 中全局的 <span class="keyword">this</span> 还是指向 <span class="built_in">window</span></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//--全局范围</span></span><br><span class="line">    <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">拒绝重复属性和参数（<span class="keyword">this</span> 不在指向 <span class="built_in">window</span>）</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name,name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name,name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`在 es3.0 里面重复的参数是不报错的，但是在 es5.0 里面是会报错的`</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name,name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// SyntaxError:Duplicate  -- 报错</span></span><br><span class="line"></span><br><span class="line"><span class="string">`重复的属性名在 es5.0 也不行，但是不报错（后面会覆盖前面的）`</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'123'</span>,</span><br><span class="line">        name : <span class="string">'234'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>eval 很强大，能把字符串当成代码来执行</code></p><p><code>但是约定俗成在 es3.0 中都不能使用 eval。eval是魔鬼，因为会改变作用域</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'console.log(a)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es3.0 都不能 eval();eval 是魔鬼</span></span><br><span class="line">    <span class="keyword">var</span> global = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        global = <span class="number">200</span>;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">'console.log(global)'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果改变 global，他改变的是全局的</span><br><span class="line"></span><br><span class="line">当情况不同，<span class="built_in">eval</span> 改变的作用域是不同的</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> 还有自己独立的作用域</span><br><span class="line"></span><br><span class="line">理解：可以把回调函数理解为先定义好了函数，执行的时候再回头调用</span><br></pre></td></tr></table></figure><h1 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h1><ol><li><p>DOM  —&gt;    Document Object Model（文档对象模型</p></li><li><p>DOM 定义了表示和修改文档所需的方法（对象，这些对象的行为和属性以及这些对象之间的关系。）DOM 对象即为宿主对象，有浏览器厂商定义，用来操作 html 和 xml 功能的一类对象的集合。</p></li></ol><p><code>也有人称 DOM 是对 HTML 以及 XML 的标准编程接口</code></p><p><code>xml ==&gt; xhtml ==&gt; html</code></p><p><code>xml 是最早的版本，xml里面的标签是可以自己定义的，被 js 里面的 jeson 取代了，dom 不能改变 css 样式表，但是可以简介改变行间样式的 css</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">说的是改变不了 css 是指改变不了 css 的样式表，但是可以通过间接方式改变 html 的行间样式来改变</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">            div.style.widht = '100px';</span></span><br><span class="line"><span class="regexp">            div.style.height = '100px';</span></span><br><span class="line"><span class="regexp">            div.style.backgroundColor = 'red';</span></span><br><span class="line"><span class="regexp">        &lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`1. 找到 html 的方法：如 document。getElementsByTagName('div')就能把所有的 div 都选出来。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">如果想要拿到第一个 div ，写成 document.getElementByTagName('div') 后面就要加一个[0];就可以实现了</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2. div.style 选出来代表行间样式，选出来的就是 dom 对象</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">3. js 不能写 -(号) ，只能用小驼峰方法写。如 background-color 写成 bakgroundColor</span></span><br><span class="line"><span class="regexp">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">有 dom 操作以后就变成动态交互可以操作的了（你动一下，他给你一个反应）</span><br><span class="line">div.onclick 是一个交互效果的事件监听</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">        div.style.widht = '100px';</span></span><br><span class="line"><span class="regexp">        div.style.height = '100px';</span></span><br><span class="line"><span class="regexp">        div.sytle.backgroundColor = 'red';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">            this.style.backgroundColor = 'green';</span></span><br><span class="line"><span class="regexp">            this.style.widht = '200px';</span></span><br><span class="line"><span class="regexp">            this.style.height = ' 50px;';</span></span><br><span class="line"><span class="regexp">            this.style.borderRadius = '50%';</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">实现点击一下改变一下颜色</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">        div.style.widht = 100px;</span></span><br><span class="line"><span class="regexp">        div.style.height = '100px';</span></span><br><span class="line"><span class="regexp">        div..style.backgroundColor = 'red';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        var count = 0;</span></span><br><span class="line"><span class="regexp">        div.onlick = function()&#123;</span></span><br><span class="line"><span class="regexp">            count ++;</span></span><br><span class="line"><span class="regexp">            if(count % 2 == 1)&#123;</span></span><br><span class="line"><span class="regexp">                this.style.backgroundColor = 'green';</span></span><br><span class="line"><span class="regexp">            &#125;else&#123;</span></span><br><span class="line"><span class="regexp">                this.style.backgroundColor = 'red'</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">选项卡</span><br><span class="line"><span class="string">`写个选项卡，点第一个按钮出现第一对应的信息，点第二个按钮，第一个消失，第二个显示`</span></span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            .content&#123;</span><br><span class="line">                display:none;</span><br><span class="line">                width:<span class="number">200</span>px;</span><br><span class="line">                height:<span class="number">200</span>px;</span><br><span class="line">                border:<span class="number">2</span>px solid red;</span><br><span class="line">            &#125;</span><br><span class="line">            .active&#123;</span><br><span class="line">                background-color:yellow;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">            &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;<span class="number">111</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button&gt;222&lt;/</span>button&gt;</span><br><span class="line">            &lt;button&gt;<span class="number">333</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="content" style="display:block"&gt;1111&lt;/</span>div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;<span class="number">2222</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="content"&gt;3333&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            var btn = document.ElementsByTagName('button');</span></span><br><span class="line"><span class="regexp">            var div = document.ElementsByClassName('content');</span></span><br><span class="line"><span class="regexp">            for(var i = 0; i &lt; btn.length; i ++)&#123;</span></span><br><span class="line"><span class="regexp">                (function(n)&#123;</span></span><br><span class="line"><span class="regexp">                    btn[i].onlick = function()&#123;</span></span><br><span class="line"><span class="regexp">                    for(var j = 0;j &lt; btn.length; j ++)&#123;</span></span><br><span class="line"><span class="regexp">                        btn[i].className = '';</span></span><br><span class="line"><span class="regexp">                        div[i].style.display = 'none';</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                    this.className = 'active';</span></span><br><span class="line"><span class="regexp">                    div[i].style.display = 'block';</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &#125;(i))</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">小方块应用</span><br><span class="line"><span class="string">`document.body.appendChild(div); -- 意思是在body里面放一个 div`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`setInterval(function()&#123;&#125;,100) -- 是一个定时器功能，意思是每隔 100毫秒 就执行一次`</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    div.style.width = <span class="string">'100px'</span>;</span><br><span class="line">    div.style.height = <span class="string">'100px'</span>;</span><br><span class="line">    div.style.backgroundColor = <span class="string">'red'</span>;</span><br><span class="line">    div.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">    div.style.left = <span class="string">'0'</span>;</span><br><span class="line">    div.style.top = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">2</span> + <span class="string">'px'</span>;</span><br><span class="line">        div.style.top = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">2</span> + <span class="string">'px'</span>;</span><br><span class="line">    &#125;,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">`把上面的 setInterval(function()&#123;&#125;) 改成下面样式`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        speed += speed / <span class="number">7</span>;</span><br><span class="line">        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + speed + <span class="string">'px'</span>;</span><br><span class="line">        div.style.top = <span class="built_in">parseInt</span>(div.style.top) + speed + <span class="string">'px'</span>;</span><br><span class="line">    &#125;,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">`把上面的 setInterval(function()&#123;&#125;) 改成以下样式，可以让定时器停止`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        speed += speed / <span class="number">20</span>;</span><br><span class="line">        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + speed + <span class="string">'px'</span>;</span><br><span class="line">        div.style.top = <span class="built_in">parseInt</span>(div.style.top) + speed + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(div.style.top) &gt; <span class="number">200</span> &amp;&amp; <span class="built_in">parseInt</span>(div.style.left) &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            clearInterval(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">实现键盘控制小方块</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    div.style.widht = <span class="string">'100px'</span>;</span><br><span class="line">    div.style.height = <span class="string">'100px'</span>;</span><br><span class="line">    div.style.background = <span class="string">'red'</span>;</span><br><span class="line">    div.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">    div.style.left = <span class="string">'0'</span>;</span><br><span class="line">    div.style.top = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(e.which)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                div.style.top = <span class="built_in">parseInt</span>(div.style.top) - <span class="number">5</span> + <span class="string">'px'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                div.style.top =  <span class="built_in">parseInt</span>(div.style.top) + <span class="number">5</span> + <span class="string">'px'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                div.style.left = <span class="built_in">parseInt</span>(div.style.left - <span class="number">5</span> + <span class="string">'px'</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                div.style.left = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">5</span> + <span class="string">'px'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">点击运动加速</span><br><span class="line"></span><br><span class="line"><span class="string">`思路：每一次按下的时候都记录一个新的时间片段，都减去上一个执行的时间 片段，如果时间片段都小于一定的毫秒数的话，我们让一个计数器去++，当连续小 于的时候，就让计数器连续++,如果++到一定数的时候，我们认为是连续按了，再按 就加速了，让每一次按的时候都判断一下,如果时间间隔过大的话，就让计数器重新 归 0`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`按住加速：就是这一次按下与下一次按下的速度间隔时间十分短暂，就认为他加速 了。`</span></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">            &lt;button style=<span class="string">"</span></span><br><span class="line"><span class="string">            width: 100px;height: 50px;</span></span><br><span class="line"><span class="string">            background:linear-gradient(to left,#999,#000,#432,#fcc);position: fixed;right:0;top:50%;</span></span><br><span class="line"><span class="string">            text-align: center;line-height: height;color: #fff;</span></span><br><span class="line"><span class="string">            font-size: 25px;font-family: Arial;"</span>&gt;</span><br><span class="line">            加速&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            var btn = document.getElementsByTagName('button')[0];</span></span><br><span class="line"><span class="regexp">            var div = document.createElement('div');</span></span><br><span class="line"><span class="regexp">            document.body.appendChild(div);</span></span><br><span class="line"><span class="regexp">            div.style.width = '100px';</span></span><br><span class="line"><span class="regexp">            div.style.height = '100px';</span></span><br><span class="line"><span class="regexp">            div.backgroundColor = 'red';</span></span><br><span class="line"><span class="regexp">            div.style.position = 'absolute';</span></span><br><span class="line"><span class="regexp">            div.style.left = '0';</span></span><br><span class="line"><span class="regexp">            div.style.top = '0';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            var speed = 5;</span></span><br><span class="line"><span class="regexp">            btn.onlick = function () &#123;</span></span><br><span class="line"><span class="regexp">                speed++;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            document.onkeydown = function (e) &#123;</span></span><br><span class="line"><span class="regexp">                switch (e.which) &#123;</span></span><br><span class="line"><span class="regexp">                    case 38:</span></span><br><span class="line"><span class="regexp">                        div.style.top = parseInt(div.style.top) - speed + 'px';</span></span><br><span class="line"><span class="regexp">                        break;</span></span><br><span class="line"><span class="regexp">                    case 40:</span></span><br><span class="line"><span class="regexp">                        div.style.top = parseInt(div.style.top) + speed + 'px';</span></span><br><span class="line"><span class="regexp">                        break;</span></span><br><span class="line"><span class="regexp">                    case 37:</span></span><br><span class="line"><span class="regexp">                        div.style.left = parseInt(div.style.left) - speed + 'px';</span></span><br><span class="line"><span class="regexp">                        break;</span></span><br><span class="line"><span class="regexp">                    case 39:</span></span><br><span class="line"><span class="regexp">                        div.style.left = parseInt(div.style.left) + speed + 'px';</span></span><br><span class="line"><span class="regexp">                        break;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">划过出现颜色</span><br><span class="line"><span class="string">`box-sizing:border-box -- 启动了另外一种盒模型（IE盒模型）`</span></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            width: <span class="number">10</span>px;</span><br><span class="line">            height: <span class="number">10</span>px;</span><br><span class="line">            <span class="comment">/* border: 1px solid black; */</span></span><br><span class="line">            float: left;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">            width: <span class="number">200</span>px;</span><br><span class="line">            height: <span class="number">200</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt; &lt;li img-data='0'&gt;&lt;/</span>li&gt; * <span class="number">400</span> &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var ul = document.getElementsByTagName('ul')[0];</span></span><br><span class="line"><span class="regexp">        ul.onmouseover = function (e) &#123;</span></span><br><span class="line"><span class="regexp">            var event = e || window.evnet;</span></span><br><span class="line"><span class="regexp">            var target = event.target || event.srcElement;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            target.style.backgroundColor = 'rgb(0,255, '+ target.getAttribute('img-data') + ')'</span></span><br><span class="line"><span class="regexp">            target.setAttribute('img-data',parseInt(target.getAttribute('img-data')) + 6)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DOM-基本操作-①（大部分都是类数组）——-方法类选中操作"><a href="#DOM-基本操作-①（大部分都是类数组）——-方法类选中操作" class="headerlink" title="DOM 基本操作 ①（大部分都是类数组）—— 方法类选中操作"></a>DOM 基本操作 ①（大部分都是类数组）—— 方法类选中操作</h1><p><code>对节点的增删改查</code></p><p>() 号里面都不用写 . 或 #</p><p>查，查看元素节点</p><p>document：代表整个文档（如果给 html 标签上面再套一层标签就是 document）</p><h2 id="（Id）getElementById"><a href="#（Id）getElementById" class="headerlink" title="（Id）getElementById"></a>（Id）getElementById</h2><p><code>元素 id 在 Ie8 以下的浏览器，不区分 id 大小写，而且也返回 name 属性的元素，通过 id 标识我们来选择这个元素，一一对应</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div name=<span class="string">'only'</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementId('only');</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>除了 id 以外，其余选择出来的都是一组，很少用 id 选择器</p><h2 id="（标签）getElementsByTagName"><a href="#（标签）getElementsByTagName" class="headerlink" title="（标签）getElementsByTagName"></a>（标签）getElementsByTagName</h2><p><code>标签名，这是一个类数组，最主流的用法，经常用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">把页面里面的所有的 div 都选择出来</span><br><span class="line">&lt;div id=<span class="string">'only'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsTagName('div');</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"><span class="comment">// 从控制台输出</span></span><br><span class="line"><span class="comment">// &gt;  div</span></span><br><span class="line"><span class="comment">// &lt;· [div#only]</span></span><br><span class="line"><span class="comment">// &gt;  div.push(1)</span></span><br><span class="line"><span class="comment">// &lt;· 报错</span></span><br><span class="line">从 dom 开始，我们所学的一切系统给我们生成数组的东西，基本上都是类数组</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加个 [<span class="number">0</span>] 就选中了第一个 div，如果不加 <span class="number">0</span> ，那个 div 表示的是一个数组，设置背景颜色就会报错</span><br><span class="line">&lt;div id=<span class="string">'only'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="（name）getElementsByName"><a href="#（name）getElementsByName" class="headerlink" title="（name）getElementsByName"></a>（name）getElementsByName</h2><p><code>IE不支持需注意，只有部分标签 name 可生效（表单，表单元素，img，iframe）不是在所有的浏览器都能用——开发一般不用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">"fruit"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByName(<span class="string">'frult'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">把下面所有的 div 都拿出来</span><br><span class="line">&lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>只拿出第二个 div，加上[1],或在控制台上打 div[1]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选择第一个 p 的方式如下</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="（Class）getElementsByClassName"><a href="#（Class）getElementsByClassName" class="headerlink" title="（Class）getElementsByClassName"></a>（Class）getElementsByClassName</h2><p><code>类名 -&gt;缺点： ie8和ie8 以下的 ie 版本中没有，可以多个 class 一起，不是所有浏览器都能用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">只选择 .demo 的 p 标签 写法如下：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">'demo'</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'demo'</span>)[<span class="number">0</span>]</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">注意哪怕整个文只有一个 demo，也要加 [0],不然选出来的就是一个组</span></span><br></pre></td></tr></table></figure><h2 id="（CSS）-querySelector-lt-gt-querySelectorAll"><a href="#（CSS）-querySelector-lt-gt-querySelectorAll" class="headerlink" title="（CSS）.querySelector()   &lt;&gt;  .querySelectorAll()"></a>（CSS）.querySelector()   &lt;&gt;  .querySelectorAll()</h2><p><code>.querySelector -- css选择器，只能选择一个，在 ie7 和 ie7 一下的版本中没有</code></p><p><code>.querySelectorAll -- css选择器，全选，选一组，在 ie7 和 ie7 以下的版本中没有</code></p><p><code>.querySelectorAll()和.querySelector()选出来的元素不是实时的（是静态的），所以一般不用，其他的再怎么修改，跟原来的没有关系 id 选择器不能太依赖，一般当顶级框架使用，在 css 中一般用 class 选择器</code></p><p><code>query 是一个词条</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.querySelector()和.querySelectorAll()选出来的元素不是实时的，是静态的，是副本</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;strong&gt;<span class="number">123</span>&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            &lt;strong <span class="class"><span class="keyword">class</span></span>=<span class="string">'demo'</span>&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var strong = document.querySelector('div &gt; span strong.demo');</span></span><br><span class="line"><span class="regexp">        var strong1 = document.querySelectorAll('div &gt; span strong.demo');</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制器输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  strong</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· &lt;strong class='demo'&gt;123&lt;strong&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  strong1</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· [strong.demo]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`下面的都是实时的`</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class='demo'&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div');</span></span><br><span class="line"><span class="regexp">        var demo = document.getElementsByClassName('demo')[0]</span></span><br><span class="line"><span class="regexp">        var newDiv = document.createElement('div');</span></span><br><span class="line"><span class="regexp">        document.body.appendChild(newDiv);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制器输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· [div,div.demo,div,div]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.querySelectorAll()选中了所有的 div，但是实时操作不能实时反馈</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class='demo'&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.querySelectorAll('div');</span></span><br><span class="line"><span class="regexp">        var demo = document.getElementsByClassName('demo')[0];</span></span><br><span class="line"><span class="regexp">        var newDiv = document.createElement('div);</span></span><br><span class="line"><span class="regexp">        document.body.appendChild(newDiv);</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DOM基本操作-②-—-非方法类的节点操作"><a href="#DOM基本操作-②-—-非方法类的节点操作" class="headerlink" title="DOM基本操作 ② — 非方法类的节点操作"></a>DOM基本操作 ② — 非方法类的节点操作</h1><h2 id="遍历节点树"><a href="#遍历节点树" class="headerlink" title="遍历节点树"></a>遍历节点树</h2><p><code>遍历节点树：（灵活，兼容好）--- 关系类的选择</code></p><p>parentNode ——&gt; 父节点（最顶端的 parentNode 为 #document）</p><p>childNodes ——&gt; 子节点们（直接的节点数）节点包括文本节点，属性节点</p><p>firstChild ——&gt; 第一个子节点</p><p>lastChild ——&gt; 最后一个子节点</p><p>nextSibling ——&gt; 后一个兄弟节点</p><p>previousSibling ——&gt; 前一个兄弟节点</p><h3 id="parentNode-–-gt-父节点"><a href="#parentNode-–-gt-父节点" class="headerlink" title="parentNode –&gt; 父节点"></a>parentNode –&gt; 父节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;strong&gt;</span><br><span class="line">        &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>strong&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· &lt;html lang='en'&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· #document</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode.parentNode.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><h3 id="childNodes-–-gt-子节点"><a href="#childNodes-–-gt-子节点" class="headerlink" title="childNodes –&gt; 子节点"></a>childNodes –&gt; 子节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;strong&gt;</span><br><span class="line">        &lt;span&gt;<span class="number">1</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>strong&gt;</span><br><span class="line">    &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;em&gt;&lt;/</span>em&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes</span></span><br><span class="line"><span class="comment">// &lt;· [text,strong,text,span,text,em,text]</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes.length</span></span><br><span class="line"><span class="comment">// &lt;· 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释：</span></span><br><span class="line">    <span class="comment">// 为什么是7个节点？</span></span><br><span class="line">    第一个节点是 &lt;div&gt; 后面的文本节点（空格回车），第二个节点是元素节点 &lt;strong&gt;&lt;<span class="regexp">/span&gt;1&lt;/</span>span&gt;&lt;<span class="regexp">/strong&gt;,第三个节点是跟着的文本节点（空格回车），第四个节点是 &lt;span&gt;&lt;/</span>span&gt; 第五个是跟着的文本节点（空格回车）第六个是 &lt;em&gt;&lt;<span class="regexp">/em&gt;，第七个是跟着的文本节点（空格回车）</span></span><br></pre></td></tr></table></figure><h3 id="firstChild-amp-lastChild-–-gt-第一个子节点，最后一个子节点"><a href="#firstChild-amp-lastChild-–-gt-第一个子节点，最后一个子节点" class="headerlink" title="firstChild &amp; lastChild –&gt; 第一个子节点，最后一个子节点"></a>firstChild &amp; lastChild –&gt; 第一个子节点，最后一个子节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This si comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;sctipt&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>sctipt&gt;</span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.firstChild</span></span><br><span class="line"><span class="comment">// &lt;· "123"</span></span><br><span class="line"><span class="comment">// &gt;  div.lastChild</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br></pre></td></tr></table></figure><h3 id="previousSibling-amp-nextSibling-–-gt-前一个兄弟节点，后一个兄弟节点"><a href="#previousSibling-amp-nextSibling-–-gt-前一个兄弟节点，后一个兄弟节点" class="headerlink" title="previousSibling &amp; nextSibling –&gt; 前一个兄弟节点，后一个兄弟节点"></a>previousSibling &amp; nextSibling –&gt; 前一个兄弟节点，后一个兄弟节点</h3><p><code>previousSibling   前一个兄弟节点</code></p><p><code>nextSibling  后一个兄弟节点</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var strong = document.getElementsByTagName('strong')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>sctipt&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling.nextSibling.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling.nextSibling.nextSibling.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  strong.previousSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br><span class="line"><span class="comment">// &gt;  strong.previousSibling.previousSibling</span></span><br><span class="line"><span class="comment">// &lt;· comment</span></span><br><span class="line"><span class="comment">// &gt;  strong.previousSibling.previousSibling.previousSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br></pre></td></tr></table></figure><h2 id="基于元素节点树的遍历-–-不包含文本节点"><a href="#基于元素节点树的遍历-–-不包含文本节点" class="headerlink" title="基于元素节点树的遍历 – 不包含文本节点"></a>基于元素节点树的遍历 – 不包含文本节点</h2><p>parentElement – 遍历元素父节点</p><p>children – 遍历元素子节点</p><p>childElementCount – 查看元素子节点的个数</p><p>firstElementChild – 第一个元素子节点</p><p>lastElementChild – 最后一个元素子节点</p><p>previousElementSibling – 前一个兄弟节点</p><p>nextElementSibling – 后一个兄弟节点</p><p><code>除 children 外，其余的 ie9 及以下不兼容</code></p><h3 id="parentElement-–-gt-返回当前元素的父元素节点-–-IE不兼容"><a href="#parentElement-–-gt-返回当前元素的父元素节点-–-IE不兼容" class="headerlink" title="parentElement –&gt; 返回当前元素的父元素节点 – IE不兼容"></a>parentElement –&gt; 返回当前元素的父元素节点 – IE不兼容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;sctipt&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.parentElement</span></span><br><span class="line"><span class="comment">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="comment">// &gt;  div.parentElement.parentElement</span></span><br><span class="line"><span class="comment">// &lt;· &lt;html lang='en'&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="comment">// &gt;  div.parentElement.parentElement.parentElement</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><h3 id="children-–-gt-只返回当前元素的元素子节点"><a href="#children-–-gt-只返回当前元素的元素子节点" class="headerlink" title="children –&gt; 只返回当前元素的元素子节点"></a>children –&gt; 只返回当前元素的元素子节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.children</span></span><br><span class="line"><span class="comment">// &lt;· [strong,span]</span></span><br></pre></td></tr></table></figure><h3 id="childElementCount-–-当前元素节点的子元素节点个数"><a href="#childElementCount-–-当前元素节点的子元素节点个数" class="headerlink" title="childElementCount – 当前元素节点的子元素节点个数"></a>childElementCount – 当前元素节点的子元素节点个数</h3><p><code>childElementCount === children.length  当前元素节点的子元素节点个数（IE 不兼容）———— 基本不用，因为与 length 相等</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制器输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childElementCount</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 2</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.children.length</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 2</span></span><br></pre></td></tr></table></figure><h3 id="firstElementChild-amp-lastElementChild-–-gt-第一个元素节点，最后一个元素节点"><a href="#firstElementChild-amp-lastElementChild-–-gt-第一个元素节点，最后一个元素节点" class="headerlink" title="firstElementChild &amp; lastElementChild –&gt; 第一个元素节点，最后一个元素节点"></a>firstElementChild &amp; lastElementChild –&gt; 第一个元素节点，最后一个元素节点</h3><p><code>firstElementChild --&gt; 返回的是第一个元素节点（IE不兼容）</code></p><p><code>lastElementChild --&gt; 返回的是最后一个元素节点（IE不兼容）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.firstElementChild</span></span><br><span class="line"><span class="comment">// &lt;· &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">// &gt;  div.lastElementChild</span></span><br><span class="line"><span class="comment">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br></pre></td></tr></table></figure><h3 id="previousElementSibling-amp-nextElementSibling-–-gt-前一个兄弟元素节点，后一个兄弟元素"><a href="#previousElementSibling-amp-nextElementSibling-–-gt-前一个兄弟元素节点，后一个兄弟元素" class="headerlink" title="previousElementSibling &amp; nextElementSibling –&gt; 前一个兄弟元素节点，后一个兄弟元素"></a>previousElementSibling &amp; nextElementSibling –&gt; 前一个兄弟元素节点，后一个兄弟元素</h3><p><code>previousElementSibling --&gt; 前一个兄弟元素节点</code></p><p><code>nextElementSibling --&gt; 后一个兄弟元素</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This si comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;em&gt;&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">    &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'strong'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制器输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  strong.nextElementSibling</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line"><span class="comment">// &gt;  strong.nexElementSibling.nextElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;em&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextElementSibling.nextElementSibling.nextElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  strong.previousElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><p><code>除 children 外，parentElement、node.childElementCount、firstElementChild、lastElementChild、nextElementSibling、previousElementSibling 在 ie9 及以下不兼容</code></p><p><code>真正常用的就是 children，兼容性好</code></p><h2 id="每一个节点的四个属性"><a href="#每一个节点的四个属性" class="headerlink" title="每一个节点的四个属性"></a>每一个节点的四个属性</h2><p>nodeName – 节点标签名</p><p>nodeValue – 文本注释节点</p><p>nodeType – 查看节点类型</p><p>attributes – 属性节点</p><p>hasChildNodes – 判断有没有子节点</p><h3 id="nodeName-–-节点标签名"><a href="#nodeName-–-节点标签名" class="headerlink" title="nodeName – 节点标签名"></a>nodeName – 节点标签名</h3><p><code>元素的标签名，以大写形式表示，只读，不可写</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This si comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;em&gt;&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">    &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  从控制器输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[1].nodeName</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· '#comment'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[3].nodeName = 'abc'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 'abc'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  divchildNodes[3].nodeName</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 'strong'</span></span><br></pre></td></tr></table></figure><h3 id="nodeValue-–-文本-注释节点"><a href="#nodeValue-–-文本-注释节点" class="headerlink" title="nodeValue – 文本/注释节点"></a>nodeValue – 文本/注释节点</h3><p><code>Text 文本节点或 Comment 注释节点的文本内容，可读写</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;em&gt;&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">    &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 控制台输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[0].nideValue</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· '123'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.chidlNodes[0].nodeValue = 234</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 234</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[0].nodeValue</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· '234'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[0]</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· '234'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[1].nodeValue</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 'This si comment'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[1].nodeValue = 'That si comment'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· 'That si comment'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt;  div.childNodes[1]</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &lt;· &gt;!-- That is comment --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="nodeType（最有用）-–-节点类型"><a href="#nodeType（最有用）-–-节点类型" class="headerlink" title="nodeType（最有用） – 节点类型"></a>nodeType（最有用） – 节点类型</h3><p><code>该节点的类型，只读返回这个 div 的所有的元素节点</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">数字是调用 nodeType 返回的数字，代表着每一个节点的类型</span><br><span class="line"></span><br><span class="line">元素节点 —— <span class="number">1</span></span><br><span class="line">属性节点 —— <span class="number">2</span></span><br><span class="line">文本节点 —— <span class="number">3</span></span><br><span class="line">注释节点 —— <span class="number">8</span></span><br><span class="line"><span class="built_in">document</span> —— <span class="number">9</span></span><br><span class="line">DocumentFragment —— <span class="number">11</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;em&gt;&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">    &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[0].nodeType</span></span><br><span class="line"><span class="comment">// &lt;· 3(文本节点)</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[3].nodeType</span></span><br><span class="line"><span class="comment">// &lt;· 1(元素节点)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">把 div 下面所有的直接子元素节点挑出来，放在数组里面返回，不能用 children</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;em&gt;&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">    &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">retElementChild</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// no children</span></span><br><span class="line">        <span class="keyword">var</span> temp = &#123;</span><br><span class="line">            length : <span class="number">0</span>,</span><br><span class="line">            push : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">            splice : <span class="built_in">Array</span>.prototype.splice</span><br><span class="line">            &#125;,</span><br><span class="line">            child = node.childNodes,</span><br><span class="line">            len = child.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child[i].node.length === <span class="number">1</span>)&#123;</span><br><span class="line">                temp.push(child[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(retElementChild(div));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ [strong，span，em，i，b]</span></span><br></pre></td></tr></table></figure><h3 id="attributes-–-属性节点"><a href="#attributes-–-属性节点" class="headerlink" title="attributes – 属性节点"></a>attributes – 属性节点</h3><p><code>Element 节点的属性集合</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"only"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes</span></span><br><span class="line"><span class="comment">// &lt;· NamedNodeMap&#123;0: id,1: class,length: 2&#125;</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0]</span></span><br><span class="line"><span class="comment">// &lt;· id='only'</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].nodeType</span></span><br><span class="line"><span class="comment">// &lt;· 2</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].value</span></span><br><span class="line"><span class="comment">// &lt;· 'only'</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].name</span></span><br><span class="line"><span class="comment">// &lt;· 'id'</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].value = 'abc'</span></span><br><span class="line"><span class="comment">// &lt;· 'abc'</span></span><br><span class="line"><span class="comment">// &gt;  div</span></span><br><span class="line"><span class="comment">// &lt;· &lt;div id='abc' class='demo'&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>属性名不能改，属性值可以，但是我们一般不会用这种方法</p><p>我们一般用 getAttribute 和 setAttribute 去取</p><h3 id="hasChildNodes-–-判断有没有子节点"><a href="#hasChildNodes-–-判断有没有子节点" class="headerlink" title="hasChildNodes – 判断有没有子节点"></a>hasChildNodes – 判断有没有子节点</h3><p><code>节点的一个方法 Node.hasChildNodes(); -- 他有没有子节点，返回值是 true 或 false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"only"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;</span><br><span class="line">    &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从console输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ div.hasChildNodes()</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"only"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="keyword">this</span> is comment --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"only"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">当这种情况下是 <span class="literal">false</span> （没有空格，没有回车）</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"only"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性的节点是 div 上面的，不是 div 里面的</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- thsi is comment --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h1 id="DOM接口-结构树"><a href="#DOM接口-结构树" class="headerlink" title="DOM接口/结构树"></a>DOM接口/结构树</h1><p><code>dom 结构树代表的是一系列继承关系</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                       |-- XMLDocument</span><br><span class="line">        |-- Document --|</span><br><span class="line">        |              |-- HTMLDocument</span><br><span class="line">        |</span><br><span class="line">        |                   |-- Text       |-- HTMLHeadElement</span><br><span class="line">        |-- characterData --|              |</span><br><span class="line">Node ---|                   |-- Comment    |-- HTMLBodyElement</span><br><span class="line">        |                                  |</span><br><span class="line">        |                                  |-- HTMLTitleElement</span><br><span class="line">        |                                  |</span><br><span class="line">        |-- Element -- HTMLElement --------|-- TMLParagraphElement</span><br><span class="line">                                           |</span><br><span class="line">                                           |-- HTMLInputElement</span><br><span class="line">                                           |</span><br><span class="line">                                           |-- HTMLTableElement</span><br><span class="line">                                           |</span><br><span class="line">                                           |-- …etc…</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Document 和 document的关系`</span></span><br><span class="line"></span><br><span class="line">&gt;  Document</span><br><span class="line">&lt;· <span class="function"><span class="keyword">function</span> <span class="title">Document</span>(<span class="params"></span>)</span>&#123;[native code]&#125;</span><br><span class="line"></span><br><span class="line">&gt;  Document.prototype.abc = <span class="string">'abc'</span>;</span><br><span class="line">&lt;· <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">&gt;  <span class="built_in">document</span>.abc</span><br><span class="line">&lt;· <span class="string">'abc'</span></span><br></pre></td></tr></table></figure><p><code>document --&gt; HTMLDocument.prototype --&gt; Document.prototype</code></p><p>document 继承自 HTMLDocument.prototype</p><p>HTMLDocument.prototype 继承自 Document.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">圆形是不是一个对象？</span><br><span class="line"></span><br><span class="line">HTMLDocument.prototype = &#123;</span><br><span class="line">    __proto__ : Document.prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">    <span class="built_in">document</span> --&gt; HTMLDocument.prototype --&gt; Document.prototype</span><br><span class="line"></span><br><span class="line"><span class="comment">// console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  HTMLDocument.prototype.bcd = '123'</span></span><br><span class="line">    <span class="comment">// &lt;· '123'</span></span><br><span class="line">    <span class="comment">// &gt;  document</span></span><br><span class="line">    <span class="comment">// &lt;· #document</span></span><br><span class="line">    <span class="comment">// &gt;  document..bcd</span></span><br><span class="line">    <span class="comment">// &lt;· '123'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Document.prototype.bcd = '123'</span></span><br><span class="line">    <span class="comment">// &lt;· '123'</span></span><br><span class="line">    <span class="comment">// &gt;  HTMLDocument.prototype.bcd = '234'</span></span><br><span class="line">    <span class="comment">// &lt;· '234'</span></span><br><span class="line">    <span class="comment">// &gt;  document.bcd</span></span><br><span class="line">    <span class="comment">// &lt;· '234'</span></span><br></pre></td></tr></table></figure><p>DOM 结构树中，Node也是构造函数，comment 是注释</p><p>HTMLDocument 和 HTMLElement 实际上并列了对应的 XML，但是因为不用了 XML 就省略了，HTMLHeadElement 就是 head 标签，其余类推</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    HTMLBodyElement.protootype.abc=<span class="string">'demo'</span>;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// console输出</span></span><br><span class="line">    <span class="comment">// &gt;  body.abc</span></span><br><span class="line">    <span class="comment">// &lt;· 'demo'</span></span><br><span class="line">    <span class="comment">// &gt;  head..bcd</span></span><br><span class="line">    <span class="comment">// &lt;· undefiend</span></span><br><span class="line"></span><br><span class="line"><span class="string">`如果使用 HTMLElement.prototype.abc="demo"; 定义，则body和head都可以使用`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">看一看一层一层返回的是什么东西</span><br><span class="line"></span><br><span class="line"><span class="comment">// console输出</span></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· HTMLDocument&#123;Symbol&#123;symbol.toStringTag&#125;:'HTMLDocument'&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Document&#123;Symbol&#123;Symbol.toStringTag&#125;:'Document',Symbol&#123;symbol.unscopables&#125;:Object&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Node &#123;ELEMENT_NODE: 1, ATTRIBUTE_NODE: 2, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, ENTITY_REFERENCE_NODE: 5, …&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· EventTarget &#123;Symbol(Symbol.toStringTag): "EventTarget", : ƒ, removeEventListener: ƒ, dispatchEvent: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__.__proto__.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.body</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;body&gt;…&lt;/body&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.body.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· '[object HTMLBodyElement]'</span></span><br></pre></td></tr></table></figure><p><strong>思路：</strong> 绘制<code>dom</code>树，符合深度优先（纵向）原则，比如先看<code>head → title → meta →body → div → strong → span</code></p><p><code>dom</code>树是节点解析，<code>dom</code>树解析完毕代表<code>dom</code>数所有的节点解析完毕，不代表加载<br>（下载完毕）完毕。如看到<code>img</code>标签就放到<code>dom</code>树上，然后同时下载。</p><p><code>dom</code>树形成完了以后，就等<code>css</code>树形成【<code>cssTree</code>也是深度优先原则。】。</p><p><code>domTree + cssTree = randerTree，randerTree</code>形成以后才，渲染引擎才会绘制页面，<br><code>domTree</code>改变，<code>randerTree</code>也会改变，会重排，影响效率,要尽量避免重排。</p><p><code>randerTree</code>触发重排<code>（reflow）</code>的情况：<code>dom</code>节点的删除，添加，<code>dom</code>节点的宽高变<br>化，位置变化，<code>display none ==&gt; block，offsetWidth，offsetLeft</code></p><p><code>repaint</code>重绘：效率也比较低，效率影响较小。触发情况：改颜色，图片</p><h1 id="DOM-基本操作-定义方法-③"><a href="#DOM-基本操作-定义方法-③" class="headerlink" title="DOM 基本操作 - 定义方法 ③"></a>DOM 基本操作 - 定义方法 ③</h1><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>一、<code>getElementById</code>方法定义在<code>Document.prototype</code>上，即<code>Element</code>节点上不能使</p><p>二、<code>getElementsByName</code>定义在<code>HTMLDocument.prototype</code>上，既非<code>html</code>中的<code>document</code>以外不能使用<code>（xml document,Element）</code></p><p>三、<code>getElementsByTagName</code>方法定义在<code>Document.prototype</code>和<code>Element.prototype</code>上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例:选取 div 里面的 span</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;<span class="number">1</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('dib')[0];</span></span><br><span class="line"><span class="regexp">        var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  span</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;span&gt;1&lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">`开发中，经常利用先选择的父级，在他父级里面再次选什么元素来定位一个元素`</span></span><br></pre></td></tr></table></figure><p><code>var div = document.getElementsByTagName(&#39;*&#39;);  选择所有</code></p><p>四、<code>HTMLDocument.prototype</code>定义了一些常用的属性，<code>body、head</code>分别指代<code>HTML</code>文档中的<code>&lt;body&gt;、&lt;head&gt;</code>标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    <span class="comment">// &gt;  document.body</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.head</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;head&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure><p>五、<code>Document.prototype</code>定义了<code>documentElement</code>属性，指代文档的根元素，在<code>HTML</code>文档中，他总是指代<code>&lt;html&gt;</code>元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    <span class="comment">// &gt;  document.documentElement</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;html lang='en'&gt;</span></span><br><span class="line">    <span class="comment">//         &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line">    <span class="comment">//         &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>六、<code>getElementsByClassName、querySelectorAll、querySelector</code>在<code>Document,Element</code>类中均有定义<code>div.getElementsByClassName(&#39;&#39;)</code></p><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><h3 id="一、遍历元素节点数，要求不用-children-属性（在原型链上编程）"><a href="#一、遍历元素节点数，要求不用-children-属性（在原型链上编程）" class="headerlink" title="一、遍历元素节点数，要求不用 children 属性（在原型链上编程）"></a>一、遍历元素节点数，要求不用 children 属性（在原型链上编程）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;strong&gt;&lt;/</span>strong&gt;</span><br><span class="line">        &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">低级方法，给一个父节点，把子节点全部遍历出来，并打印</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">高级方法：打印树形结构 → 分层打印出来 先看 div 再看子元素节点， 再挨个判断</span></span><br></pre></td></tr></table></figure><h3 id="二、封装函数，返回元素-e-的第-n-层祖先元素"><a href="#二、封装函数，返回元素-e-的第-n-层祖先元素" class="headerlink" title="二、封装函数，返回元素 e 的第 n 层祖先元素"></a>二、封装函数，返回元素 e 的第 n 层祖先元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;strong&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">                &lt;i&gt;&lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    function retParent(elem,n)&#123;</span></span><br><span class="line"><span class="regexp">        while(elem &amp; n)&#123;</span></span><br><span class="line"><span class="regexp">            elem = elem.parentElement;</span></span><br><span class="line"><span class="regexp">            n--;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return elem;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    var i = document.getElementsByTagName('i')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出</span></span><br><span class="line">    &gt;  retParent(i,<span class="number">1</span>)</span><br><span class="line">    &lt;· &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &gt;  retParent(i,2)</span></span><br><span class="line"><span class="regexp">    &lt;· &lt;strong&gt;&lt;/</span>strong&gt;</span><br></pre></td></tr></table></figure><h3 id="三、封装函数，返回元素-e-的第-n-个兄弟节点，n为证，返回后面的兄弟节点，n-为负，返回前面的，n-为-0，返回自己"><a href="#三、封装函数，返回元素-e-的第-n-个兄弟节点，n为证，返回后面的兄弟节点，n-为负，返回前面的，n-为-0，返回自己" class="headerlink" title="三、封装函数，返回元素 e 的第 n 个兄弟节点，n为证，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己"></a>三、封装函数，返回元素 e 的第 n 个兄弟节点，n为证，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- this is comment --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">    &lt;address&gt;&lt;<span class="regexp">/address&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">retSibling</span>(<span class="params">e,n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(e &amp;&amp; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            e = e.nextElementSibling;</span><br><span class="line">            n--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e = e.previousElementSibling;</span><br><span class="line">            n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.getElmentsByTagName(<span class="string">'strong'</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从console输出</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &gt;  retSibling(strong,1)</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &lt;· &lt;i&gt;​&lt;/i</span>&gt;​</span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,2)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;address&gt;​&lt;/address&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,3)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,1000)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-1)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;p&gt;​&lt;/p&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-2)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;span&gt;​&lt;/span&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-3)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-300)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,0)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;strong&gt;​&lt;/strong&gt;​</span></span><br></pre></td></tr></table></figure><p>上面的 ie9 不兼容，考虑到兼容性，可以按照下面思路写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retSibling</span>(<span class="params">e,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(e &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e.nextElementSibling)&#123;</span><br><span class="line">                e = e.nextElementSibling;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(e = e.nextSibling; e &amp;&amp; e.nodeType != <span class="number">1</span>; e = e.nextSibling);</span><br><span class="line">            &#125;</span><br><span class="line">            n --;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.previousElementSibling) &#123;</span><br><span class="line">                e = e.previousElementSibling;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType != <span class="number">1</span>;e = e.previousSibling);</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`如果 for 循环执行体是空的，那么可以不写&#123;&#125;`</span></span><br></pre></td></tr></table></figure><h3 id="四、编辑函数，封装-children功能，解决以前部分浏览器的兼容问题"><a href="#四、编辑函数，封装-children功能，解决以前部分浏览器的兼容问题" class="headerlink" title="四、编辑函数，封装 children功能，解决以前部分浏览器的兼容问题"></a>四、编辑函数，封装 children功能，解决以前部分浏览器的兼容问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &lt;b&gt;&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">      abc</span></span><br><span class="line"><span class="regexp">      &lt;!-- this is comment --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;strong&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;</span></span><br><span class="line"><span class="regexp">          &lt;i&gt;&lt;/i</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>strong&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">Element.prototype.myChildren = function()&#123;</span></span><br><span class="line"><span class="regexp">    var child = this.childNodes;</span></span><br><span class="line"><span class="regexp">    var len = child.length;</span></span><br><span class="line"><span class="regexp">    var arr = [];</span></span><br><span class="line"><span class="regexp">    for(var i = 0;i &lt; len;i ++)&#123;</span></span><br><span class="line"><span class="regexp">        if(child[i].nodeType == 1)&#123;</span></span><br><span class="line"><span class="regexp">            arr.push(child[i]);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return arr;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var div = document.getElementsByName('div')[0];</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="五、自己封装-hasChildren-方法，不可以用children属性"><a href="#五、自己封装-hasChildren-方法，不可以用children属性" class="headerlink" title="五、自己封装 hasChildren()方法，不可以用children属性"></a>五、自己封装 hasChildren()方法，不可以用children属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'i'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    Element.prototype.myHasChildNodes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> child = <span class="keyword">this</span>.childNodes;</span><br><span class="line">        <span class="keyword">var</span> len = child.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child[i].nodeType == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flase;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DOM-基本操作-增-插-删-替④"><a href="#DOM-基本操作-增-插-删-替④" class="headerlink" title="DOM 基本操作 - 增|插|删|替④"></a>DOM 基本操作 - 增|插|删|替④</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="document-createElement-—-增加或创建元素节点（标签）-–-常用"><a href="#document-createElement-—-增加或创建元素节点（标签）-–-常用" class="headerlink" title="document.createElement(); — 增加或创建元素节点（标签） – 常用"></a>document.createElement(); — 增加或创建元素节点（标签） – 常用</h3><h3 id="document-createTextNode-—-创建文本节点"><a href="#document-createTextNode-—-创建文本节点" class="headerlink" title="document.createTextNode(); — 创建文本节点"></a>document.createTextNode(); — 创建文本节点</h3><h3 id="document-createComment-—-创建注释节点"><a href="#document-createComment-—-创建注释节点" class="headerlink" title="document.createComment(); — 创建注释节点"></a>document.createComment(); — 创建注释节点</h3><h3 id="document-createDocumentFragment-—-创建文档碎片节点"><a href="#document-createDocumentFragment-—-创建文档碎片节点" class="headerlink" title="document.createDocumentFragment(); — 创建文档碎片节点"></a>document.createDocumentFragment(); — 创建文档碎片节点</h3><h2 id="插-—-剪切操作"><a href="#插-—-剪切操作" class="headerlink" title="插 — 剪切操作"></a>插 — 剪切操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.appendChild()可以理解为.push</span><br><span class="line"></span><br><span class="line">insertBefore(a,b)一定是先insert a，before b，就是拿 a 插入到 b 的前面</span><br><span class="line"></span><br><span class="line">insertAfter(a,b)就是拿 a 插入到 b 的后面</span><br></pre></td></tr></table></figure><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h3><p><code>.appendChild()</code>可以理解为<code>.push</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：把 span 插入到 div 里面</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">        var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">        div.appendChild(span);  /</span><span class="regexp">/ -- 把 span 插入到 div 里面</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">把目标节点内部的节点上顺序逆序</span><br><span class="line">    Element.prototype.invertedChild = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> child = <span class="keyword">this</span>.children,</span><br><span class="line">            len = child.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = len - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i --)&#123;</span><br><span class="line">          <span class="keyword">this</span>.appendChild(child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">    div.invertedChild();</span><br></pre></td></tr></table></figure><h3 id="insertBefore-a-b"><a href="#insertBefore-a-b" class="headerlink" title="insertBefore(a,b)"></a>insertBefore(a,b)</h3><p><code>insertBefore(a,b)</code>一定是先<code>insert a，before b</code>，就是拿 a 插入到 b 的前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：把 strong 插入到 span 的前面</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">        var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">        var strong = document.createElement('strong');</span></span><br><span class="line"><span class="regexp">        div.insertBefore(strong,span);  /</span><span class="regexp">/ -- 把 strong 插入到 span 前面</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="insertAfter-a-b"><a href="#insertAfter-a-b" class="headerlink" title="insertAfter(a,b)"></a>insertAfter(a,b)</h3><p><code>insertAfter(a,b)</code>一定是先<code>insert a，before b</code>，就是拿 a 插到 b 的后面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`insertAfter 系统没有定义，所以是自己利用 insertBefore 来写的一个相反的方法`</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;i&gt;&lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">        &lt;b&gt;&lt;/</span>b&gt;</span><br><span class="line">        &lt;span&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    Element.prototype.insertAfter(targetNode,afterNode)&#123;</span></span><br><span class="line"><span class="regexp">        var beforeNode = afterNode.nextElementSibling;</span></span><br><span class="line"><span class="regexp">        if(beforeNode == null)&#123;</span></span><br><span class="line"><span class="regexp">            this.appendChild(targetNode);</span></span><br><span class="line"><span class="regexp">        &#125;else&#123;</span></span><br><span class="line"><span class="regexp">            this.insertBefore(targetNode,beforeNode);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    var b = document.getElementsByTagName('b')[0];</span></span><br><span class="line"><span class="regexp">    var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">    var p = document.createElement('p');</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h3><p>就是被剪切出来了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">    var strong = document.createElement('strong');</span></span><br><span class="line"><span class="regexp">    var i = document.create('i');</span></span><br><span class="line"><span class="regexp">    div.insertBefore(strong,span);</span></span><br><span class="line"><span class="regexp">    div.insertBefore(i,strong);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  div.removeChild(i);</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var ii = div.removeChild(i);</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  ii</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">    var strong = document.createElement('strong');</span></span><br><span class="line"><span class="regexp">    var i = document.create('i');</span></span><br><span class="line"><span class="regexp">    div.insertBefore(strong,span);</span></span><br><span class="line"><span class="regexp">    div.insertBefore(i,strong);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  i.remove()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  strong.remove();</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  span.remove()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><h3 id="replaceChild-new-origin"><a href="#replaceChild-new-origin" class="headerlink" title="replaceChild(new,origin)"></a>replaceChild(new,origin)</h3><p><code>replaceChild(new,origin); 用新的 new 去置换旧的 origin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    var span = document.getElementsByTagName('span')[0];</span></span><br><span class="line"><span class="regexp">    var strong = document.createElement('strong');</span></span><br><span class="line"><span class="regexp">    var i = document.create('i');</span></span><br><span class="line"><span class="regexp">    div.insertBefore(strong,span);</span></span><br><span class="line"><span class="regexp">    div.insertBefore(i,strong);</span></span><br><span class="line"><span class="regexp">    var p = document.createElement('p');</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.replaceChild(p,strong)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DOM-基础操作-Element节点的方法-属性⑤"><a href="#DOM-基础操作-Element节点的方法-属性⑤" class="headerlink" title="DOM 基础操作 - Element节点的方法|属性⑤"></a>DOM 基础操作 - Element节点的方法|属性⑤</h1><h2 id="Element-节点的一些属性"><a href="#Element-节点的一些属性" class="headerlink" title="Element 节点的一些属性"></a>Element 节点的一些属性</h2><h3 id="innerHTML-innerText"><a href="#innerHTML-innerText" class="headerlink" title="innerHTML \ innerText"></a>innerHTML \ innerText</h3><p><code>innerHTML</code>  –&gt; 给 HTML文档赋值  –  可取，可写，可赋值，赋值之后覆盖原来的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">取：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;<span class="number">123</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;strong&gt;234&lt;/</span>strong&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从console输出：</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &gt;  div.innerHTML</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &lt;· "</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/         &lt;span&gt;123&lt;/</span>span&gt;</span><br><span class="line">    <span class="comment">//         &lt;strong&gt;234&lt;/strong&gt;</span></span><br><span class="line">    <span class="comment">//     "</span></span><br><span class="line"></span><br><span class="line">写：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;<span class="number">123</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;strong&gt;234&lt;/</span>strong&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从console输出：</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &gt;  div.innerHTML = '123'</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &lt;· '123'</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &gt;  div</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &lt;· '123' -- 覆盖</span></span><br></pre></td></tr></table></figure><p><code>innerText</code>  –&gt; 给HTML文档添加文本  –  可取，可赋值（老版本火狐不兼容）/ textContent（火狐使用这个，老版本 IE 不好使）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;<span class="number">234</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;&lt;span&gt;234&lt;/span&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.innerText = 123</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;123&lt;/div&gt;  --  赋值要谨慎，因为赋值会把原来的文本覆盖</span></span><br></pre></td></tr></table></figure><h2 id="Element-节点的一些方法"><a href="#Element-节点的一些方法" class="headerlink" title="Element 节点的一些方法"></a>Element 节点的一些方法</h2><h3 id="setAttribute-getAttribute"><a href="#setAttribute-getAttribute" class="headerlink" title="setAttribute \ getAttribute"></a>setAttribute \ getAttribute</h3><p><code>setAttribute</code> 设置，往元素里面写值（class，id）等等,比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo.setAttribute(<span class="string">'属性名'</span>,<span class="string">'属性值'</span>); <span class="comment">// 我们可以自己添加属性和属性值</span></span><br></pre></td></tr></table></figure><p><code>getAttribute</code> 取元素的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;<span class="number">234</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出</span></span><br><span class="line">    <span class="comment">// &gt;  div.setAttribute('class','demo');  --  添加 类.class</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div class='demo'&gt;…&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.setAttribute('id','only');  --  添加 id</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div class='demo' id='only'&gt;…&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.getAttribute('id','only');  --  取 id 值</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  div.getAttribute('id');</span></span><br><span class="line">    <span class="comment">// &lt;· 'only'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">通过 div.setAttribute(<span class="string">'id'</span>,<span class="string">'only'</span>)动态的去改div的值 </span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #only&#123;</span><br><span class="line">            font-size: <span class="number">20</span>px;</span><br><span class="line">            color:fff;</span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;<span class="number">234</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">        this.setAttribute('id','only')</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="data-log"><a href="#data-log" class="headerlink" title="data-log"></a>data-log</h3><p>当满足一定条件时，if就可以动态操作了，配合事件连成整体操作 这个行间属性可以设置系统没有的。<code>data-log</code>是打点，点击率，这是人工设置的行间 属性，不是系统定义的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如何去取这个 data-log？</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;a href=<span class="string">'#'</span> data-log=<span class="string">'0'</span>&gt;hehe&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>)[<span class="number">0</span>];</span><br><span class="line">        a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.getAttribute(<span class="string">'data-log'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给三个标签，让他们行间有一个属性 <span class="keyword">this</span>-name，比如第一个 div，第二个span</span><br><span class="line">    &lt;div&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;strong&gt;&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var all = document.getElementsByTagName('*');</span></span><br><span class="line"><span class="regexp">        for(var i = 0;i &lt; all.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">            all[i]setAttribute('this-item',all[i].nodeName);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h1 id="日期对象-Date-—-就是一种对象，是系统提供好的"><a href="#日期对象-Date-—-就是一种对象，是系统提供好的" class="headerlink" title="日期对象 Date()   —   就是一种对象，是系统提供好的"></a>日期对象 Date()   —   就是一种对象，是系统提供好的</h1><p><code>var date = new Date()</code>大写的<code>Date</code>是系统提供的一个构造函数，通过<code>new Date</code>的方法会给我们返回一个对象，这个对象就是一个日期对象。日期对象有很多属性和方法。小的<code>date</code>代表此时此刻的时间。用小的<code>date</code>调用方法，如<code>date.getDate()</code></p><h2 id="Date-对象属性（不够标准）"><a href="#Date-对象属性（不够标准）" class="headerlink" title="Date 对象属性（不够标准）"></a>Date 对象属性（不够标准）</h2><ul><li><p>属性           : 描述</p></li><li><p><code>constructor    : 返回对创建对象的</code>Date`函数的引用。原型上的属性</p></li><li><p><code>prototype      : 使您有能力向对象添加属性和方法。</code>prototype`是构造函数的属性</p></li></ul><h2 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h2><ul><li><p>`方法                 ：描述</p></li><li><p><code>Date()</code>———：返回当日的日期和时间</p></li><li><p><code>getDate()</code>———：制作出对象，从 <code>Date</code> 对象返回一个月中的某一天<code>（1 ~ 31）</code></p></li><li><p><code>getDay()</code>——：今天是一周的第几天，如果是 2 是星期二，但是是指第三天（第一天是周日，也就是 0）。从 <code>Date</code> 对象返回一周中的某一天（1 ~ 6）</p></li><li><p><code>getMonth()</code>——：一月份返回值是 0，从 <code>Date</code> 对象返回月份（0 ~ 11）</p></li><li><p><code>getFullYear()</code>——：从 <code>Date</code> 对象以四位数字返回年份</p></li><li><p><code>getYear()</code>——：已废弃。请使用 getFullYear()` 方法代替</p></li><li><p><code>getHours()</code>——：返回 <code>Date</code> 对象的小时（0 ~ 23）</p></li><li><p><code>getMinutes()</code>——：返回 <code>Date</code> 对象的分钟（0 ~ 59）</p></li><li><p><code>getSeconds()</code>——：返回 <code>Date</code> 对象的秒钟（0 ~ 59）</p></li><li><p><code>getMilliseconds()</code>——：返回 <code>Date</code> 对象的毫秒（0 ~ 999）</p></li><li><p><code>getTime()</code>——：返回 1970 年 1 月 1 日（纪元时刻）至今的毫秒数。经常用于项目的计算时间。获取<code>时间戳</code></p></li><li><p><code>setDate()</code>——：设置 <code>Date</code> 对象中月的某一天（1 ~ 31）</p></li><li><p><code>setMonth()</code>——：设置 <code>Date</code> 对象中月份（0 ~ 11）</p></li><li><p><code>setFullYear()</code>——：设置 <code>Date</code> 对象中的年份（四位数字）</p></li><li><p><code>setYear()</code>——：已废弃，请使用 setFullYea()方法代替</p></li><li><p><code>setHours()</code>——：设置 <code>Date</code> 对象中的小时（0 ~ 23）</p></li><li><p><code>setMinutes()</code>——：设置 <code>Date</code> 对象中的分钟（0 ~ 59）</p></li><li><p><code>setSeconds()</code>——：设置 <code>Date</code> 对象中的秒钟（0 ~ 59）</p></li><li><p><code>setMilliseconds()</code>——：设置 <code>Date</code> 对象中的毫秒（0 ~ 999）</p></li><li><p><code>setTime()</code>———：以毫秒设置 <code>Date</code> 对象。机械之间交换时间</p></li><li><p><code>toSource()</code>——：返回该对象的源代码</p></li><li><p><code>toString()</code>——：把 <code>Date</code> 对象转换为字符串</p></li><li><p><code>toTimeString()</code>——：把 <code>Date</code> 对象的时间部分转换为字符串</p></li><li><p><code>to</code>Date<code>String()</code>——：把 <code>Date</code> 对象的日期部分转换为字符换</p></li></ul><p><code>getUTC</code> 一类，<code>parse()</code> 的没用，不放表格里面，可以在 w3school date 中查看全部</p><p>在控制台调用 <code>date.getSeconds</code> 就是 <code>date</code> 创建时间的毫秒数，是静止的，不是动态的。这个 <code>date</code> 对象记录的是出生的那一刻的时间，不是实时的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例：利用 getTime() 计算程序计算的毫秒数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">1000000</span>;i ++)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(lastTime - firstTime);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例：setDate()</span><br><span class="line"></span><br><span class="line">&gt;  date.setDate(<span class="number">26</span>)</span><br><span class="line">&lt;· <span class="number">1580021359911</span></span><br><span class="line">&gt;  date</span><br><span class="line">&lt;· Sun Jan <span class="number">26</span> <span class="number">2020</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">19</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：循环执行用 setInterval</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setMinutes(<span class="number">54</span>);</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>.getTime() - date.getTime() &gt; <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'什么什么什么！！！'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例：setTime()</span><br><span class="line"></span><br><span class="line">&gt;  date.setTime(<span class="number">12345678900</span>)</span><br><span class="line">&lt;· <span class="number">12345678900</span></span><br><span class="line">&gt;  date</span><br><span class="line">&lt;· Sun May <span class="number">24</span> <span class="number">1970</span> <span class="number">05</span>:<span class="number">21</span>:<span class="number">18</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：toString() 和 toTimeString() 和 toDateString()</span><br><span class="line"></span><br><span class="line">&gt;  date.toString</span><br><span class="line">&lt;· <span class="string">"Sun May 24 1970 05:21:18 GMT+0800 (中国标准时间)"</span></span><br><span class="line">&gt;  date.toTimeString()</span><br><span class="line">&lt;· <span class="string">"05:21:18 GMT+0800 (中国标准时间)"</span></span><br><span class="line">&gt;  date.toDateString()</span><br><span class="line">&lt;· <span class="string">"Sun May 24 1970"</span></span><br></pre></td></tr></table></figure><p>作业：封装函数，打印当前是何年何月何日何时，几分几秒</p><h2 id="js-定时器"><a href="#js-定时器" class="headerlink" title="js 定时器"></a>js 定时器</h2><h3 id="一、setInterval-—-定时循环器"><a href="#一、setInterval-—-定时循环器" class="headerlink" title="一、setInterval() —- 定时循环器"></a>一、setInterval() —- 定时循环器</h3><p><code>注意：setInterval(&quot;func()&quot;,1000);定时循环器</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);定时器，意思是 <span class="number">1000</span> 毫秒执行一次这个函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="number">1000</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;,time)</span><br><span class="line"><span class="keyword">var</span> time = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">`time = 2000 不能改变函数里面的时间，只能执行写在 time 的时间数`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`如果先定义 1000 毫秒，在后面改成 2000 毫秒，程序仍按 1000 毫秒执行，因为他只识别一次，不能通过改变 time 改变 setInterval 的快慢 `</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：查数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>；</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    i ++;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：判断定时器准确不准确？</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="built_in">console</span>.log(lastTime - firstTime);</span><br><span class="line">    firstTime = lastTime;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">`setInterval() 计算时间非常不准确`</span></span><br><span class="line"></span><br><span class="line">注意：<span class="string">`setInterval(); 是 window 的方法，在全局上就算不写 window.setInterval(); 他也会上全局的 GO 里面查找，所以不写 window 也行`</span></span><br><span class="line"></span><br><span class="line">·每一个 setInterval(); 都会返回一个一个数字，作为唯一的标识，有唯一标识就可以把他清除掉（利用 clearInterval() 清除）<span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：每一个 setInterval 都有着返回值，timer 是逐一罗列放下排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 console.log 输出：</span></span><br><span class="line"><span class="comment">// &gt;  timer</span></span><br><span class="line"><span class="comment">// &lt;· 1</span></span><br><span class="line"><span class="comment">// &gt;  timer2</span></span><br><span class="line"><span class="comment">// &lt;· 2</span></span><br></pre></td></tr></table></figure><h3 id="二、clearInterval-—-停止定时循环器（setInterval-）"><a href="#二、clearInterval-—-停止定时循环器（setInterval-）" class="headerlink" title="二、clearInterval() —- 停止定时循环器（setInterval()）"></a>二、clearInterval() —- 停止定时循环器（setInterval()）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：一般写了 setInterval() 就要写 clearInterval()</span><br><span class="line"></span><br><span class="line"><span class="comment">// clearInterval();</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i ++);</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="三、setTimeout-—-真正的定时器-隔了一段时间后再执行（起推迟作用），并且-只执行一次"><a href="#三、setTimeout-—-真正的定时器-隔了一段时间后再执行（起推迟作用），并且-只执行一次" class="headerlink" title="三、setTimeout() —- 真正的定时器,隔了一段时间后再执行（起推迟作用），并且 只执行一次"></a>三、setTimeout() —- 真正的定时器,隔了一段时间后再执行（起推迟作用），并且 只执行一次</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例：隔了 <span class="number">1000</span> 毫秒才执行，并且只执行一次</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">`常应用于电影试看 5 分钟`</span></span><br></pre></td></tr></table></figure><h3 id="四、clearTimeout-—-清除-setTimeout-让他停止执行"><a href="#四、clearTimeout-—-清除-setTimeout-让他停止执行" class="headerlink" title="四、clearTimeout() —- 清除 setTimeout(); 让他停止执行"></a>四、clearTimeout() —- 清除 setTimeout(); 让他停止执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例：这种写法，setTimeout();还没执行就被清除了，就执行不了了</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">clearTimeout(timer);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：这个 timer = setTimeout();返回的唯一标识和 setInterval 返回的唯一标识是不会重叠的，他们两个是依次的</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">clearTimeout(timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 console 输出</span></span><br><span class="line">&gt;  timer</span><br><span class="line">&lt;· <span class="number">1</span></span><br><span class="line">&gt;  timer2</span><br><span class="line">&lt;· <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>setInterval(); setTimeout(); clearInterval(); clearTimeout();</code>这四个都是全局对象，都是<code>window</code>上的方法，内部函数<code>function</code>里面的<code>this</code>指向 <code>window</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例：setInterval(<span class="string">"function()"</span>,<span class="number">1000</span>) 和 setTimeout(); 都有另一种形式展现，里面可以写成字符串，例如<span class="string">"console.log('a');"</span>。但是一般用 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);  ---  标准形式</span><br><span class="line">setInterval(<span class="string">"console.log('a');"</span>,<span class="number">1000</span>);  ---  特殊形式，一般不这样写，意思是 <span class="number">1000</span> 毫秒执行一次<span class="built_in">console</span>.log</span><br></pre></td></tr></table></figure><h3 id="计时器作业"><a href="#计时器作业" class="headerlink" title="计时器作业"></a>计时器作业</h3><p><code>计时器，到三分钟停止</code></p><p><code>定时器要计数，计完数以后要填到结构里面，下面的起的两个变量 minutes 和 seconds 用于计数，计完数以后要填到 dom 结构里面（元素标签最正确的说法是 dom结构， 因为他可以被 dom操作）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    border: <span class="number">1</span>px solid black;</span><br><span class="line">    text-align: right;</span><br><span class="line">    font-size: <span class="number">20</span>px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">minutes:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">'0'</span>&gt;</span></span></span><br><span class="line">seconds:&lt;input type='text' value='0'&gt;</span><br><span class="line"></span><br><span class="line">var minutesNode = document.getElementsTagName = ('input')[0];</span><br><span class="line">var secondsNode = document.getElementsTagName = ('input')[1];</span><br><span class="line"></span><br><span class="line">var minutes = 0,</span><br><span class="line">    seconds = 0;</span><br><span class="line"></span><br><span class="line">var timer = seInterval(function()&#123;</span><br><span class="line">    var seconds = 0;</span><br><span class="line">    if(seconds == 60)&#123;</span><br><span class="line">        minutes ++;</span><br><span class="line">        seconds = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    minutesNode.value = minutes;</span><br><span class="line">    secondsNode.value = seconds;</span><br><span class="line">    if(minutes = 3)&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,10)</span><br></pre></td></tr></table></figure><h1 id="DOM-BOM-基本操作"><a href="#DOM-BOM-基本操作" class="headerlink" title="DOM / BOM 基本操作"></a>DOM / BOM 基本操作</h1><h2 id="一、查看滚动条的滚动距离"><a href="#一、查看滚动条的滚动距离" class="headerlink" title="一、查看滚动条的滚动距离"></a>一、查看滚动条的滚动距离</h2><ol><li><p><strong><code>window.pageXOffset</code>（横向）/ <code>pageYOffset</code>（纵向）</strong></p><p> IE8及IE8以下不兼容（IE9部分不兼容）IE9以上能用</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例：滚动条往下滚动了 <span class="number">400</span>px，求浏览器最顶端到滚动条滚动的位置的像素</span><br><span class="line"></span><br><span class="line">答：<span class="number">400</span>px + 首屏像素（此时这个屏幕的底端距离整个王爷的最顶端也是这样算的）</span><br></pre></td></tr></table></figure></li><li><p><strong>IE8及IE8以下的使用兼容方法</strong></p><p> 1)<code>document.body.scrollLeft / scrollTop</code> —- document.body.横向 / 纵向</p><p> 2)<code>document.documentElement.scrollLeft / scrollTop</code> —- document.documentElement.横向 / 纵向</p><p> <code>上面两个兼容性比较混乱，其中一个有值，另外一个的值一定是 0，这两个最好的用法是取两个值相加，因为不可能存在两个同时有值</code></p><p> <code>例如：document.body.scrollLeft + document.documentElementscrollLeft</code></p></li><li><p><strong>封装兼容方法（那个浏览器都好用），求滚动轮滚动距离 getScrollOffset()</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x : <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            y : <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x : <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            y : <span class="built_in">document</span>.bodu.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、查看视口的尺寸"><a href="#二、查看视口的尺寸" class="headerlink" title="二、查看视口的尺寸"></a>二、查看视口的尺寸</h2><p><code>可视区窗口就是编写的 html 文档可以看到的部分，不含菜单栏、地址栏、控制台</code></p><p>注意渲染模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 渲染模式 : &lt;! DOCTYPE html&gt; 是 html5 的（在 emmet 插件下 html:<span class="number">5</span> 就出来了）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 怪异/混杂模式 : 试图去兼容之前的语法，去掉&lt;!DOCTYPE html&gt;这一行即可开启（向后兼容）</span><br><span class="line"></span><br><span class="line">例：<span class="built_in">document</span>.compatMode是判断是怪异模式还是标准模式</span><br><span class="line"></span><br><span class="line">    CSS1Compat -- 标准模式</span><br><span class="line"></span><br><span class="line">    BackCompat -- 怪异模式向后兼容</span><br></pre></td></tr></table></figure><ol><li><p><strong><code>window.innerWidth</code> / <code>innerHeight</code> 可视区域的宽高（加上 滚动条的宽度 / 高度）</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IE8 及 IE8 以下不兼容</span><br><span class="line"></span><br><span class="line">如果窗口放大页面了，页面的尺寸也会拉伸了，尺寸就会变小</span><br></pre></td></tr></table></figure></li><li><p><strong><code>document.documentElement.clientWidth</code> / <code>clientHeight</code></strong></p><p><code>标准模式下，任意浏览器都兼容</code></p></li><li><p><strong><code>document.body.clientWidth</code> / <code>clientHeight</code></strong></p><p> <code>适用于怪异渲染模式的浏览器</code></p></li><li><p><strong>封装兼容性方法，返回浏览器视口尺寸 <code>getViewportOffset()</code></strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`例：document.compatMode`</span>是判断是怪异模式还是标准模式</span><br><span class="line"></span><br><span class="line">CSS1Compat -- 标准模式</span><br><span class="line"></span><br><span class="line">BackCompat -- 怪异模式向后兼容</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            w : <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            h : <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">'CSS1Compat'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                w : <span class="built_in">document</span>.documentElement.clienWidth,</span><br><span class="line">                h : <span class="built_in">document</span>.documentElement.clienHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                w : <span class="built_in">document</span>.body.clienWidth,</span><br><span class="line">                h : <span class="built_in">document</span>.body.clienHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、查看元素的几何尺寸"><a href="#三、查看元素的几何尺寸" class="headerlink" title="三、查看元素的几何尺寸"></a>三、查看元素的几何尺寸</h2><ol><li><p><strong>domEle.getBoundingClientRect() – 查看元素的几何尺寸</strong></p><ol><li><p><code>domEle.getBoundingClientRect()</code> 这是 es5.0 的方法，但只用了解</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    &gt;  div.getBoundingClientRect();</span><br><span class="line">    &lt;· ClientRect</span><br><span class="line">        bottom : <span class="number">200</span></span><br><span class="line">        height : <span class="number">100</span></span><br><span class="line">        left : <span class="number">100</span></span><br><span class="line">        right : <span class="number">200</span></span><br><span class="line">        top : <span class="number">100</span></span><br><span class="line">        widht : <span class="number">100</span></span><br><span class="line">        &gt; __proto__ : ClientRect</span><br></pre></td></tr></table></figure><p> <code>求的是四个边和窗口之间的像素距离，right 是右边离 document 的边有 200px，也可以理解成求的是左上点和右下点的位置</code></p></li><li><p>兼容性很好</p></li><li><p>该方法返回一个对象，对象里面有<code>left,top,right,bottom</code>等属性。<code>left</code>和<code>top</code>代表该元素左上角的<code>X</code>和<code>Y</code>坐标，<code>right</code>和<code>bottom</code>代表元素右下角的<code>X</code>和<code>Y</code>坐标</p></li><li><p><code>height</code> 和 <code>width</code> 属性老版本<code>IE</code>并未实现</p><ol><li>在老版本的IE里面，利用右侧边<code>right</code>减左侧面<code>left</code>解决</li></ol></li><li><p>返回的结果并不是实时的</p></li></ol></li><li><p><strong>dom.offsetWidth , dom.offsetHeight – 查看元素的宽/高</strong></p><ol><li><p><code>dom.offsetWidth</code> 元素的宽</p></li><li><p><code>dom.offsetHeight</code> 元素的高</p></li></ol><p><code>求的值是包括 padding 的</code></p><p><code>dom.offsetWidth</code>和<code>domEle.getBoundingClientRect()</code>出现的值是一样的，求的值是一样的，求的值都是<code>padding + content</code>（视觉尺寸），可以被代替。</p></li></ol><h2 id="四、查看元素的位置"><a href="#四、查看元素的位置" class="headerlink" title="四、查看元素的位置"></a>四、查看元素的位置</h2><ol><li><p><strong>dom.offsetLeft，dom.offsetTop – 查看元素的 x , y 轴位置</strong></p><ol><li><p><code>dom.offsetLeft</code> 元素的 x 轴位置</p></li><li><p><code>dom.offsetTop</code> 元素的 y 轴位置</p></li></ol><p><code>对于无定位父级的元素，返回的是相对于文档的坐标</code></p><p><code>对于有定位父级的元素，返回相对于最近的有定位的父级的坐标（无论是 left 还是 margin-left 等都是距离）</code></p></li><li><p><strong>dom.offsetParent – 返回最近的有定位的父级</strong></p><p> <code>返回最近的有定位的父级，如无，返回body，body.offsetParent 返回 null</code></p><p> 这个方法能求有定位的父级</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例：求元素相对于文档的坐标，以<span class="string">`getElementPosition()`</span>命名</span><br><span class="line"></span><br><span class="line">思路：先看有没有有定位的父级，如果有，先求他与有定位父级的距离，然后把视角换到他有定位的父级上，这他这个有定位的父级上还有没有有定位的父级，一段一段的加，一直加到最后，是一个循环递归的过程</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求元素相对于文档的坐标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementPosition</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!elem || !elem.offsetLeft)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> actualLeft = elem.offsetLeft,</span><br><span class="line">        actualTop = elem.offsetTop,</span><br><span class="line">        current = elem.offsetParent; <span class="comment">// 取得元素的 offsetParent</span></span><br><span class="line">    <span class="keyword">while</span>(current !== <span class="literal">null</span>)&#123;</span><br><span class="line">        actualLeft += current.offsetLeft;</span><br><span class="line">        actualTOp += current.offestTop;</span><br><span class="line">        current = current.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        left : actualLeft,</span><br><span class="line">        top : actualTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相对于父级的位置坐标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementPosition</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ele.offsetParent.nodeName = <span class="string">'BODY'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left : ele.offsetLeft,</span><br><span class="line">            top : ele.offsetTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left : ele.offsetLeft + getElementPosition(ele.offsetParent).left,</span><br><span class="line">            top : ele.offsetTop + getElementPosition(ele.offsetParent).top</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="让滚动条滚动"><a href="#让滚动条滚动" class="headerlink" title="让滚动条滚动"></a>让滚动条滚动</h2><ol><li><p><strong>window 上有三个方法 scroll(),scrollTo(),两个功能一样，scrollBy();累加滚动距离</strong></p><p> <code>window.scroll(x,y),scrollTo(x,y)</code>功能是一样的，里面能填两个参数</p><p> <code>window.sroll</code>(x 轴滚动的距离，y 轴滚动的距离)，里面的 xy 可以填负数</p><p> <code>window.scrollBy(x,y)</code>是累加滚动距离，填负数就往上滚动</p></li><li><p><strong>三个方法功能类似，用法都是将 <code>x,y</code> 坐标传入。即实现让滚动轮滚动到当前的位置</strong></p></li><li><p><strong>区别 : <code>scrollBy()</code> 会在之前的数据基础之上做累加</strong></p><p> eg : <code>可以利用scrollBy()做快速阅读的功能</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">start = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">stop = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key)&#123;</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.scrollBy(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">        &#125;,<span class="number">100</span>)</span><br><span class="line">        key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stop.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearsetInterval(timer);</span><br><span class="line">    key = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="脚本化-CSS"><a href="#脚本化-CSS" class="headerlink" title="脚本化 CSS"></a>脚本化 CSS</h1><p><code>dom</code>不能操作<code>css</code>,是间接操作<code>css</code>,这一部分需要记下</p><h2 id="一、读写元素-css-属性（间接控制）-–-dom-style-prop"><a href="#一、读写元素-css-属性（间接控制）-–-dom-style-prop" class="headerlink" title="一、读写元素 css 属性（间接控制） – dom.style.prop"></a>一、读写元素 css 属性（间接控制） – dom.style.prop</h2><p><strong>dom.style.prop;</strong></p><p><code>只有这个是可读可写的，其他属性都是只能读</code></p><p>1）<strong>可读写行间样式，没有兼容性问题，碰到<code>float</code>这样的关键字属性，前面应该加<code>css</code>（行间样式意外没有用）</strong></p><p><strong>eg:flaot  ————&gt;  cssFloat</strong>,因为<code>float</code>属性在<code>js</code>里面是<code>保留字</code>，所以一般如果想要用<code>float</code>的话就用<code>cssFloat</code></p><p>2）<strong>复合属性必须拆解（建议），组合单词变成小驼峰写法</strong></p><p>3）<strong>写入的值必须是字符串格式</strong></p><p>4）<strong>dom.style.prop 只能操作 css 行间样式</strong></p><p>5）<strong>dom.style 属性。能拿，能写（通过写间接改变了 css 属性）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    &gt;  div.style</span><br><span class="line">    &lt;· CSSStyleDeclaration &#123;<span class="attr">alignContent</span>: <span class="string">""</span>, <span class="attr">alignItems</span>: <span class="string">""</span>,<span class="attr">alignSelf</span>: <span class="string">""</span>, <span class="attr">alignmentBaseline</span>: <span class="string">""</span>, <span class="attr">all</span>: <span class="string">""</span>, …&#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">`CSSstyleDeclaration`</span>是<span class="string">`css`</span>样式表声明（类数组，有索引类的属性），把你能够用的所有的<span class="string">`css`</span>都展示出来，里面不填写就是没有值是空串。</span><br><span class="line"></span><br><span class="line">    可以用<span class="string">`div.style['width']`</span>拿出属性，也可以用<span class="string">`div.style.width`</span>,效果一样。</span><br><span class="line"></span><br><span class="line">    在<span class="string">`js`</span>访问属性的时候没有<span class="string">`-杠`</span>的形式，不能写<span class="string">`background-color`</span>，要写小驼峰。</span><br><span class="line"></span><br><span class="line">    不在<span class="string">`html`</span>文件里面写的值也可以利用js调用，如<span class="string">`div.style.borderRadius="50"`</span></span><br></pre></td></tr></table></figure><h2 id="二、查询计算样式-–-window-getComputedStyle-ele-null"><a href="#二、查询计算样式-–-window-getComputedStyle-ele-null" class="headerlink" title="二、查询计算样式 – window.getComputedStyle(ele,null)"></a>二、查询计算样式 – window.getComputedStyle(ele,null)</h2><p><strong>window.getComputedStyle(ele,null);</strong></p><p><strong>可以选取伪元素，并获取:</strong><code>window.getComputedStyle(ele,null);括号里面要填两个东西，第一个ele是填的你要获取谁，第二个先填写null（null解决的就是伪元素的问题，它可以填写伪元素，填null只是用于平常元素，在null的地方写入伪元素，就可以选择获取伪元素，用它可以获取伪元素的样式表）</code></p><p>1）<strong>window.getComputedStyle(ele,null);</strong>  <code>原生底层方法，展示权重最高的</code></p><p>2）<strong>计算样式只读，不可以写入</strong></p><p>3）<strong>返回的样式都是经过计算的，并且都是绝对值，没有相对单位，相对值会转换成绝对值显示</strong></p><p>4）<strong><em>IE8及IE8以下不兼容</em></strong></p><p>5）<strong>dom.style.prop 是取行间样式的值，取一个元素显示样式的值，window.getComputedStyle()更准</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在控制台操作就能有一个 css 样式表（类数组）</span><br><span class="line"></span><br><span class="line">&gt;  <span class="built_in">window</span>.getComputedStyle(div,<span class="literal">null</span>)</span><br><span class="line">&lt;· CSSStyleDeclaration &#123;<span class="number">0</span>: <span class="string">"animation-delay"</span>, <span class="number">1</span>: <span class="string">"animation-direction"</span>,<span class="number">2</span>: <span class="string">"animation-duration"</span>, <span class="number">3</span>: <span class="string">"animation-fill-mode"</span>, <span class="number">4</span>: <span class="string">"animation-iteration-count"</span>, <span class="number">5</span>: <span class="string">"animation-name"</span>, <span class="number">6</span>: <span class="string">"animation-play-state"</span>……</span><br></pre></td></tr></table></figure><p><code>window.getComputedStyle 不管填不填值都有值，这里的值都是默认的，这回获取的是这个当前元素所展现出的 css 属性的显示值都是页面中展现的最终效果的值</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            font-size:<span class="number">10</span>em; <span class="comment">// 1em = 16px</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=<span class="string">'float:left;height:100px;background-color:red'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从console输出：</span></span><br><span class="line"><span class="regexp">&gt;  window.getComputedStyle(div,null).width</span></span><br><span class="line"><span class="regexp">&lt;· 160px; /</span><span class="regexp">/ 10em = 160px</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&gt;  window.getComputedStyle(div,null).backgroundColor</span></span><br><span class="line"><span class="regexp">&lt;· "rgb(255,0,0))" /</span><span class="regexp">/ red = rgb(255,0,0)</span></span><br></pre></td></tr></table></figure><p><code>返回的样式都是经过计算的，并且都是绝对值，没有相对单位，相对值会转换成绝对值显示</code></p><h2 id="三、查询样式-–-ele-currentStyle"><a href="#三、查询样式-–-ele-currentStyle" class="headerlink" title="三、查询样式 – ele.currentStyle"></a>三、查询样式 – ele.currentStyle</h2><p><strong>ele.currentStyle;</strong></p><p>1）<strong>ele.currentStyle</strong>  <code>展示权重最高的</code></p><p>2）<strong>计算样式只读，不可以写入</strong></p><p>3）<strong>返回的计算样式的值不是经过转换的值，是原封不动的值</strong></p><p>4）<strong><em>IE独有的属性，只能用于IE</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例：[<span class="string">'width'</span>]写成<span class="string">`.width`</span>也可以，推荐写<span class="string">`点 .`</span></span><br><span class="line"></span><br><span class="line">div.currentStyle[<span class="string">'width'</span>] == div.currentStyle.width</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="封装兼容性查询计算css样式方法-getStyle"><a href="#封装兼容性查询计算css样式方法-getStyle" class="headerlink" title="封装兼容性查询计算css样式方法 getStyle()"></a>封装兼容性查询计算css样式方法 getStyle()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];<span class="comment">// 必须填写中括号</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle(prop); <span class="comment">// 必须填写中括号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`function getStyle`</span>(elem,prop)&#123;&#125;</span><br><span class="line"><span class="comment">// elem 是指获取谁的（dom 元素），prop 是获取的是什么属性</span></span><br></pre></td></tr></table></figure><h3 id="详细介绍获取伪元素方法，改变伪元素"><a href="#详细介绍获取伪元素方法，改变伪元素" class="headerlink" title="详细介绍获取伪元素方法，改变伪元素"></a>详细介绍获取伪元素方法，改变伪元素</h3><p>例：<em>理解 window.getComputedStyle(ele,null);第二个值是 null</em></p><p><strong>获取伪元素的方法</strong>：<code>window.getComputedStyle(ele,null);</code>括号里面要填两个东西，第一 个<code>ele</code>是填的是你要获取谁，第二个先填写<code>null</code>（<code>null</code>解决的就是伪元素的问题，用它可以获取伪元素的样式表）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div::after&#123;</span><br><span class="line">            content:<span class="string">""</span>;</span><br><span class="line">            width:<span class="number">50</span>px;</span><br><span class="line">            height:<span class="number">50</span>px;</span><br><span class="line">            background-color:green;</span><br><span class="line">            display:inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=<span class="string">"float:left;height:100px;width:100px;background-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">        window.getComputedStyle(div,"after");</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">window.getComputedStyle(div,“after”);就获取了伪元素的样式表，在控制台操作</span></span><br><span class="line"><span class="regexp">&gt;  window.getComputedStyle(div,'after').width</span></span><br><span class="line"><span class="regexp">&lt;· '50px'</span></span><br></pre></td></tr></table></figure><p><strong>怎么改变伪元素;</strong></p><p><em>改变伪元素并不一定要改变样式，可以改变 class</em>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .green::after&#123;</span><br><span class="line">            content:<span class="string">""</span>;</span><br><span class="line">            width:<span class="number">50</span>px;</span><br><span class="line">            height:<span class="number">50</span>px;</span><br><span class="line">            background-color:green;</span><br><span class="line">            display:inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">        .yellow::after&#123;</span><br><span class="line">            content:<span class="string">""</span>;</span><br><span class="line">            width:<span class="number">50</span>px;</span><br><span class="line">            height:<span class="number">50</span>px;</span><br><span class="line">            background-color:yelllow;</span><br><span class="line">            display:inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"green"</span> style=<span class="string">"float:left;height:100px;width:100px;background-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">        var count = 0;</span></span><br><span class="line"><span class="regexp">        div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">            count ++;</span></span><br><span class="line"><span class="regexp">            if(count % 2 == 1)&#123;</span></span><br><span class="line"><span class="regexp">                div.className = 'yellow';</span></span><br><span class="line"><span class="regexp">            &#125;else&#123;</span></span><br><span class="line"><span class="regexp">                div.className = 'green';   /</span><span class="regexp">/ class 是保留字，所以用className</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 如上</span></span><br><span class="line"><span class="regexp">`虽然我们通常用style改变css样式，但我们也可以通过改变class改变css样式`</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`通过改变 class 来实现改变，改变状态位的操作`</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`class 是保留字，所以要避开，用className`</span></span><br></pre></td></tr></table></figure><h3 id="小练习，让方块运动"><a href="#小练习，让方块运动" class="headerlink" title="小练习，让方块运动"></a>小练习，让方块运动</h3><p><strong>小方块持续运动;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="keyword">var</span> <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.style.left = <span class="built_in">parseInt</span>(getStyle(div,<span class="string">'left'</span>)) + <span class="number">10</span> + <span class="string">'px'</span></span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><strong>加速运动,设置到一个时候就停止了;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> speed = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.style.left = parentInt(getStyle(div,<span class="string">'left'</span>)) + speed + <span class="string">'px'</span>;</span><br><span class="line">    <span class="keyword">if</span>(parentInt(div.style.left) &gt; <span class="number">500</span>)&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h2><p>1）document.styleSheets</p><p>2）该属性存储了一个 html 文档里面的所有 css 样式表的集合事件（所有事件都是用的小写）</p><p><code>交互是你对页面动一下，页面给你一个反馈</code></p><ol><li><p>何为事件？ – 就是一个动作，没有效果也是事件</p></li><li><p>重要吗？ – 交互体验的核心功能</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">演示 demo -- 点击事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 100px;height: 100px;background-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a'); /</span><span class="regexp">/ 点击之后控制台出现 a</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="绑定事件方法"><a href="#绑定事件方法" class="headerlink" title="绑定事件方法"></a>绑定事件方法</h2><h3 id="一、句柄绑定方式：’on’-type（事件类型）"><a href="#一、句柄绑定方式：’on’-type（事件类型）" class="headerlink" title="一、句柄绑定方式：’on’  + type（事件类型）"></a>一、句柄绑定方式：’on’  + type（事件类型）</h3><p><strong>句柄绑定方式：elem.’on’ + 事件类型 = function(event){};</strong></p><p><code>只可以用function来绑定事件，若绑定匿名函数，则无法解除</code></p><p><code>打个比方：click 点击事件</code></p><p><code>例：div.&#39;on&#39; + click = function(){}  == div.onclick = function(){}</code></p><ol><li><p><strong>兼容性很好，但是一个元素只能绑定一个事件处理程序:</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`例：div.onclick = function()&#123;&#125;`</span></span><br><span class="line"></span><br><span class="line">div.onclick 就叫做可以被点击的事件（绑定事件类型），<span class="string">`function()&#123;&#125;`</span>是反馈，一旦事件被触发，就要执行<span class="string">`function`</span>里面的函数（绑定的是一个事件处理函数）</span><br><span class="line"></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;<span class="comment">// b 覆盖了 a，这是赋值的原因</span></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>基本等同于写在 HTML 行间上，如下:</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;div onclick=<span class="string">"console.log('a')"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2. div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('a');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">1 和 2 的效果是一样的，只是书写方式不一样</span></span><br></pre></td></tr></table></figure></li></ol><p><code>onclick=&#39;console.log(&quot;a&quot;)&#39; 是句柄的绑定方式，写在行间不用写function(){}</code></p><h3 id="二、常用写法："><a href="#二、常用写法：" class="headerlink" title="二、常用写法：()"></a>二、常用写法：()</h3><p><strong>elem.(type,function(){},false);</strong></p><p><code>IE9 以下不兼容，可以为一个事件绑定多个处理程序</code></p><p><code>div.(&#39;事件类型&#39;,处理函数,false);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">&lt;div style=<span class="string">"widht:100px;height:100px;background-color:red;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div');</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">    &#125;,false)</span></span><br><span class="line"><span class="regexp">&lt;/</span>sript&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">div.addEventListener(<span class="string">'click'</span>,test,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; 是函数引用，和外面定义一个 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; 直接写 test 是一样的</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;div style=<span class="string">"widht:100px;height:100px;background-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click',test,false);</span></span><br><span class="line"><span class="regexp">    function test()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><strong>时间有一个事件监听机制:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：一个事件绑定了两个处理函数</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"widht:100px;height:100px;background:red;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">    &#125;,false);</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('b');</span></span><br><span class="line"><span class="regexp">    &#125;,false)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`console.log 打印出来是两个函数结果，这是两个处理函数，是两个地址，所以可以输出两个结果`</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：下面只执行一个函数，这种写法是一个地址，一个人</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"widht:100px;height:100px;background:red;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click',test,false);</span></span><br><span class="line"><span class="regexp">    div.addEventListener('click',test,false);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function test()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`elem.addEventListener 不能给同一个函数绑定多次，重复的绑定一个函数就不可以用了,只能输出一个结果`</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="三、IE专用：attachEvent"><a href="#三、IE专用：attachEvent" class="headerlink" title="三、IE专用：attachEvent()"></a>三、IE专用：attachEvent()</h3><p>div.attachEvent(‘on’ + click’ + function(){});</p><p><code>IE 独有，一个事件可以绑定多个处理程序，同一个函数绑定多次都可以</code></p><p><code>div.attachEvent(&#39;on&#39; + 事件类型，处理函数);</code></p><p><em><code>div.attachEvent(&#39;onclick&#39;,function(){})</code></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"> <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">    div.attachEvent(<span class="string">'onclick'</span>,test,<span class="literal">false</span>);</span><br><span class="line">    div.attachEvent(<span class="string">'onclick'</span>,test,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例：想给三个 li 都绑定这个事件</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> liCol = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>],</span><br><span class="line">        len = li.length;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i++)&#123;</span><br><span class="line">           liCol[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i);</span><br><span class="line">            &#125;,<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件处理程序的运行环境"><a href="#事件处理程序的运行环境" class="headerlink" title="事件处理程序的运行环境"></a>事件处理程序的运行环境</h3><ol><li><p>elem.onclick = function(){}</p><ol><li>程序<code>this</code>指向是<code>dom</code>元素本身（指向自己）</li></ol></li><li><p>elem.addEventListener(type,fn,false)</p><ol><li>程序<code>this</code>指向是<code>dom</code>元素本身（指向自己）</li></ol></li><li><p>elem.attachEvent(‘on’ + type,fn)</p><ol><li>程序<code>this</code>指向<code>window</code></li><li>可以通过<code>call</code>来指向自己</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div.attachEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    handle.call(<span class="string">'div'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装绑定事件函数"><a href="#封装绑定事件函数" class="headerlink" title="封装绑定事件函数"></a>封装绑定事件函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">elem, type, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elem.addEventListener) &#123;</span><br><span class="line">        elem.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.attachEvent) &#123;</span><br><span class="line">        elem[<span class="string">'on'</span> + type] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            handle.call(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elem[<span class="string">"on"</span> + type] = handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解除事件绑定方法"><a href="#解除事件绑定方法" class="headerlink" title="解除事件绑定方法"></a>解除事件绑定方法</h2><h3 id="一、句柄方式解除绑定：elem-’on’-type（事件类型）-false-null"><a href="#一、句柄方式解除绑定：elem-’on’-type（事件类型）-false-null" class="headerlink" title="一、句柄方式解除绑定：elem.’on’ + type（事件类型） = false/null"></a>一、句柄方式解除绑定：elem.’on’ + type（事件类型） = false/null</h3><p><code>elem.&#39;on&#39; + type = false/null;     ==&gt;     就是解除 elem.&#39;on&#39; + type = function(e)){}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">例：用 div.onclick = <span class="literal">null</span>; 解除事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;background-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">`直接解除事件，不可以再执行`</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    div.onclick = null;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`只能执行一次的事件的写法`</span></span><br><span class="line"><span class="regexp">    var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">    div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">        this.onclick = null;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="二、常用方式解除绑定：elem-removeEventListener-type-fn-false"><a href="#二、常用方式解除绑定：elem-removeEventListener-type-fn-false" class="headerlink" title="二、常用方式解除绑定：elem.removeEventListener(type,fn,false)"></a>二、常用方式解除绑定：elem.removeEventListener(type,fn,false)</h3><p><strong>elem.removeEventListener(type,function(){},false);</strong></p><p><code>div.removeEventListener(&#39;事件类型&#39;,处理函数,false);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：elem.removeEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">div.addEventListener(<span class="string">'click'</span>,test,<span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeEventListener(<span class="string">'click'</span>,test,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`test`</span>如果填别的<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,就找不到他了，就没有办法清除，所以函数体一般要写在外面</span><br></pre></td></tr></table></figure><h3 id="三、IE专用方式解除：elem-detachEvent-‘on’-type-fn"><a href="#三、IE专用方式解除：elem-detachEvent-‘on’-type-fn" class="headerlink" title="三、IE专用方式解除：elem.detachEvent(‘on’ + type,fn)"></a>三、IE专用方式解除：elem.detachEvent(‘on’ + type,fn)</h3><p><strong>elem.detachEvent(‘on’ + click’ + function(){});</strong></p><p><code>elem.detachEvent(&#39;on&#39; + 事件类型，处理函数);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：div.detachEvent(<span class="string">'onclick'</span>,test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">    div.attachEvent(<span class="string">'onclick'</span>,test,<span class="literal">false</span>);</span><br><span class="line">    div.attachEvent(<span class="string">'onclick'</span>,test,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">this</span>.detachEvent(<span class="string">'onclick'</span>,test,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="封装解除绑定函数"><a href="#封装解除绑定函数" class="headerlink" title="封装解除绑定函数"></a>封装解除绑定函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">elem, type, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elem.removeEventListener) &#123;</span><br><span class="line">        elem.removeEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elem.detachEvent(<span class="string">'on'</span> + type, handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件处理模型-–-事件冒泡、捕获"><a href="#事件处理模型-–-事件冒泡、捕获" class="headerlink" title="事件处理模型 – 事件冒泡、捕获"></a>事件处理模型 – 事件冒泡、捕获</h2><p>事件处理的两个模型：事件冒泡、捕获（不能同时存在）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .wrapper&#123;</span><br><span class="line">            width:<span class="number">300</span>px;</span><br><span class="line">            height:<span class="number">300</span>px;</span><br><span class="line">            background-color:red;</span><br><span class="line">        &#125;</span><br><span class="line">        .content&#123;</span><br><span class="line">            width:<span class="number">200</span>px;</span><br><span class="line">            height:<span class="number">200</span>px;</span><br><span class="line">            bakground-color:green;</span><br><span class="line">        &#125;</span><br><span class="line">        .box&#123;</span><br><span class="line">            width:<span class="number">100</span>px;</span><br><span class="line">            height:<span class="number">100</span>px;</span><br><span class="line">            background-color:orange;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dvi&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var wrapper = document.getElementsByClassName('wrapper')[0];</span></span><br><span class="line"><span class="regexp">        var content = document.getElementsByClassName('content')[0];</span></span><br><span class="line"><span class="regexp">        var box = document.getElementsByClassName('box')[0];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        wrapper.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">            console.log('wrapper');</span></span><br><span class="line"><span class="regexp">        &#125;,false)</span></span><br><span class="line"><span class="regexp">        content.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">            console.log('content');</span></span><br><span class="line"><span class="regexp">        &#125;,false)</span></span><br><span class="line"><span class="regexp">        box.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">            console.log('content');</span></span><br><span class="line"><span class="regexp">        &#125;,false)</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制台输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt; box</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   content</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   wrapper</span></span><br><span class="line"><span class="regexp">`只是点了黄色区域，但是出现了 box，content，wrapper 三个结果，往下漏了，这就是事件冒泡`</span></span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p><strong>结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，及同一事件，自子元素冒泡向父元素（自底向上）;</strong></p><p><code>结构上存在父子关系的元素，如果点击到子元素，会一级一级向父元素传递这个事件（从代码的角度是自底向上一层一层冒泡的）</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">例：加了 margin，只点黄色方块，还是出现了 box，content，wrapper。所以与视觉无关</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dvi&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var wrapper = document.getElementsByClassName('wrapper')[0];</span></span><br><span class="line"><span class="regexp">var content = document.getElementsByClassName('content')[0];</span></span><br><span class="line"><span class="regexp">var box = document.getElementsByClassName('box')[0];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">wrapper.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('wrapper');</span></span><br><span class="line"><span class="regexp">&#125;,false)</span></span><br><span class="line"><span class="regexp">content.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('content');</span></span><br><span class="line"><span class="regexp">&#125;,false)</span></span><br><span class="line"><span class="regexp">box.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('content');</span></span><br><span class="line"><span class="regexp">&#125;,false)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制台输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt; box</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   content</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   wrapper</span></span><br><span class="line"><span class="regexp">`加了 margin，只点黄色区域，还是出现了 box，content，wrapper 三种结果，所以与视觉无关`</span></span><br></pre></td></tr></table></figure><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p><strong>1）结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，及同一事件，自父元素捕获至子元素（事件源元素）（自顶向下）;</strong></p><p><strong>2）IE 没有捕获事件;</strong></p><p><code>一个对象的一个事件类型，只能存在一个事件处理模型（冒泡或捕获）</code></p><p><code>elem.addEventListener(type,fn,true);第三个参数就是事件捕获，把false改为true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">例：把 <span class="literal">false</span>改成 <span class="literal">true</span>，就变成了事件捕获，只把 <span class="literal">false</span> 改成 <span class="literal">true</span> 就变成事件捕获了</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dvi&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var wrapper = document.getElementsByClassName('wrapper')[0];</span></span><br><span class="line"><span class="regexp">var content = document.getElementsByClassName('content')[0];</span></span><br><span class="line"><span class="regexp">var box = document.getElementsByClassName('box')[0];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">wrapper.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('wrapper');</span></span><br><span class="line"><span class="regexp">&#125;,true)</span></span><br><span class="line"><span class="regexp">content.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('content');</span></span><br><span class="line"><span class="regexp">&#125;,true)</span></span><br><span class="line"><span class="regexp">box.addEventListener('click',function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('content');</span></span><br><span class="line"><span class="regexp">&#125;,true)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制台输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt; wrapper</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   content</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   box</span></span><br></pre></td></tr></table></figure><p><code>结果和事件冒泡结果反了过来，先红色区域捕获事件并且执行，再绿色区域捕获事件并且实行，最后只执行事件黄色区域。</code>_捕获是把结构的最外面先抓住_。<strong>最外面先捕获，再一层层向里面捕获，最里面的是按常规执行</strong></p><p><strong>思考</strong>：同一个对象的同一个事件类型，上面绑定了两个事件处理函数，一个符合冒泡，一个符合捕获，点一个元素后，是先捕获，还是先冒泡？</p><p><strong>3）触发顺序，先捕获，后冒泡;</strong></p><p><code>同一个对象的一个事件处理类型，上面绑定了两个事件处理，分别执行事件冒泡和时间执行</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沿用上面代码</span></span><br><span class="line">wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wrapper'</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">content.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wrapper'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">content.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出</span></span><br><span class="line"><span class="comment">// wrapper</span></span><br><span class="line"><span class="comment">// content</span></span><br><span class="line"><span class="comment">// box</span></span><br><span class="line"><span class="comment">// boxBubble</span></span><br><span class="line"><span class="comment">// contentBubble</span></span><br><span class="line"><span class="comment">// wrapperBubble</span></span><br><span class="line"></span><br><span class="line"><span class="string">`先捕获，后冒泡`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变一下冒泡，捕获的顺序</span></span><br><span class="line">wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wrapper'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">content.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wrapper'</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">content.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">box.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出</span></span><br><span class="line"><span class="comment">// wrapper</span></span><br><span class="line"><span class="comment">// content</span></span><br><span class="line"><span class="comment">// boxBubble</span></span><br><span class="line"><span class="comment">// box</span></span><br><span class="line"><span class="comment">// contentBubble</span></span><br><span class="line"><span class="comment">// wrapperBubble</span></span><br></pre></td></tr></table></figure><p><code>顺序是先捕获红色，在捕获绿色，boxBubble黄色区域执行，box黄色区域执行，冒泡到绿色，冒泡到红色（谁先绑定，谁先执行，boxBubble 先绑定，所以先执行）</code></p><p><strong>4）focus，blur，change，submit，reset，select 等事件不冒泡;</strong></p><h2 id="取消冒泡和阻止默认事件"><a href="#取消冒泡和阻止默认事件" class="headerlink" title="取消冒泡和阻止默认事件"></a>取消冒泡和阻止默认事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：给 div 绑定一个事件，也给<span class="built_in">document</span>绑定一个事件（点击div，也冒泡到<span class="built_in">document</span>）</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;background-color:red;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">document.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('你闲的啊！')</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">div.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    this.style.background = 'green';</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>在每一个事件处理函数中【div.onclick = function(){}】,我们可以写一个形参（如e），系统可以传递</code> <strong>事件对象（记载了数据发生时的状态和信息）</strong> <code>到这个参数里面去</code></p><h3 id="一、取消冒泡"><a href="#一、取消冒泡" class="headerlink" title="一、取消冒泡"></a>一、取消冒泡</h3><h4 id="1）W3C标准：event-stopPropagation"><a href="#1）W3C标准：event-stopPropagation" class="headerlink" title="1）W3C标准：event.stopPropagation()"></a>1）W3C标准：event.stopPropagation()</h4><blockquote><p>event.stopPropagation(); – 但不支持 ie9  以下版本</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">例：事件对象上有一个 event.stopPropagation() 取消冒泡事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;background-color:red;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">document.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('你闲的啊啊');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">div.onclick = function(e)&#123;</span></span><br><span class="line"><span class="regexp">    e.stopPropagation();</span></span><br><span class="line"><span class="regexp">    this.tyle.background='green';</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2）IE专用：event-cancelBubble-true"><a href="#2）IE专用：event-cancelBubble-true" class="headerlink" title="2）IE专用：event.cancelBubble = true"></a>2）IE专用：event.cancelBubble = true</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：ie 里面事件对象上有一个 event.cancelBubble = <span class="literal">true</span>;能取消冒泡事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;background-color:red;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">document.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log('你闲的啊啊');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">div.onclick = function(e)&#123;</span></span><br><span class="line"><span class="regexp">    e || window.event; /</span><span class="regexp">/ 解决 ie 兼容问题</span></span><br><span class="line"><span class="regexp">    e.cancelBubble = true;</span></span><br><span class="line"><span class="regexp">    this.tyle.background='green';</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="封装取消冒泡函数-stopBubble-event"><a href="#封装取消冒泡函数-stopBubble-event" class="headerlink" title="封装取消冒泡函数 stopBubble(event)"></a>封装取消冒泡函数 stopBubble(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span>(event.stopPropagation)&#123;</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、阻止默认事件"><a href="#二、阻止默认事件" class="headerlink" title="二、阻止默认事件"></a>二、阻止默认事件</h3><h4 id="什么是默认事件-–-表单提交，a-标签跳转，右键菜单等"><a href="#什么是默认事件-–-表单提交，a-标签跳转，右键菜单等" class="headerlink" title="什么是默认事件 – 表单提交，a 标签跳转，右键菜单等"></a>什么是默认事件 – 表单提交，a 标签跳转，右键菜单等</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：浏览器点击右键出菜单，是一个事件（默认事件）</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>); <span class="comment">// 在网页中鼠标右键控制台打印 'a'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1）句柄阻止默认事件方式：return-false"><a href="#1）句柄阻止默认事件方式：return-false" class="headerlink" title="1）句柄阻止默认事件方式：return false"></a>1）句柄阻止默认事件方式：return false</h4><p><em><code>兼容性非常好，以对象属性的方式注册的事件才生效（这是句柄的方式阻止默认事件，只有句柄的方式绑定事件才好使）;</code></em></p><blockquote><p>return false 是只有句柄绑定方式才可以用的阻止默认事件方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 在网页右键点击的时候不会出现菜单了，但还在控制台打印 'a'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）W3C标准：event-preventDefault"><a href="#2）W3C标准：event-preventDefault" class="headerlink" title="2）W3C标准：event.preventDefault()"></a>2）W3C标准：event.preventDefault()</h4><blockquote><p>event.preventDefault();  W3C标注，IE9以下不兼容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）兼容IE：event-returnValue-false"><a href="#3）兼容IE：event-returnValue-false" class="headerlink" title="3）兼容IE：event.returnValue = false"></a>3）兼容IE：event.returnValue = false</h4><blockquote><p>event.returnValue = false  —  兼容IE</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event; <span class="comment">// 兼容IE</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    e.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装阻止默认事件的函数-cancelHandler-event"><a href="#封装阻止默认事件的函数-cancelHandler-event" class="headerlink" title="封装阻止默认事件的函数 cancelHandler(event)"></a>封装阻止默认事件的函数 cancelHandler(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelHandler</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event &amp;&amp; event.preventDefault)&#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        widnow.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：a 标签有一个跳转的默认事件</span><br><span class="line"></span><br><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 句柄阻止方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.addEventListener(e)&#123;</span><br><span class="line">    e.preventDefault();  <span class="comment">// w3c 标准阻止方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.addEventListener(e)&#123;</span><br><span class="line">    <span class="built_in">window</span>.e.returnValue = <span class="literal">false</span>; <span class="comment">// IE阻止方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">'javascript:void(false)'</span>&gt;&lt;<span class="regexp">/a&gt; /</span><span class="regexp">/ 直接在 a 标签加入也可以</span></span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><code>非 ie 浏览器会把事件对象（记载了数据发生时的状态和信息）打包传到参数里面去</code></p><p><code>ie 浏览器在 window.evnet 里面储存事件对象</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"widht:100px;height:100px;background-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var div = document.getElementsByTagName('div')[0];</span></span><br><span class="line"><span class="regexp">div.onclick = function(e)&#123;</span></span><br><span class="line"><span class="regexp">    console.log(e); /</span><span class="regexp">/ 非 ie 浏览器会记录事件对象</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一、event-window-event-用于IE兼容"><a href="#一、event-window-event-用于IE兼容" class="headerlink" title="一、event || window.event 用于IE兼容"></a>一、event || window.event 用于IE兼容</h3><p><strong><code>window.event 用于IE，event 只能用于非 ie 浏览器</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：这是储存事件对象的兼容性写法</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// MouseEvent &#123;isTrusted: true, screenX: 966, screenY: 174, clientX: 86, clientY: 36, …&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clientX : 76</span></span><br><span class="line"><span class="comment">// clientY : 77</span></span><br><span class="line"><span class="comment">// 鼠标坐标点，可以用这个来记录鼠标坐标点</span></span><br></pre></td></tr></table></figure><blockquote><p>事件对象上有个专门的信息是存储事件源的。就是 srcElement 属性，可以查看事件源</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span> style=<span class="string">"width:100px;height:100px;background-color:red;"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span> style=<span class="string">"width:50px;height:50px;background-color:green;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'wrapper'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>点红色会执行，点绿色会冒泡执行。点红色是点击到他自己来执行;点绿色身上，触发事件的点在绿色身上，是绿色传递的，我们把</code> <strong>触发事件的地方叫做事件源。</strong></p><h3 id="事件源对象（找事件源对象的方法）"><a href="#事件源对象（找事件源对象的方法）" class="headerlink" title="事件源对象（找事件源对象的方法）"></a>事件源对象（找事件源对象的方法）</h3><p><strong>event.target</strong>  –  <em>火狐独有的;</em></p><p><strong>event.srcElement</strong>  –  <em>IE独有的;</em></p><p><strong>这俩 chrome 都有;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：时间源对象的兼容性写法</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span> style=<span class="string">"width:100px;height:100px;background-color:red;"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span> style=<span class="string">"width:50px;height:50px;background-color:green;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'wrapper'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例：我们给每个 li 绑定事件，要求点那个 li 就输出那个内容，这不涉及闭包问题</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;6&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">7</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;8&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">9</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;10&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var li = document.getElementsByTagName('li');</span></span><br><span class="line"><span class="regexp">var len = li.length;</span></span><br><span class="line"><span class="regexp">for(var i = 0;i &lt; len;i ++)&#123;</span></span><br><span class="line"><span class="regexp">    li[i].onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log(this.innerText);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面的写法不是很好（如果是三千亿个li就没有效率了）不能动态，要用事件源和事件冒泡解决</span></span><br></pre></td></tr></table></figure><p><strong>事件委托：利用事件冒泡，和事件源对象进行处理;</strong></p><p><strong>优点：</strong></p><ol><li><p><em><code>性能 不需要循环所有的子元素一个一个绑定事件</code></em></p></li><li><p><em><code>灵活 当有新的子元素不需要重新绑定事件</code></em></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例：给每个 li 绑定事件，再增加 li 也能使用</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;6&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">7</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;8&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">9</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;10&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var ul = document.getElementsByTagName('ul')[0];</span></span><br><span class="line"><span class="regexp">ul.onclick = function(e)&#123;</span></span><br><span class="line"><span class="regexp">    var event = e || window.event;</span></span><br><span class="line"><span class="regexp">    var target = event.target || event.srcElement;</span></span><br><span class="line"><span class="regexp">    console.log(target.innerText);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>面试问题：</strong></p><p><em><strong>什么是事件捕获，一个是冒泡，一个是捕获，第二种捕获不是事件处理模型，而是一种真实的事件获取的过程，用于解决拖拽出方块的问题</strong></em></p><p><em><code>第二种捕获仅在 IE 好使，利用 div.setCapture(); 会捕获页面上发生的所有事情，都获取到自己身上。对应的用 div.releaseCapture();释放。但是方法比较老旧，一般不用。</code></em></p><h2 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><blockquote><p>不需要小驼峰和大驼峰</p></blockquote><p><strong>W3C 标准规定：click 事件只能监听左键，只能通过 mousedown 和 mouseup 来判断鼠标键;</strong></p><p><strong>如何解决 mousedown 和 click 的冲突;</strong></p><p><strong>移动端 onmousedown 不能用，只能用 touchstart，touchmove，touchend;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">onclick       | 鼠标点击事件</span><br><span class="line"></span><br><span class="line">onmousedown   | 鼠标按键被按下时执行函数</span><br><span class="line"></span><br><span class="line">onmouseup     | 鼠标按键被松开时执行函数</span><br><span class="line"></span><br><span class="line">onmousemove   | 鼠标移动到指定元素上移动时执行函数</span><br><span class="line"></span><br><span class="line">contextmenu   | 右键取消菜单事件</span><br><span class="line"></span><br><span class="line">onmouseover   | 鼠标指针移动到元素上执行函数 -- 支持冒泡</span><br><span class="line"></span><br><span class="line">onmouseout    | 鼠标在移出指针时执行函数 -- 支持冒泡</span><br><span class="line"></span><br><span class="line">onmouseenter  | 鼠标指针移动到元素上执行函数 - 不支持冒泡 - html5</span><br><span class="line"></span><br><span class="line">onmouseleave  | 鼠标在移出指针时执行函数 - 不支持冒泡 - html5</span><br><span class="line"></span><br><span class="line">ondblclick    | 当用户双击某个对象时触发</span><br></pre></td></tr></table></figure><p><strong>click = mousedown + mousemove;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例：click = mousedown + mousemove</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mousedown'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mouseup'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mousedown</span></span><br><span class="line"><span class="comment">// mouseup</span></span><br><span class="line"><span class="comment">// click</span></span><br><span class="line"></span><br><span class="line"><span class="string">`触发顺序是：mousedown、mouseup、click`</span></span><br></pre></td></tr></table></figure><p><strong>用 button 来区分鼠标的按键;</strong></p><p>只有 <code>mouseup、mousedown</code>两个事件可以区分鼠标左右键</p><p><em><code>button返回值：右键：2，左键：0，滚轮：1</code></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.button == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2,right'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.button == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'0,left'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.button == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1,middle'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><blockquote><p>触发顺序是 keydown &gt; keypress &gt; keyup</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onkeydown    | 事件会在用户按下一个键盘按键时发生</span><br><span class="line"></span><br><span class="line">onkeyup      | 事件会在键盘按键被松开时发生</span><br><span class="line"></span><br><span class="line">onkeypress   | 事件会在键盘按键被按下并释放一个键时发生</span><br></pre></td></tr></table></figure><p><strong>1）keydown 和 keypress 的区别:</strong></p><p><strong>i ：keydown 可以响应任意键盘按键，keypress 只可以响应字符类键盘按键;</strong></p><p>检测字符不准确，<code>keypress</code> 检测字符很准确。但是 <code>keydown</code> 能监控所有，包括上下左右都能监控，但是 <code>keypress</code> 只能监控字符。</p><p><code>用法：如果你想监控字符类按键，并想区分大小写，就用 keypress，如果是操作类按键的话，就用 keydown 上的 which 属性来区分按键（which：39 是给按键牌号 39，不是 ascii 码）</code></p><p><strong>ii ：keypress 返回的 ASCII 码，可以转换为相应字符;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例：连续按键盘的时候就是连续触发 keydown 和 keypress，松开触发 keyup</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keypress'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keydown'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keyup'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keydown</span></span><br><span class="line"><span class="comment">// keypress</span></span><br><span class="line"><span class="comment">// keyup</span></span><br><span class="line"></span><br><span class="line">注意：游戏触发设置在 keydown 上，机械键盘抬起速度快反馈力量大，对游戏没用</span><br></pre></td></tr></table></figure><p><strong>charCode：获取按下的键盘按键 Unicode 编码值;</strong></p><p><strong>静态 String.fromCharCode() 方法返回由指定的 Unicode 编码转换为输入的键;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：利用下面，把 Unicode 编码转成对应值</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(e.charCode));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">oninput    | 在用户输入时触发（有变化（增删改）都会触发 input 事件）</span><br><span class="line"></span><br><span class="line">onchange   | 事件会在输入的内容改变时触发（点击别的物体时触发）</span><br><span class="line"></span><br><span class="line">onfocus    | 事件在对象获得焦点时发生</span><br><span class="line"></span><br><span class="line">onblur     | 事件会在对象失去焦点时发生</span><br><span class="line"></span><br><span class="line">onreset    | 表单重置时触发</span><br><span class="line"></span><br><span class="line">onsearch   | 用户向搜索域输入文本时触发 (<span class="xml"><span class="tag">&lt;<span class="name">input="search"</span>&gt;</span>)</span></span><br><span class="line"></span><br><span class="line">onselect   | 用户选取文本时触发 (&lt;input&gt; 和 &lt;textarea&gt;)</span><br><span class="line"></span><br><span class="line">onsubmit   | 表单提交时触发</span><br><span class="line"></span><br><span class="line">onfocusin  | 元素即将获取焦点时触发</span><br><span class="line"></span><br><span class="line">onfocusout | 元素即将失去焦点时触发</span><br></pre></td></tr></table></figure><p><strong>input:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例如：input 框里面所以有变化（增删改）都会触发 input 事件</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text/css"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">input.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>change:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：change 对比鼠标聚焦，或失去焦点时，两个状态是否发生改变，如果两个状态没有改变就不触发，如果发生改变就触发</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text/css"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>];</span><br><span class="line">input.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>focus，blur:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text/css"</span> value=<span class="string">"请输入用户名"</span> style=<span class="string">"color:#999"</span> onfocus=<span class="string">"if(this.value == '请输入用户名')&#123;this.value = '';this.style.color='#424242'&#125;"</span> onblur=<span class="string">"if(this.value == '')&#123;this.value = '请输入用户名';this.style.color='#999'&#125;"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="鼠标键盘事件对象属性"><a href="#鼠标键盘事件对象属性" class="headerlink" title="鼠标键盘事件对象属性"></a>鼠标键盘事件对象属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">altKey          | 返回当事件被触发时，<span class="string">"ALT"</span> 是否被按下。</span><br><span class="line"></span><br><span class="line">button          | 返回当事件被触发时，哪个鼠标按钮被点击。</span><br><span class="line"></span><br><span class="line">clientX         | 返回当事件被触发时，鼠标指针的水平坐标。</span><br><span class="line"></span><br><span class="line">clientY         | 返回当事件被触发时，鼠标指针的垂直坐标。</span><br><span class="line"></span><br><span class="line">ctrlKey         | 返回当事件被触发时，<span class="string">"CTRL"</span> 键是否被按下。</span><br><span class="line"></span><br><span class="line">Location        | 返回按键在设备上的位置</span><br><span class="line"></span><br><span class="line">charCode        | 返回onkeypress事件触发键值的字母代码。</span><br><span class="line"></span><br><span class="line">key             | 在按下按键时返回按键的标识符。</span><br><span class="line"></span><br><span class="line">keyCode         | 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</span><br><span class="line"></span><br><span class="line">which           | 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</span><br><span class="line"></span><br><span class="line">metaKey         | 返回当事件被触发时，<span class="string">"meta"</span> 键是否被按下。</span><br><span class="line"></span><br><span class="line">relatedTarget   | 返回与事件的目标节点相关的节点。</span><br><span class="line"></span><br><span class="line">screenX         | 返回当某个事件被触发时，鼠标指针的水平坐标。</span><br><span class="line"></span><br><span class="line">screenY         | 返回当某个事件被触发时，鼠标指针的垂直坐标。</span><br><span class="line"></span><br><span class="line">shiftKey        | 返回当事件被触发时，<span class="string">"SHIFT"</span> 键是否被按下。</span><br></pre></td></tr></table></figure><h3 id="窗体操作类（window-上的事件）onscroll，onload"><a href="#窗体操作类（window-上的事件）onscroll，onload" class="headerlink" title="窗体操作类（window 上的事件）onscroll，onload"></a>窗体操作类（window 上的事件）onscroll，onload</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onload    |  事件会在页面或图像加载完成后立即发生（所有页面加载完毕，才能执行）</span><br><span class="line"></span><br><span class="line">onscroll  |  事件在元素滚动条在滚动时触发</span><br></pre></td></tr></table></figure><p><strong>onscroll:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：scroll 当滚动条一滚动，scroll 事件就触发了</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.pageXOffset + <span class="string">" "</span> + <span class="built_in">window</span>.pageYOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ie6</code>没有fixed定位，就用<code>position</code>的<code>top = 原来的 top + 滚动条的位置</code>来写。<code>absolute</code>定位相对于文档定位，就用<code>absolute</code>定位模拟<code>fixed</code>定位，挪动距离加载<code>absolute</code>的<code>top</code>上读到<code>js</code>的时候就阻断页面，所以必须把<code>js</code>写在下面才能把上面的东西读出来</p><p><strong>onload:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：load重要但是不用。<span class="built_in">window</span>.onload 发生在什么时候</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(div);</span><br><span class="line">    div.style.width = <span class="string">'100px'</span>;</span><br><span class="line">    div.style.height = <span class="string">'100px'</span>;</span><br><span class="line">    div.style.backgroundColor = <span class="string">'red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用了 onload 就能操作写在下面的 div 了，但是我们不能这样用</p><blockquote><p>理由：html 和 css 是一起解析的，在解析的时候会有 html 有 domTree，css 有 cssTree 生成（树形图的顶底是 document，然后是html，然后是 head，body） ，两个树拼在 一起是 renderTree</p></blockquote><p><code>什么时候把节点放在树里？dom节点解析，如确定是 img 标签就把他放到树里。（先 解析完 img，同时开启一个线程异步的去下载里面的内容，后下载完）</code></p><p><code>我们把 js 的 script 标签写在最下面的好处是，这些刚刚解析完 js 就能操作页面了， 就更快了。而 window.onload 要等整个页面解析完，下载完才能操作 js，才能触发事 件（效率很差） onload 能提醒我们什么时候整个页面解析完毕。在设计广告时，就 要用 onload，等整个页面下载完了才开始用，但是onload 绝对用于主程序里面</code></p><h2 id="练习总结"><a href="#练习总结" class="headerlink" title="练习总结"></a>练习总结</h2><h3 id="一、封装拖拽元素函数（不兼容）"><a href="#一、封装拖拽元素函数（不兼容）" class="headerlink" title="一、封装拖拽元素函数（不兼容）"></a>一、封装拖拽元素函数（不兼容）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    addEventListener(elem, <span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> diX = e.clientX - elem.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> diY = e.clientY - elem.offsetTop;</span><br><span class="line">        elem.addEventListener(<span class="string">'mousemove'</span>, mouseMove, <span class="literal">false</span>);</span><br><span class="line">        elem.addEventListener(<span class="string">'mouseup'</span>, mouseUp, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseMove</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || widow.event;</span><br><span class="line">        <span class="keyword">var</span> left = e.clientX - diX;</span><br><span class="line">        <span class="keyword">var</span> top = e.clientY - diY;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="built_in">window</span>.innerWidth - elem.innerWidth) &#123;</span><br><span class="line">            left = <span class="built_in">window</span>.innerWidth - elem.innerWidth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            top = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; <span class="built_in">window</span>.innerHeight - elem.innerHeight) &#123;</span><br><span class="line">            top = <span class="built_in">window</span>.innerHeight - elem.innerHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        elem.style.left = left + <span class="string">'px'</span></span><br><span class="line">        elem.style.top = top + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseUp</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        elem.removeEventListener(<span class="string">'click'</span>, mouseMove, <span class="literal">false</span>);</span><br><span class="line">        elem.removeEventListener(<span class="string">'click'</span>, mouseUp, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、输入框功能完善"><a href="#二、输入框功能完善" class="headerlink" title="二、输入框功能完善"></a>二、输入框功能完善</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">"请输入用户名"</span> style=<span class="string">"color:#999"</span></span><br><span class="line">onfocus=<span class="string">"if(this.value == '请输入用户名')&#123;this.value = '';this.style.color = '#424242'&#125;"</span></span><br><span class="line">onblur=<span class="string">"if(this.value == '')&#123;this.value = '请输入用户名';this.style.color = '#999'&#125;"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="三、提取密码框的密码"><a href="#三、提取密码框的密码" class="headerlink" title="三、提取密码框的密码"></a>三、提取密码框的密码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>];</span><br><span class="line">input.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="built_in">String</span>.fromCharCode(e.charCode);</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、轮播图"><a href="#四、轮播图" class="headerlink" title="四、轮播图"></a>四、轮播图</h3><h3 id="五、贪吃蛇游戏"><a href="#五、贪吃蛇游戏" class="headerlink" title="五、贪吃蛇游戏"></a>五、贪吃蛇游戏</h3><h3 id="六、扫雷游戏"><a href="#六、扫雷游戏" class="headerlink" title="六、扫雷游戏"></a>六、扫雷游戏</h3><h1 id="JSON和异步加载js"><a href="#JSON和异步加载js" class="headerlink" title="JSON和异步加载js"></a>JSON和异步加载js</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>JSON是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json是用来传输的）</strong></p><ol><li><p><code>JSON.parse();    JSON ————&gt; String</code></p></li><li><p><code>JSON.stringify();   String ————&gt; JSON</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例如：json的属性名必须加双引号（传的是二进制文本）</span><br><span class="line"></span><br><span class="line"><span class="string">`json 格式`</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"deng"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"abc"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.stringify(obj)</span></span><br><span class="line"><span class="comment">// "&#123;"name":"abc","age":"123"&#125;"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"abc"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// str</span></span><br><span class="line"><span class="comment">// "&#123;"name":"abc","age":"123"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse(str)</span></span><br><span class="line"><span class="comment">// Object &#123;name: "abc", age: 123&#125;</span></span><br></pre></td></tr></table></figure><h2 id="异步加载Js"><a href="#异步加载Js" class="headerlink" title="异步加载Js"></a>异步加载Js</h2><blockquote><p>js是单线程的，会阻断 HTML，css 加载（因为js会修改 html 和 css 一起加载会乱），所以是同步加载 js。先下载 js，在下载 HTML 和 css。<strong>常规来说 js 是同步加载的，所以我们讲讲 js 异步加载的情况;</strong></p></blockquote><p><strong>js加载的缺点：加载工具方法没必要阻塞文档，过的 js 加载会影响页面效率，一旦网速不好，那么整个网站将等待 js 加载而不进行后续渲染等工作;</strong></p><p><strong>有些工具方法需要按需加载，用到再加载，不用不加载;</strong></p><p>javascript 异步加载的三种方案</p><h3 id="一、IE专用-defer"><a href="#一、IE专用-defer" class="headerlink" title="一、IE专用 defer"></a>一、IE专用 defer</h3><p><code>defer</code><strong>异步加载，但要等到 dom 文档全部解析完成（dom 树生成完）才会被执行。只有 IE 能用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> scr=<span class="string">"xxx"</span> defer=<span class="string">"defer"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" scr="</span>xxx<span class="string">" defer="</span>defer<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    console.log('a');</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`两种方法,可以在内部用，也可以再外部用`</span></span><br></pre></td></tr></table></figure><h3 id="二、w3c标准-async"><a href="#二、w3c标准-async" class="headerlink" title="二、w3c标准 async"></a>二、w3c标准 async</h3><p><code>async</code> <strong>异步加载，加载完就执行，async 只能加载外部脚本，不能把 js 写在 script 标签里，ie9 以上可以用，w3c 标准</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> scr=<span class="string">"xxx"</span> <span class="keyword">async</span>=<span class="string">"async"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">`只有一种方法,只能加载外部脚本`</span></span><br></pre></td></tr></table></figure><h3 id="三、创建-script"><a href="#三、创建-script" class="headerlink" title="三、创建 script"></a>三、创建 script</h3><p>创建<code>script</code>，插入到 DOM 中，加载完毕后<code>callBack</code>（按需加载，方便） –&gt;  常用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">script.src = <span class="string">'tools.js'</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 如果不写这一段，就是只加载，不执行，像这样写了执行以后才执行</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    test(); <span class="comment">// 这个test函数是 tools.js 里面的函数，执行的是tools.js的函数</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>为什么要用 setTimeout（定时器）呢？因为还没有下载完成，因为程序执行时非常快的，当程序读到 document.head 读到 test(); 时，上面的 script.type 和 script.src 还没有下载完，所以执行不了。所以，能不能有一个东西提示我们，他下载完了我们再用?</p></blockquote><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><code>用 onload 方法</code></p><p>非 <code>ie</code> 方法，<code>script.onload = function(){}</code>,触发 <code>script.onload</code> 事件就代表他下载完了，当他们下载完了再执行 <code>test</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">script.src = <span class="string">'tools.js'</span>;</span><br><span class="line">script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    test(); <span class="comment">// test 函数是 tools.js 的函数，执行的也是 tools.js 的函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><code>ie 上有一个状态码，script.readyState，功能与 script.onlaod 相似。</code></p><p><strong>script.readyState = ‘loading’; 最开始的值;</strong></p><p><strong>script.readyState = ‘complete’ 或者 ‘leaded’ 表示加载完成;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">我们封装一个函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    <span class="keyword">if</span>(script.readyState)&#123;</span><br><span class="line">        script.onreadystatechenge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">'complete'</span> || script.readyState == <span class="string">'loaded'</span>)&#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间里面有一个绑定的事件处理函数，当满足一定执行条件才执行的函数叫做回调函数，回调函数叫 callback</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;…&#125;</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">'tools.js'</span>,test); <span class="comment">// test 是 tools.js 里面的函数，调用的是 tools.js 的函数</span></span><br><span class="line"><span class="comment">// 从控制台输出：报错</span></span><br><span class="line"></span><br><span class="line">执行顺序：先 <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params"></span>)</span>&#123;&#125;【不会看里面的代码是什么】</span><br><span class="line">再 loadScript() 【这一步的时候不知道 test 是什么】</span><br><span class="line">然后执行<span class="string">`function`</span>里面的内容，为了解决上面的问题，如下例：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;…&#125;</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">'tools.js'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">这样，用一个<span class="string">`function`</span>来做第二个参数，而<span class="string">`function`</span>里面则执行函数，这样也没有问题</span><br></pre></td></tr></table></figure><h1 id="js时间线"><a href="#js时间线" class="headerlink" title="js时间线"></a>js时间线</h1><p><code>js加载时间线：依据 js 出生的那一刻起，记录了一系列浏览器按照顺序做的事情（就是一个执行顺序）</code></p><p><strong>时间线步骤（创建 document 对象 ==&gt; 文档解析完 ==&gt; 文档解析完加载完执行完）:</strong></p><ol><li><p>创建<code>Document</code>对象，开始解析<code>web</code>页面。解析<code>HTML</code>元素和他们的文本内容后添加<code>Element</code>对象和<code>Text</code>节点到文档中。这个阶段<code>document.readyState = &#39;loading&#39;</code>。</p></li><li><p>遇到<code>link</code>外部<code>css</code>创建线程，进行异步加载，并继续解析文档。</p></li><li><p>遇到<code>script</code>外部<code>js</code>,并且没有设置<code>async</code>、<code>defer</code>,浏览器同步加载，并阻塞，等待 js 加载完成并执行该脚本，然后继续解析文档。</p></li><li><p>遇到<code>script</code>外部 <code>js</code>，并且设置有<code>async、defer</code>，浏览器创建线程异步加载，并继续解析文档。<br>对于<code>async</code>属性的脚本，脚本加载完成后立即执行。（异步禁止使用 document.write()<code>，</code>因为当你整个文档解析到差不多，再调用<code>document.write()</code>会把之前所有的文档流都清空，用里面的文档代替）</p></li><li><p>遇到<code>img</code>等（带有<code>src</code>），先正常解析 dom 结构，然后浏览器异步加载<code>src</code>，并继续解析文档。看到标签直接生产<code>dom</code>树，不用等着<code>img</code>加载完<code>src</code>。</p></li><li><p>当文档解析完成（<code>domTree</code>建立完毕，不是加载完毕），<code>document.readyState = &#39;interactive&#39;</code>。</p></li><li><p>文档解析完成后，所有设置有 defer 的脚本会按照顺序执行。（注意与<code>async</code>的不同，但同样禁止使用<code>document.write()</code>）;</p></li><li><p><code>document</code>对象触发<code>DOMContentLoaded</code>事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。</p></li><li><p>当所有<code>async</code>的脚本加载完成并执行后、<code>img</code>等加载完成后（页面所有的都执行加载完之后），<code>document.readyState = &#39;complete&#39;，&#39;window&#39;</code>对象触发<code>load</code> 事件。</p></li><li><p>从此，以异步响应方式处理用户输入、网络事件等。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：异步加载禁止使用 <span class="built_in">document</span>.write()</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;bakground-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 用window.onload 会等整个页面执行加载完才执行，消除文档流（把自己都给删了）</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">        document.write('a');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：执行到 <span class="built_in">document</span>.readyState 时，整个 dom 树还没有解析完成，所以不会是 interactive</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;bakground-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    console.log(document.readyState);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 从控制台输出：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt; loading</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &gt; loading</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：我们就利用 <span class="built_in">window</span>.onload 事件，看到的是 complete,代表执行加载完</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;bakground-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 用window.onload 会等整个页面执行加载完才执行，消除文档流（把自己都给删了）</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    console.log(document.readyState);</span></span><br><span class="line"><span class="regexp">    window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">        console.log(document.readyState);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; complete</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例：如果想要看到 interactive，就用 onreadystatechenge 事件。</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;bakground-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    console.log(document.readyState);</span></span><br><span class="line"><span class="regexp">    document.onreadystatechenge = function () &#123; /</span><span class="regexp">/ 所有事件都是用小写</span></span><br><span class="line"><span class="regexp">        console.log(document.readayState);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; interactive</span></span><br><span class="line"><span class="comment">// &gt; complete</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例：DOMContentloadend 事件只能用在 addEvventListener 事件绑定上面</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:100px;height:100px;bakground-color:red"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    console.log(document.readyState);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    document.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="regexp">        console.log(document.readyState);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    document.addEventListener('DOMContentloaded',function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('a');</span></span><br><span class="line"><span class="regexp">    &#125;,false);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; interactive</span></span><br><span class="line"><span class="comment">// &gt; a</span></span><br><span class="line"><span class="comment">// &gt; complete</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">通用写法是把 JS 的 script 写在最下面，为什么我们要把他写在最下面？</span><br><span class="line"></span><br><span class="line">写在最下面意味着上面的 dom 已经处理完毕了。<span class="built_in">window</span>.onload 是整个页面加载完才执行，慢等 dom 解析完毕等执行完就执行，比较快。如下</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload <span class="comment">// : 区别：慢，只要有一个图片没有加载完，window.onload 就不能用，所以效率非常低下</span></span><br><span class="line"></span><br><span class="line">script 标签写在上面。既能操作 div，又能 dom 解析完就处理，效率很高。但是最好还是写在最下面</span><br><span class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoad'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(div);</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1 id="RegExp-正则表达式"><a href="#RegExp-正则表达式" class="headerlink" title="RegExp 正则表达式"></a>RegExp 正则表达式</h1><p><strong>正则表达式的作用</strong>：匹配特殊字符或有特殊搭配原则的字符的最佳选择</p><p><code>RegExp</code>对象表示正则表达式，它是对字符串执行模式匹配的强大工具（判断字符串满不满要求）。正则表达式其他语言也有，规则是一样的，在这个基础上，<code>js</code>增加了自己独特的方法</p><h2 id="创建正则表达式的方法"><a href="#创建正则表达式的方法" class="headerlink" title="创建正则表达式的方法"></a>创建正则表达式的方法</h2><h3 id="第一种方法：正则表达式字面量"><a href="#第一种方法：正则表达式字面量" class="headerlink" title="第一种方法：正则表达式字面量 //"></a>第一种方法：正则表达式字面量 //</h3><p><strong>正则表达式字面量：</strong><code>var 变量 = /表达式/;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：意思是正则表达式测验一下字符串含不含有我规定的片段</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>; <span class="comment">// 我规定的片段</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// 我测验一下 str 里面有没有我规定片段的片段，如果有返回 true，如果没有 false</span></span><br><span class="line"><span class="comment">// &gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abce/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// &gt; false,顺序不对或者没有挨着，都是不算的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：像下面这种，虽然都有 abce，但是没挨着，或者排序不对，都不算</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abce/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcde'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// false, 顺序不对</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abababab'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['ab'], match 是 str 的方法，可以查看 str 匹配 reg 的内容</span></span><br></pre></td></tr></table></figure><h3 id="第二种方法：new-RegExp"><a href="#第二种方法：new-RegExp" class="headerlink" title="第二种方法：new RegExp()"></a>第二种方法：new RegExp()</h3><p><strong>new RegExp方法：</strong><code>var reg = new RegExp(&#39;pattern&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：括号里面写的规则</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'abc'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下面是给正则表达式增加属性的方法</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'abc'</span>,<span class="string">'m'</span>);</span><br></pre></td></tr></table></figure><h2 id="正则表达式-3种-属性（修饰符）"><a href="#正则表达式-3种-属性（修饰符）" class="headerlink" title="正则表达式 3种 属性（修饰符）"></a>正则表达式 3种 属性（修饰符）</h2><p><strong><code>i</code></strong> <em>是 ignoreCase的缩写，是</em><strong>忽视大小写的意思</strong>，例如:<code>var reg = /abce/i;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abce/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ABCEd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong><code>g</code></strong> <strong>是全局匹配的意思，</strong>_选择全部的东西，例如：_<code>var reg = /abce/g;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ababababab'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['ab']</span></span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ababababab'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(str));</span><br><span class="line"><span class="comment">// ['ab','ab','ab','ab','ab']</span></span><br></pre></td></tr></table></figure><p><strong><code>m</code> 是执行多行匹配</strong>_，例如：_<code>var reg = /abce/m;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：^a 的意思是必须是 a 开头的</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/gm</span>; <span class="comment">// g是全局匹配，选择全部的东西</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcde\na'</span>; <span class="comment">// \n 是换行的意思，转义字符,就是实际上已经是两行了</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['a','a'];</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式的表达式"><a href="#正则表达式的表达式" class="headerlink" title="正则表达式的表达式"></a>正则表达式的表达式</h2><ol><li><p><code>reg.test()</code><strong>只能判断这个字符有没有符合要求的判断，返回的结果只有</strong><code>true</code><strong>和</strong><code>false</code></p></li><li><p><code>str.match()</code><strong>可以把所有的东西匹配出来，返回给你，比上一种方法更直观，还能告诉你返回了多少个</strong></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">概况             | 表达式代表的是区间 范围 代表一位                                                     |</span><br><span class="line">[]                 | 标记一个中括号表达式的开始。要匹配 [请使用\[转义一下</span><br><span class="line">[^]                | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 &#39;\n&#39; 或 &#39;\r&#39; 之后的位置。 |</span><br><span class="line">[a-z]             | 字符范围。匹配指定范围内的任意字符。例如，&#39;[a-z]&#39; 可以匹配 &#39;a&#39; 到 &#39;z&#39; 范围内的任意小写字母字符。          |</span><br><span class="line">[A-Z]             | 字符范围。匹配指定范围内的任意字符。例如，&#39;[A-A]&#39; 可以匹配 &#39;A&#39; 到 &#39;Z&#39; 范围内的任意小写字母字符。          |</span><br><span class="line">[0-9]             | 字符范围。匹配指定范围内的任意字符。例如，&#39;[0-9]&#39; 可以匹配 &#39;0&#39; 到 &#39;9&#39; 范围内的任意小写字母字符。          |</span><br><span class="line">(red\|blue\|green\) | 或                                                        |</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：想把一、二、三位都是数字都匹配出来，不同，可变化的数字，可以用 [] 来写，</span><br><span class="line">一个 [] 可以代表一个数，[] 里面放的是范围，是一个区间，如 [<span class="number">1234567890</span>] ，</span><br><span class="line">如下图：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[1234567890][1234567890][1234567890]/g</span>;</span><br><span class="line"><span class="comment">// 里面放了3个[],就代表可以匹配3个数字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'123adsf654as8df56d4f'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['123','654'];</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[ab][cd][d]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['bcd']，指的是和 ab、cd、d匹配的数字</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：<span class="number">0</span><span class="number">-9</span> 是指 <span class="number">0</span> 到 <span class="number">9</span>，A-Z 是指大 A 到 Z，a-z 是指小 a - z</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[0-9A-Za-z][cd][d]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span></span><br><span class="line"><span class="comment">// 就相当于字符和数字全部匹配了，也可以 A-z,直接从大A到小z</span></span><br><span class="line"><span class="comment">// 这是按 ASCII 码排序的，从大写到小可以写成 A-z</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[0-9A-z][cd][d]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ab1cd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [1cd]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：^ 在正则表达式里面和外面的意思不一样，在正则表达式里面是 非 的意思</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^a][^b]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ab1cd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['b1','cd']，就是打印出不是 a 开头的和 b 开头的东西</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：| 在正则表达式种是 或 的意思</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(abc|bcd)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['abc']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(abc|bcd)[0-9]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'bcd2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['bcd2']</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式的元字符"><a href="#正则表达式的元字符" class="headerlink" title="正则表达式的元字符"></a>正则表达式的元字符</h2><p><strong>正则表达式的元字符和表达式是要给东西;</strong></p><p><strong>元字符（Metacharacter）是拥有特殊含义的字符;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">字符            | 描述</span><br><span class="line"></span><br><span class="line">\               | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符</span><br><span class="line"></span><br><span class="line">()              | 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)</span><br><span class="line"></span><br><span class="line">&#123;&#125;              | 标记限定符表达式的开始。要匹配 &#123;，请使用 \&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n$              | 匹配任何结尾为 n 的字符串。 匹配输入字符串的结束位置。如果设置了<span class="built_in">RegExp</span> 对象的 Multiline 属性，$ 也匹配 <span class="string">'\n'</span> 或 <span class="string">'\r'</span> 之前的位置。</span><br><span class="line"></span><br><span class="line">$n              | 代表第几个子表达式的内容，比如：$<span class="number">1</span> 代表第一个子表达式的内容</span><br><span class="line"></span><br><span class="line">n*              | 匹配任何包含零个或多个 n 的字符串。这个变量可以出现 <span class="number">0</span> 到无数次。 匹配前面的子表达式零次或多次。例如，zo* 能匹配 <span class="string">"z"</span> 以及 <span class="string">"zoo"</span>。* 等价于&#123;<span class="number">0</span>,&#125;</span><br><span class="line"></span><br><span class="line">n+              | 匹配任何包含至少一个 n 的字符串。这个变量可以出现 <span class="number">1</span> 到无数次。 匹配前面的子表达式一次或多次。例如，<span class="string">'zo+'</span> 能匹配 <span class="string">"zo"</span> 以及 <span class="string">"zoo"</span>，但不能匹配 <span class="string">"z"</span>。+ 等价于 &#123;<span class="number">1</span>,&#125;</span><br><span class="line"></span><br><span class="line">n?              | 匹配任何包含零个或一个 n 的字符串。这个变量 <span class="number">0</span>或 <span class="number">1</span> 个一匹配。匹配前面的子表达式零次或一次。例如，<span class="string">"do(es)?"</span> 可以匹配 <span class="string">"do"</span> 或 <span class="string">"does"</span> 中的<span class="string">"do"</span> 。? 等价于 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"></span><br><span class="line">n&#123;X&#125;            | 匹配包含 X 个 n 的序列的字符串。n 是一个非负整数。匹配确定的 n 次。例如，<span class="string">'o&#123;2&#125;'</span> 不能匹配 <span class="string">"Bob"</span> 中的 <span class="string">'o'</span>，但是能匹配 <span class="string">"food"</span> 中的两个 o。</span><br><span class="line"></span><br><span class="line">n&#123;X,&#125;           | 匹配包含至少 X 个 n 的序列的字符串。n 是一个非负整数。至少匹配n 次。例如，<span class="string">'o&#123;2,&#125;'</span> 不能匹配 <span class="string">"Bob"</span> 中的 <span class="string">'o'</span>，但能匹配 <span class="string">"foooood"</span> 中的所有 o。<span class="string">'o&#123;1,&#125;'</span> 等价于 <span class="string">'o+'</span>。<span class="string">'o&#123;0,&#125;'</span> 则等价于 <span class="string">'o*'</span>。</span><br><span class="line"></span><br><span class="line">n&#123;X,Y&#125;          | 匹配包含 X 至 Y 个 n 的序列的字符串。m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，<span class="string">"o&#123;1,3&#125;"</span> 将匹配 <span class="string">"fooooood"</span> 中的前三个 o。<span class="string">'o&#123;0,1&#125;'</span> 等价于 <span class="string">'o?'</span>。请注意在逗号和两个数之间不能有空格。</span><br><span class="line"></span><br><span class="line">n?              | 匹配任何包含零个或一个 n 的字符串。这个变量 <span class="number">0</span> 或 <span class="number">1</span> 个一匹配。 当该字符紧跟在任何一个其他限制符 (*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 <span class="string">"oooo"</span>，<span class="string">'o+?'</span> 将匹配单个 <span class="string">"o"</span>，而 <span class="string">'o+'</span> 将匹配所有 <span class="string">'o'</span>。</span><br><span class="line"></span><br><span class="line">.               | 查找单个字符，除了换行和行结束符。匹配除 <span class="string">"\n"</span> 和 <span class="string">"\r"</span> 之外的任何单个字符。要匹配包括 <span class="string">'\n'</span> 和 <span class="string">"\r"</span> 在内的任何字符，请使用象 <span class="string">'[.\n\r]'</span> 的模式。</span><br><span class="line"></span><br><span class="line">(?:pattern)     | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 <span class="string">"或"</span> 字符 (|) 来组合一个模式的各个部分是很有用。例如， <span class="string">'industr(?:y|ies)'</span> 就是一个比 <span class="string">'industry|industries'</span> 更简略的表达式。</span><br><span class="line"></span><br><span class="line">(?=n)           | 匹配任何其后紧接指定字符串 n 的字符串。正向预查，在任何匹配 n 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，<span class="string">'Windows (?=95|98|NT|2000)'</span> 能匹配 <span class="string">"Windows 2000"</span> 中的 <span class="string">"Windows"</span> ，但不能匹配 <span class="string">"Windows 3.1"</span> 中的 <span class="string">"Windows"</span>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span><br><span class="line"></span><br><span class="line">(?!n)           | 匹配任何其后没有紧接指定字符串 n 的字符串。后面不跟着 n 负向预查，在任何不匹配 n 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如<span class="string">'Windows (?!95|98|NT|2000)'</span> 能匹配 <span class="string">"Windows 3.1"</span> 中的 <span class="string">"Windows"</span>，但不能匹配 <span class="string">"Windows 2000"</span> 中的 <span class="string">"Windows"</span>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span><br><span class="line"></span><br><span class="line">x|y             | 形容或。匹配 x 或 y。例如，<span class="string">'z|food'</span> 能匹配 <span class="string">"z"</span> 或 <span class="string">"food"</span>。<span class="string">'(z|f)ood'</span> 则匹配 <span class="string">"zood"</span> 或 <span class="string">"food"</span>。</span><br><span class="line"></span><br><span class="line">[^a-z]          | 形容非，负值字符范围。匹配任何不在指定范围内的任意字符。例如，<span class="string">'[^a-z]'</span> 就是匹配任何不在 <span class="string">'a'</span> 到 <span class="string">'z'</span> 范围内的任意字符。</span><br><span class="line"></span><br><span class="line">\cx             | 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 <span class="string">'c'</span> 字符。</span><br><span class="line"></span><br><span class="line">\b              | 匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class="string">'er\b'</span> 可以匹配<span class="string">"never"</span> 中的 <span class="string">'er'</span>，但不能匹配 <span class="string">"verb"</span> 中的 <span class="string">'er'</span>。</span><br><span class="line"></span><br><span class="line">\B              | 匹配非单词边界。<span class="string">'er\B'</span> 能匹配 <span class="string">"verb"</span> 中的 <span class="string">'er'</span>，但不能匹配 <span class="string">"never"</span> 中的 <span class="string">'er'</span>。</span><br><span class="line"></span><br><span class="line">\s              | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</span><br><span class="line"></span><br><span class="line">    \n              | 匹配一个换行符。等价于 \x0a 和 \cJ。</span><br><span class="line">    \f              | 匹配一个换页符。等价于 \x0c 和 \cL。</span><br><span class="line">    \v              | 匹配一个垂直制表符。等价于 \x0b 和 \cK。</span><br><span class="line">    \r              | 匹配一个回车符。等价于 \x0d 和 \cM。</span><br><span class="line">    \t              | 匹配一个制表符。等价于 \x09 和 \cI</span><br><span class="line"></span><br><span class="line">\S              | 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]</span><br><span class="line"></span><br><span class="line">\d              | 匹配一个数字字符。等价于 [<span class="number">0</span><span class="number">-9</span>]。</span><br><span class="line"></span><br><span class="line">\D              | 匹配一个非数字字符。等价于 [^<span class="number">0</span><span class="number">-9</span>]。</span><br><span class="line"></span><br><span class="line">\w              | 匹配包括下划线的任何单词字符。就是于<span class="string">'[A-Za-z0-9_]'</span></span><br><span class="line"></span><br><span class="line">\W              | 匹配任何非单词字符。等价于 <span class="string">'[^A-Za-z0-9_]'</span>。</span><br><span class="line"></span><br><span class="line">\n              | 标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (<span class="number">0</span><span class="number">-7</span>)，则 n 为一个八进制转义值。</span><br><span class="line"></span><br><span class="line">\uxxxx          | 查找以十六进制数 xxxx 规定的 Unicode 字符。 匹配 xxxx，其中 xxxx 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)</span><br><span class="line"></span><br><span class="line">贪婪匹配        | 贪婪匹配。变成贪婪匹配（能少就不多），在量词后面加个<span class="string">'？'</span>号。例如：<span class="keyword">var</span> reg = <span class="regexp">/a+?/g</span>;</span><br><span class="line"></span><br><span class="line">懒惰性          | 懒惰性则是正则在成功捕获一次后不管后边的字符串有没有符合条件的都不再捕获。如果想捕获目标中所有符合条件的字符串的话，我们可以用标识符g来标明是全局捕获</span><br></pre></td></tr></table></figure><p><strong>运算符的优先级：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`从左到右进行运算,不同优先级的运算先高后低:`</span></span><br><span class="line"></span><br><span class="line">运算符                          | 描述</span><br><span class="line"></span><br><span class="line">\                               | 转义符</span><br><span class="line"></span><br><span class="line">(), (?:), (?=), []              | 圆括号和方括号</span><br><span class="line"></span><br><span class="line">*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;       | 限定符</span><br><span class="line"></span><br><span class="line">^, $, \任何元字符、任何字符      | 定位点和序列（即：位置和顺序）</span><br><span class="line"></span><br><span class="line">|                               | 替换，<span class="string">"或"</span>操作字符具有高于替换运算符的优先级，使得<span class="string">"m|food"</span>匹配<span class="string">"m"</span>或<span class="string">"food"</span>。若要匹配<span class="string">"mood"</span>或<span class="string">"food"</span>，请使用括号创建子表达式，从而产生<span class="string">"(m|f)ood"</span>。</span><br></pre></td></tr></table></figure><h2 id="RegExp-对象方法、属性"><a href="#RegExp-对象方法、属性" class="headerlink" title="RegExp 对象方法、属性"></a>RegExp 对象方法、属性</h2><p><strong>RegExp 对象方法属性（FF是火狐浏览器，IE 的 ie 浏览器，从哪个版本开始兼容）;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">属性        | 描述</span><br><span class="line"></span><br><span class="line">global      | <span class="built_in">RegExp</span> 对象是否具有标志 g，进行全局匹配</span><br><span class="line"></span><br><span class="line">ignoreCase  | <span class="built_in">RegExp</span> 对象是否具有标志 i，不区分大小写</span><br><span class="line"></span><br><span class="line">input       | 被匹配的串</span><br><span class="line"></span><br><span class="line">lastIndex   | 一个整数，标示开始下一次匹配的字符位置</span><br><span class="line"></span><br><span class="line">lastParen   | 被最后一个括号括起来的子串</span><br><span class="line"></span><br><span class="line">lastContent | 最近一次匹配以左的子串</span><br><span class="line"></span><br><span class="line">multiline   | <span class="built_in">RegExp</span> 对象是否具有标志 m，进行多行匹配</span><br><span class="line"></span><br><span class="line">source      | 正则表达式的源文本</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方法        | 描述</span><br><span class="line"></span><br><span class="line">compile     | 编译正则表达式</span><br><span class="line"></span><br><span class="line">exec        | 检索字符串中指定的值。返回找到的值，并确定位置</span><br><span class="line"></span><br><span class="line">test        | 检索字符串中指定的值</span><br><span class="line"></span><br><span class="line">match       | 找到一个或多个正则表达式的匹配</span><br><span class="line"></span><br><span class="line">search      | 检索与正则表达式相匹配的值，返回的不是 <span class="number">-1</span> 都匹配成功了，返回的是匹配这个东西的位置</span><br><span class="line"></span><br><span class="line">split       | 把字符串分割为字符串数组</span><br><span class="line"></span><br><span class="line">replace     | 替换和正则表达式匹配的字符串，replace 的精华是正则表达式</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>*？意思是能取 0，就不取多</p></li><li><p>想匹配空格，直接写，就可以了</p></li><li><p>想把选中的字符替换成$，直接写$是不行的，需要加上转义字符$</p><p> 由于在替换文本里面$有了特殊的含义（$代表反向引用），如果想要是替换 $ 这个字符的话，需要写成 $$，充当转义字符</p></li><li><p>正则表达式要匹配一个反向引用的东西，写\</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'aa\\aaaa'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\\/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['\']</span></span><br></pre></td></tr></table></figure></li><li><p>在正则表达式里面要匹配问号？写? 其余*+-()星号加号减号都类似</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'aa?aaaa'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\?/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ['?']</span></span><br></pre></td></tr></table></figure><ol start="6"><li>正则表达式应用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//验证邮码   100010（不可以以0开头的6位数）</span></span><br><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">5</span>&#125;$/</span><br><span class="line"><span class="comment">//验证手机号</span></span><br><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">10</span>&#125;$/</span><br><span class="line"><span class="comment">//验证日期</span></span><br><span class="line">/^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$/</span><br><span class="line"><span class="comment">//精确 ^\d&#123;4&#125;-(0?[1-9]|1[0-2])-((0?[1-9])|((1|2)[0-9])|30|31)$</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证邮箱</span></span><br><span class="line">/\w+@\w+(\.\w+)+<span class="regexp">/</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：下面是想去重，变成 abc，先匹配一串，再取一</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'aaaaaaaaaaaabbbbbbbbbccccccccc'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg,$<span class="number">1</span>));</span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">百度招聘 <span class="number">14</span> 年最后一题:</span><br><span class="line">给 <span class="keyword">var</span> str = <span class="string">'100000000000'</span>; 这个数字科学计数法，每隔三位打点</span><br><span class="line">思路：找规律，从后往前查，每三位打个点，换个空进去【什么样的空？后面的数 一定是 <span class="number">3</span> 的倍数，(\d&#123;<span class="number">3</span>&#125;)+是 <span class="number">3</span> 的倍数位个数字，这里面的东西一到多个，第一个/ 后面的空后面加上正向预查，后面是<span class="number">3</span> 的倍数位个数字，$以什么结尾】空的后面跟 着 <span class="number">3</span> 的倍数位个数字并且以这个结尾。\B 非单词边界</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1000000000000'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;))+$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg,<span class="string">'.'</span>));</span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p><strong><code>BOM</code></strong> 是 <strong><code>brower object model</code></strong> 的缩写，简称浏览器对象模型，主要处理浏览器窗口和框架，描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，回退历史记录，获取url……。</p><h2 id="一、BOM-与-DOM（Document-Object-Model）的关系"><a href="#一、BOM-与-DOM（Document-Object-Model）的关系" class="headerlink" title="一、BOM 与 DOM（Document Object Model）的关系"></a>一、BOM 与 DOM（Document Object Model）的关系</h2><p><code>javascript</code>是通过访问<code>BOM</code>对象来访问、控制、修改浏览器</p><p><code>window</code>是BOM的属性，也就是说<code>BOM</code>的<code>window</code>包含了<code>document</code>，因此通过<code>window</code>对象的<code>document</code>属性就可以访问、检索、修改文档内容与结构</p><p><code>document</code>对象又是<code>DOM</code>模型的根节点。因此，<code>BOM</code>包含了<code>DOM</code>，浏览器提供出来给予访问的是<code>BOM</code>对象，从BOM对象再访问到<code>DOM</code>对象，从而js可以操作浏览器以及浏览器读取到的文档</p><p><code>DOM</code>的大部分内容都是<code>W3c</code>标准规范，所以兼容性很好，不需要太多的兼容性代码，而<code>BOM</code>则不一样，<code>BOM</code>没有<code>W3c</code>规范，每个浏览器厂家的规范也就不一样了。</p><h2 id="二、BOM对象包含的对象"><a href="#二、BOM对象包含的对象" class="headerlink" title="二、BOM对象包含的对象"></a>二、BOM对象包含的对象</h2><p><strong>不是说BOM下面只包含了一个window对象吗？其实BOM对象下面只有一个window对象，但是因为了解清除，所以其他四个也是比较重要的对象了;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Window      | Javascript 层级中的顶层对象，表示浏览器窗口</span><br><span class="line"></span><br><span class="line">Navigator   | 包含客户端浏览器的信息。（比如浏览器的版本号）</span><br><span class="line"></span><br><span class="line">History     | 包含了浏览器窗口访问过的URL（比如历史记录，前进、后退）</span><br><span class="line"></span><br><span class="line">Location    | 包含了当前URL的信息（地址栏中的信息）</span><br><span class="line"></span><br><span class="line">Screen      | 包含了客户端显示屏的信息（返回一些屏幕信息，基本上用不到）</span><br></pre></td></tr></table></figure><h3 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h3><p><strong><code>Window</code>对象表示一个浏览器窗口或一个框架，在客户端JavaScript中，<code>Window</code>对象是全局对象，所有的表达式都在当前的环境中计算，也就是说，要引用当前窗口根本不需要特殊的语法，可以把那个窗口的属性作为全局变量来使用。例如，可以只写<code>document</code>，而不必写<code>window.document</code>；</strong></p><h4 id="window-对象属性"><a href="#window-对象属性" class="headerlink" title="window 对象属性"></a>window 对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`closed`</span>        | 返回窗口是否已被关闭，例：<span class="built_in">window</span>.closed;</span><br><span class="line"></span><br><span class="line">defaultStatus   | 设置或返回窗口状态栏中的默认文本。（仅Opera支持）</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>        | 对 Document 对象的只读引用，请参阅 Document 对象</span><br><span class="line"></span><br><span class="line"><span class="string">`history`</span>       | 对 History 对象的只读引用。请参数 History 对象</span><br><span class="line"></span><br><span class="line"><span class="string">`innerHeight`</span>   | 返回窗口的文档显示区的高度</span><br><span class="line"></span><br><span class="line"><span class="string">`innerWidth`</span>    | 返回窗口的文档显示区的宽度</span><br><span class="line"></span><br><span class="line">length          | 设置或返回窗口中的框架数量</span><br><span class="line"></span><br><span class="line"><span class="string">`location`</span>      | 用于窗口或框架的 Location 对象，请参阅 Location 对象</span><br><span class="line"></span><br><span class="line">name            | 设置或返回窗口的名称</span><br><span class="line"></span><br><span class="line"><span class="string">`Navigator`</span>     | 对 Navigator 对象的只读引用，请参阅 Navigator 对象</span><br><span class="line"></span><br><span class="line">opener          | 返回对创建此窗口的窗口的引用</span><br><span class="line"></span><br><span class="line">outerheight     | 返回窗口的外部高度</span><br><span class="line"></span><br><span class="line">outerwidth      | 返回窗口的外部宽度</span><br><span class="line"></span><br><span class="line"><span class="string">`pageXoffset`</span>   | 设置或返回当前页面相对于窗口显示区左上角的 X 位置</span><br><span class="line"></span><br><span class="line"><span class="string">`pageYoffset`</span>   | 设置或返回当前页面相对于窗口显示区左上角的 Y 位置</span><br><span class="line"></span><br><span class="line">parent          | 返回父窗口</span><br><span class="line"></span><br><span class="line"><span class="string">`Screen`</span>        | 对 Screen 对象的只读引用，请参数 Screen 对象</span><br><span class="line"></span><br><span class="line">self            | 返回对当前窗口的引用，等价于 Window 属性</span><br><span class="line"></span><br><span class="line">status          | 设置窗口状态栏的文本（默认只支持 Opera）</span><br><span class="line"></span><br><span class="line">top             | 返回最顶层的先辈窗口</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>          | <span class="built_in">window</span> 属性等价于 self 属性，它包含了对窗口自身的引用</span><br><span class="line"></span><br><span class="line"><span class="string">`screenLeft`</span>    | 返回窗口相对于屏幕的 X 坐标。</span><br><span class="line"></span><br><span class="line"><span class="string">`screenTop`</span>     | 返回窗口相对于屏幕的 Y 坐标。</span><br><span class="line"></span><br><span class="line"><span class="string">`screenX`</span>       | 返回窗口相对于屏幕的 X 坐标。</span><br><span class="line"></span><br><span class="line"><span class="string">`screenY`</span>       | 返回窗口相对于屏幕的 Y 坐标。</span><br></pre></td></tr></table></figure><h4 id="window-对象方法"><a href="#window-对象方法" class="headerlink" title="window 对象方法"></a>window 对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`alert()`</span>           | 显示或弹出带有一段消息和一个确认按钮的警告框</span><br><span class="line"></span><br><span class="line">blur()              | 把键盘焦点从顶层窗口移开</span><br><span class="line"></span><br><span class="line">focus()             | 把键盘焦点给予一个窗口</span><br><span class="line"></span><br><span class="line"><span class="string">`setInterval()`</span>     | 按照指定的周期（以毫秒来调用函数或计算表达式），定时器</span><br><span class="line"></span><br><span class="line"><span class="string">`setTimerout()`</span>     | 在指定的毫秒数后调用函数或计算表达式，定时器，只执行一次</span><br><span class="line"></span><br><span class="line"><span class="string">`clearInterval()`</span>   | 取消由setInterval设置的定时器tiemout</span><br><span class="line"></span><br><span class="line"><span class="string">`clearTimeout()`</span>    | 取消由setTimeout设置的定时器tiemout</span><br><span class="line"></span><br><span class="line"><span class="string">`close(`</span>)           | 关闭浏览器窗口</span><br><span class="line"></span><br><span class="line"><span class="string">`confirm()`</span>         | 显示或弹出带有一段消息以及确认按钮和取消按钮的对话框，确认返回<span class="literal">true</span>，取消返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">createPopup()       | 创建一个弹出窗口，只有ie支持（不包括ie11）</span><br><span class="line"></span><br><span class="line">moveBy(x,y)         | 可相对窗口的当前坐标把它移动指定的像素，moveBy(<span class="number">100</span>,<span class="number">100</span>)中的<span class="number">100</span>就代表<span class="number">100</span>像素，可以配合 open()来时使用</span><br><span class="line"></span><br><span class="line">moveTO()            | 把窗口的左上角移动到要给指定的坐标</span><br><span class="line"></span><br><span class="line"><span class="string">`open()`</span>            | 打开一个新的浏览器窗口或查找一个已命名的窗口，<span class="built_in">window</span>.open(URL,name（窗口的名称）,features,replace),例如：open(<span class="string">'url'</span>,<span class="string">'name（窗口的名称）'</span>,<span class="string">'属性'</span>)</span><br><span class="line"></span><br><span class="line">print()             | 打印（就是打印当前页面）当前窗口内容</span><br><span class="line"></span><br><span class="line"><span class="string">`prompt()`</span>          | 显示可提示用户输入的对话框</span><br><span class="line"></span><br><span class="line"><span class="string">`resizeBy()`</span>        | 按照指定的像素调整窗口的大小</span><br><span class="line"></span><br><span class="line"><span class="string">`resizeTo()`</span>        | 把窗口的大小调整到指定宽度和高度</span><br><span class="line"></span><br><span class="line"><span class="string">`scrollBy()`</span>        | 按照指定的像素值来滚动内容</span><br><span class="line"></span><br><span class="line"><span class="string">`scrollTo()`</span>        | 把内容滚动到指定的坐标</span><br></pre></td></tr></table></figure><h3 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h3><p><strong><code>Navigator</code>对象包含的属性描述了正在使用的浏览器。可以使用这些属性进行平台专用的配置。虽然这个对象的名称显而易见的是<code>Netscape</code>的<code>Navigator</code>浏览器，但其他实现了<code>JavaScript</code>的浏览器也支持这个对象</strong></p><h4 id="Navigator-对象属性"><a href="#Navigator-对象属性" class="headerlink" title="Navigator 对象属性"></a>Navigator 对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">appCodeName      | 返回浏览器的代码名。以 Netscape 代码为基础的浏览器中，它的值是<span class="string">"Mozila"</span>。为兼容Microsoft也是</span><br><span class="line"></span><br><span class="line">appMinorVersion  | 返回浏览器的次级版本。（IE4、Opera支持）</span><br><span class="line"></span><br><span class="line">appName          | 返回浏览器的名称</span><br><span class="line"></span><br><span class="line">appVersion       | 返回浏览器的平台和版本信息</span><br><span class="line"></span><br><span class="line">browserLanguage  | 返回当前浏览器的语言（IE 和 Opera 支持）</span><br><span class="line"></span><br><span class="line"><span class="string">`cookieEnabled`</span>  | 返回指明浏览器中是否启用 cookie 的布尔值</span><br><span class="line"></span><br><span class="line">cpuClass         | 返回浏览器系统的 CPU 等级（IE支持）</span><br><span class="line"></span><br><span class="line"><span class="string">`onLina`</span>         | 返回执行系统是否处于脱机模式的布尔值（连没连网）</span><br><span class="line"></span><br><span class="line">platform         | 返回运行浏览器的操作系统平台</span><br><span class="line"></span><br><span class="line">systemLanguage   | 返回当前系统的默认语言。（IE支持）</span><br><span class="line"></span><br><span class="line"><span class="string">`userAgent`</span>      | 返回有客户机发送服务器的 user-agent 头部的值。</span><br><span class="line"></span><br><span class="line">userLanguage     | 返回操作系统设定的自然语言。（IE 和 Opera 支持）</span><br><span class="line"></span><br><span class="line">plugins          | 返回包含客户端安装的所欲插件的数组</span><br></pre></td></tr></table></figure><h4 id="Navigator-对象方法"><a href="#Navigator-对象方法" class="headerlink" title="Navigator 对象方法"></a>Navigator 对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javaEnabled()     | 规定浏览器是否支持并启用了 Java</span><br><span class="line"></span><br><span class="line">taintEnabled()    | 规定浏览器是否启用数据污点（data tainting）</span><br></pre></td></tr></table></figure><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p><strong>History 对象包含用户（在浏览器窗口中）访问过的URL;</strong></p><h4 id="History-对象属性"><a href="#History-对象属性" class="headerlink" title="History 对象属性"></a>History 对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length      | 返回浏览器历史列表中的 URL 数量</span><br></pre></td></tr></table></figure><h4 id="History-对象方法"><a href="#History-对象方法" class="headerlink" title="History 对象方法"></a>History 对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">back()      | 加载 history 列表中的前一个 URL</span><br><span class="line"></span><br><span class="line">forward()   | 加载 history 列表中的下一个 URL</span><br><span class="line"></span><br><span class="line">go()        | 加载 history 列表中的某个具体页面,例如 history.go(<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h3 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h3><p><strong>Location 对象包含有关当前 URL 的信息;</strong></p><h4 id="Location-对象属性"><a href="#Location-对象属性" class="headerlink" title="Location 对象属性"></a>Location 对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">`hash`        | 设置或返回从井号（#）开始的 URL（锚）。</span><br><span class="line"></span><br><span class="line"><span class="string">`host`</span>        | 加载 history 列表中的下一个 URL</span><br><span class="line"></span><br><span class="line">hostname      | 加载 history 列表中的某个具体页面,例如 history.go(<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">`href`</span>        | 设置或返回完整的 URL</span><br><span class="line"></span><br><span class="line"><span class="string">`pathname`</span>    | 设置或返回当前 URL 的路径部分</span><br><span class="line"></span><br><span class="line">port          | 设置或返回当前 URL 的端口号</span><br><span class="line"></span><br><span class="line"><span class="string">`protocol`</span>    | 设置或返回当前 URL 的协议</span><br><span class="line"></span><br><span class="line"><span class="string">`search`</span>      | 设置或返回从问号（？）开始的 URL(查询部分)</span><br></pre></td></tr></table></figure><h4 id="Location-对象方法"><a href="#Location-对象方法" class="headerlink" title="Location 对象方法"></a>Location 对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`assign()`</span>          | 加载新的文档</span><br><span class="line"></span><br><span class="line"><span class="string">`reload('force')`</span>   | 重新加载当前文档，参数可选，不填或填 <span class="literal">false</span> 则取浏览器缓存的文档</span><br><span class="line"></span><br><span class="line"><span class="string">`replace()`</span>         | 用新的文档替换当前文档</span><br></pre></td></tr></table></figure><h3 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h3><blockquote><p><code>Screen</code>对象包含有关客户端显示屏幕的信息。每个<code>Window</code>对象的<code>screen</code>属性都引用一个<code>Screen</code>对象。<code>Screen</code>对象中存放着有关显示浏览器屏幕的信息。<code>Javascript</code>程序将利用这些信息来优化它们的输出，以达到用户的显示要求。例如，一个程序可以根据显示器的尺寸选择使用大图像还是使用小图像，它还可以根据显示器的颜色深度选择使用<code>16</code>位色还是使用<code>8</code>位色的图形。另外，<code>JavaScript</code>程序还能根据有关屏幕尺寸的信息将新的浏览器窗口定位在屏幕中间</p></blockquote><h4 id="Screen-对象属性"><a href="#Screen-对象属性" class="headerlink" title="Screen 对象属性"></a>Screen 对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">availHeight            | 返回显示屏的高度（除 Windows 任务栏之外）</span><br><span class="line"></span><br><span class="line">availWidth             | 返回显示屏的宽度（除 Windows 任务栏之外）</span><br><span class="line"></span><br><span class="line">bufferDepth            | 设置或返回调色板的比特深度（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">colorDepth             | 返回目标设备或缓冲器上的调色板的比特深度</span><br><span class="line"></span><br><span class="line">deviceXDPI             | 返回显示屏幕的每英寸水平点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">deviceYDPI             | 返回显示屏幕的每英寸垂直点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">fontSmoothingEnabled   | 返回用户是否在显示控制面板中启用了字体平滑（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">height                 | 返回显示屏幕的高度</span><br><span class="line"></span><br><span class="line">logicaIXDPI            | 返回显示屏幕每英寸的水平方向的常规点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">logicaIYDPI            | 返回显示屏幕每英寸的垂直方向的常规点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">pixelDepth             | 返回显示器的颜色分辨率（比特每像素）</span><br></pre></td></tr></table></figure><h1 id="JavaScript-必会知识点（琐碎、相互独立）"><a href="#JavaScript-必会知识点（琐碎、相互独立）" class="headerlink" title="JavaScript 必会知识点（琐碎、相互独立）"></a>JavaScript 必会知识点（琐碎、相互独立）</h1><ol><li><p><strong>属性映射 HTML属性，映射到Element;</strong></p></li><li><p><strong>cdn（缓存服务器）;</strong></p></li><li><p><strong>断点调试（debugger;）;</strong></p></li><li><p><strong>typeof(new Array).<strong>proto</strong>.constructor();;</strong></p></li></ol><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><blockquote><p>在多年以前（IE6诞生以前），各大浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。随着web的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如IE6就是其中之一。但是考虑到以前建设的网站并不支持标准模式，所以各大浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DOCTYPE <span class="comment">// 三种标准模式的写法</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> &lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> &lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="string">"http://www.w3.org/TR/html4/strict.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> &lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Strict//EN"</span></span><br><span class="line"><span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">如果当&lt;!DOCTYPE html&gt;不写，或者写错了，都会进入到怪异渲染模式中</span><br></pre></td></tr></table></figure><ol><li><p><strong>渲染模式 : &lt;! DOCTYPE html&gt; 是 html5 的，写三种的任何一种都是可以的，都是正常渲染模式</strong></p></li><li><p><strong>怪异/混杂模式 : 试图去兼容之前的语法，去掉<!DOCTYPE html>这一行即可开启（向后兼容）</strong></p></li></ol><p><strong>document.compatMode</strong>是判断是怪异模式还是标准模式</p><p><strong>CSS1Compat – 标准模式;</strong></p><p><strong>BackCompat – 怪异模式向后兼容;</strong></p><p><code>怪异模式不是说对所有的浏览器都管用，主要是针对IE6及以下的浏览器版本的。</code></p><p><code>怪异模式下盒模型会变成IE盒模型，行盒也会可以改变宽高</code></p><p><strong>IE盒模型：box-sizing:border-box;</strong></p><p><strong>属性</strong>：<em>content-box;</em></p><p>元素的宽高 = 边框 + 内边距 + 内容宽高</p><p><strong>属性</strong>：<em>border-box;</em></p><p>元素的宽高 = width/height的宽高</p><p><strong>W3c标准盒模型：</strong></p><p>宽度 = 左外边距 + 左边框 + 左内边距 + width + 右内边距 + 右边框 + 右外边距</p><p>高度 = 上外边距 + 上边框 + 上内边距 + height + 下内边距 + 下边框 + 下外边距</p><h2 id="img图片预加载-图片懒加载"><a href="#img图片预加载-图片懒加载" class="headerlink" title="img图片预加载 \ 图片懒加载"></a>img图片预加载 \ 图片懒加载</h2><p><strong>图片预加载:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片预加载，就是在全部内容加载完之后再加载图片</span></span><br><span class="line"><span class="keyword">var</span> OImg = <span class="keyword">new</span> Image();</span><br><span class="line">OImg.src = <span class="string">'图片地址'</span>;</span><br><span class="line">OImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(OImg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片懒加载:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片懒加载，我需要你的时候在加载，不需要你的时候就不要加载</span></span><br><span class="line">&lt;button&gt; getTime &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">var oBtn = document.getElementsByTagName('button')[0];</span></span><br><span class="line"><span class="regexp">OBtn.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    var OImg = new Image();</span></span><br><span class="line"><span class="regexp">    OImg.src = '图片地址';</span></span><br><span class="line"><span class="regexp">    document.body.appendChild(OImg);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="文档碎片"><a href="#文档碎片" class="headerlink" title="文档碎片"></a>文档碎片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var Oul = document.getElementsByTagName("ul")[0];</span></span><br><span class="line"><span class="regexp">for (var i = 0; i &lt; 10000; i++)&#123;</span></span><br><span class="line"><span class="regexp">    var Oli = document.createElement("li");</span></span><br><span class="line"><span class="regexp">    Oli.innerHTML = i;</span></span><br><span class="line"><span class="regexp">    Oul.appendChild(Oli);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>但是， 如果当我们要向document中添加大量数据时(比如1w条)， 如果像上面的代码一样， 逐条添加节点， 这个过程就可能会十分缓慢。<br>当然, 你也可以建个新的节点, 比如说div, 先将oP添加到div上, 然后再将div添加到body中.但这样要在body中多添加一个 &lt; div &gt; &lt; /div&gt;.但文档碎片不会产生这种节点.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var OUl = document.getElementsByTagName("ul")[0];</span></span><br><span class="line"><span class="regexp">var ODiv = document.createElement("div");</span></span><br><span class="line"><span class="regexp">for (var i = 0; i &lt; 10000; i++)&#123;</span></span><br><span class="line"><span class="regexp">    var OLi = document.createElement("li");</span></span><br><span class="line"><span class="regexp">    OLi.innerHTML = i;</span></span><br><span class="line"><span class="regexp">    ODiv.appendChild(OLi);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">OUl.appendChild(ODiv);</span></span><br></pre></td></tr></table></figure><blockquote><p>为了解决这个问题， 我们可以引入createDocumentFragment() 方法， 它的作用是创建一个文档碎片， 把要插入的新节点先附加在它上面， 然后再一次性添加到document中。 代码如下：</p></blockquote><p>代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/先创建文档碎片</span></span><br><span class="line"><span class="regexp">var oFragmeng = document.createDocumentFragment();</span></span><br><span class="line"><span class="regexp">var OUl = document.getElementsByTagName("ul")[0];</span></span><br><span class="line"><span class="regexp">for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class="line"><span class="regexp">    var OLi = document.createElement("li");</span></span><br><span class="line"><span class="regexp">    OLi.innerHTML = i;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/先附加在文档碎片中</span></span><br><span class="line"><span class="regexp">    oFragmeng.appendChild(OLi);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/最后一次性添加到document中</span></span><br><span class="line"><span class="regexp">OUl.appendChild(oFragmeng);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/这就是文档碎片</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当然，还有一种方法:用字符串拼接也可以</span></span><br><span class="line">&lt;ul&gt;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">var OUl = document.getElementsByTagName('ul')[0];</span></span><br><span class="line"><span class="regexp">var str = ''; /</span><span class="regexp">/ 声明一个空字符串</span></span><br><span class="line"><span class="regexp">for(var i = 0;i &lt; 1000;i ++)&#123;</span></span><br><span class="line"><span class="regexp">    str += '&lt;li&gt;' + i + '&lt;/</span>li&gt;<span class="string">'; // 让标签用字符串＋起来</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">OUl.innerHTML = str; // 最后用innerHTML插入到ul里面</span></span><br></pre></td></tr></table></figure><h2 id="byClassName（封装函数，兼容性vrey-Good-）"><a href="#byClassName（封装函数，兼容性vrey-Good-）" class="headerlink" title="byClassName（封装函数，兼容性vrey Good!）"></a>byClassName（封装函数，兼容性vrey Good!）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.prototype.getByClassName = <span class="function"><span class="keyword">function</span>(<span class="params">classname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> allDomArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'8'</span>),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> filterArr = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dealClass</span>(<span class="params">dom</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/\s+/g</span>;</span><br><span class="line">        <span class="keyword">var</span> arrClassName = dom.className.replace(reg,<span class="string">' '</span>).trim();</span><br><span class="line">        <span class="keyword">return</span> arrClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    allDomArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> itemClassArr = dealClass(ele).split(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; itemClassArr.length;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(itemClassArr[i] == className)&#123;</span><br><span class="line">                filterArr.push(ele);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> filterArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><ul><li><p><code>Math.abs(num)</code> : 返回<code>num</code>的绝对值</p></li><li><p><code>Math.acos(num)</code> : 返回<code>num</code>的反余弦值</p></li><li><p><code>Math.asin(num)</code> : 返回<code>num</code>的反正弦值</p></li><li><p><code>Math.atan(num)</code> : 返回<code>num</code>的反正切值</p></li><li><p><code>Math.atan2(y,x)</code> : 返回<code>y</code>除以<code>x</code>的商的反正切值</p></li><li><p><code>Math.ceil(num)</code> : 返回大于<code>num</code>的最小整数</p></li><li><p><code>Math.cos(num)</code> : 返回<code>num</code>的余弦值</p></li><li><p><code>Math.exp(x)</code> : 返回以自然数为底,x次幂的数</p></li><li><p><code>Math.floor(num)</code> : 返回小于<code>num</code>的最大整数</p></li><li><p><code>Math.log(num)</code> : 返回<code>num</code>的自然对数</p></li><li><p><code>Math.max(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较大的一个</p></li><li><p><code>Math.min(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较小的一个</p></li><li><p><code>Math.pow(x,y)</code> : 返回<code>x</code>的<code>y</code>次方的值</p></li><li><p><code>Math.random()</code> : 返回<code>0</code>到<code>1</code>之间的一个随机数</p></li><li><p><code>Math.round(num)</code> : 返回<code>num</code>四舍五入后的值</p></li><li><p><code>Math.sin(num)</code> : 返回<code>num</code>的正弦值</p></li><li><p><code>Math.sqrt(num)</code> : 返回<code>num</code>的平方根</p></li><li><p><code>Math.tan(num)</code> : 返回<code>num</code>的正切值</p></li><li><p><code>Math.E</code> : 自然数(<code>2.718281828459045</code>)</p></li><li><p><code>Math.LN2</code> : <code>2</code>的自然对数(<code>0.6931471805599453</code>)</p></li><li><p><code>Math.LN10</code> : <code>10</code>的自然对数(<code>2.302585092994046</code>)</p></li><li><p><code>Math.LOG2E</code> : <code>log 2</code> 为底的自然数(<code>1.4426950408889634</code>)</p></li><li><p><code>Math.LOG10E</code> : <code>log 10</code> 为底的自然数(<code>0.4342944819032518</code>)</p></li><li><p><code>Math.PI</code> : <code>π(3.141592653589793)</code></p></li><li><p><code>Math.SQRT1_2</code> : <code>1/2</code>的平方根(<code>0.7071067811865476</code>)</p></li><li><p><code>Math.SQRT2</code> : <code>2</code>的平方根(<code>1.4142135623730951</code>)</p></li></ul><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p><em><strong>生成一个随机数，生成一个 0 ~ 1 之间的一个随机数。</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i ++)&#123;</span><br><span class="line">    str = arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 可以取一个数组中任意三个字母</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i ++)&#123;</span><br><span class="line">    str = arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 可以取数组中2 ~ 5中的任意三个字母;</span></span><br><span class="line">就比如：我想让随机数在 <span class="number">2</span> ~ <span class="number">5</span> 之间取一个随机数，就例如：</span><br><span class="line"><span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span> <span class="comment">// 3是2到5之间的一个数字，2就是5-3=2；</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：抽奖</span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(num &lt; <span class="number">0.001</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一等奖'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0.01</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'二等奖'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0.1</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'三等奖'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'特等奖'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><h3 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a><code>String</code> 对象属性</h3><ul><li><p><code>constructor</code> 对创建该对象的函数的引用</p></li><li><p><code>length</code>字符串的长度</p></li><li><p><code>prototype</code>允许您向对象添加属性和方法</p></li></ul><h3 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a><code>String</code> 对象方法</h3><ul><li><p><code>charAt(n)</code> ：返回在指定位置的字符，字符串的索引，第n位</p></li><li><p><code>charCodeAt()</code> ：返回在指定的位置的字符的<code>Unicode</code>编码。这个返回值是<code>0 - 65535</code>之间的整数。(当返回值是<code>&lt;=255</code>时为英文，当返回值<code>&gt;255</code>时为中文)</p></li><li><p><code>concat()</code> ：连接两个或更多字符串，并返回新的字符串。</p></li><li><p><code>fromCharCode()</code> ：将 Unicode 编码转为字符。</p></li><li><p><code>indexOf()</code> ：返回某个指定的字符串值在字符串中首次出现的位置，如果没有找到匹配的字符串则返回 -1。</p></li><li><p><code>includes()</code> ：查找字符串中是否包含指定的子字符串。</p></li><li><p><code>lastIndexOf()</code> ：从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现* 的位置。</p></li><li><p><code>match()</code> ：查找找到一个或多个正则表达式的匹配。</p></li><li><p><code>repeat()</code> ：复制字符串指定次数，并将它们连接在一起返回。</p></li><li><p><code>replace()</code> ：在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。</p></li><li><p><code>search()</code> ：查找与正则表达式相匹配的值。</p></li><li><p><code>slice(a,b)</code> ：提取字符串的片断，并在新的字符串中返回被提取的部分，剪切，从<code>a</code>剪切到<code>b</code>。</p></li><li><p><code>split()</code> ：把字符串分割为字符串数组。</p></li><li><p><code>startsWith()</code> ：查看字符串是否以指定的子字符串开头。</p></li><li><p><code>substr()</code> ：从起始索引号提取字符串中指定数目的字符。</p></li><li><p><code>substring()</code> ：提取字符串中两个指定的索引号之间的字符。</p></li><li><p><code>toLowerCase()</code> ：把字符串转换为小写。</p></li><li><p><code>toUpperCase()</code> ：把字符串转换为大写。</p></li><li><p><code>trim()</code> ：去除字符串两边的空白</p></li><li><p><code>toLocaleLowerCase()</code> ：根据本地主机的语言环境把字符串转换为小写。</p></li><li><p><code>toLocaleUpperCase()</code> ：根据本地主机的语言环境把字符串转换为大写。</p></li><li><p><code>valueOf()</code> ：返回某个字符串对象的原始值。</p></li><li><p><code>toString()</code> ：返回一个字符串。</p></li><li><p><code>String HTML</code>：包装方法</p></li><li><p><code>HTML</code> ：返回包含在相对应的 HTML 标签中的内容。</p></li></ul><p><strong>以下方法并非标准方法，所以可能在某些浏览器下不支持。</strong></p><ul><li><p><code>anchor()</code>：创建 HTML 锚。</p></li><li><p><code>big()</code>：用大号字体显示字符串。</p></li><li><p><code>blink()</code>：显示闪动字符串。</p></li><li><p><code>bold()</code>：使用粗体显示字符串。</p></li><li><p><code>fixed()</code>：以打字机文本显示字符串。</p></li><li><p><code>fontcolor()</code>：使用指定的颜色来显示字符串。</p></li><li><p><code>fontsize()</code>：使用指定的尺寸来显示字符串。</p></li><li><p><code>italics()</code>：使用斜体显示字符串。</p></li><li><p><code>link()</code>：将字符串显示为链接。</p></li><li><p><code>small()</code>：使用小字号来显示字符串。</p></li><li><p><code>strike()</code>：用于显示加删除线的字符串。</p></li><li><p><code>sub()</code>：把字符串显示为下标。</p></li><li><p><code>sup()</code>：把字符串显示为上标。</p></li></ul><h1 id="javaScript书写规范："><a href="#javaScript书写规范：" class="headerlink" title="javaScript书写规范："></a>javaScript书写规范：</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">常量名</span><br><span class="line">    全部大写并单词间用下划线分隔</span><br><span class="line">    如：CSS_BTN_CLOSE、TXT_LOADING</span><br><span class="line">对象的属性或方法名</span><br><span class="line">    小驼峰式（little camel-<span class="keyword">case</span>）</span><br><span class="line">    如：init、bindEvent、updatePosition</span><br><span class="line">    示例：Dialog.prototype = &#123;</span><br><span class="line">                init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">                bindEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">                updatePosition: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">                …</span><br><span class="line">                &#125;;</span><br><span class="line">类名（构造器）</span><br><span class="line">    --&gt;小驼峰式但首字母大写</span><br><span class="line">    --&gt;如：Current、DefaultConfig</span><br><span class="line">函数名</span><br><span class="line">    --&gt;小驼峰式</span><br><span class="line">    --&gt;如：current()、defaultConfig()</span><br><span class="line">变量名</span><br><span class="line">    --&gt;小驼峰式</span><br><span class="line">    --&gt;如：current、defaultConfig</span><br><span class="line">私有变量名</span><br><span class="line">    --&gt;小驼峰式但需要用_开头</span><br><span class="line">    --&gt;如：_current、_defaultConfig</span><br><span class="line">变量名的前缀</span><br><span class="line">    --&gt;续</span><br></pre></td></tr></table></figure><p>代码格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"()"</span>前后需要跟空格</span><br><span class="line"><span class="string">"="</span>前后需要跟空格</span><br><span class="line"><span class="string">","</span>后面需要跟空格</span><br><span class="line"><span class="built_in">JSON</span>对象需格式化对象参数</span><br><span class="line"><span class="keyword">if</span>、<span class="keyword">while</span>、<span class="keyword">for</span>、<span class="keyword">do</span>语句的执行体用<span class="string">"&#123;&#125;"</span>括起来</span><br></pre></td></tr></table></figure><p>“{}”格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a==<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>避免额外的逗号</p><p><code>var arr = [1,2,3,];</code></p><blockquote><p>for-in循环体中必须用hasOwnProperty方法检查成员是否为自身成员，避免来自原型链上的污染。 长语句可考虑断行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TEMPL_SONGLIST.replace(<span class="string">'&#123;TABLE&#125;'</span>, da[<span class="string">'results'</span>])</span><br><span class="line">    .replace(<span class="string">'&#123;PREV_NUM&#125;'</span>, prev)</span><br><span class="line">    .replace(<span class="string">'&#123;NEXT_NUM&#125;'</span>, next)</span><br><span class="line">    .replace(<span class="string">'&#123;CURRENT_NUM&#125;'</span>, current)</span><br><span class="line">    .replace(<span class="string">'&#123;TOTAL_NUM&#125;'</span>, da.page_total);</span><br></pre></td></tr></table></figure><p>为了避免和JSLint的检验机制冲突，“.”或“+”这类操作符放在行尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TEMPL_SONGLIST.replace(<span class="string">'&#123;TABLE&#125;'</span>, da[<span class="string">'results'</span>]).</span><br><span class="line">  replace(<span class="string">'&#123;PREV_NUM&#125;'</span>, prev).</span><br><span class="line">  replace(<span class="string">'&#123;NEXT_NUM&#125;'</span>, next).</span><br><span class="line">  replace(<span class="string">'&#123;CURRENT_NUM&#125;'</span>, current).</span><br><span class="line">  replace(<span class="string">'&#123;TOTAL_NUM&#125;'</span>, da.page_total);</span><br></pre></td></tr></table></figure><p>如果模块代码中，使用其它全局变量想跳过JSLint的检查，可以在该文件中加入/global/声明。</p><p><code>/*global alert: true, console: true, top: true, setTimeout: true */</code></p><p>使用严格的条件判断符。用===代替==，用!==代替!=，避免掉入==造成的陷阱,在条件判断时，这样的一些值表示<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span>与<span class="literal">null</span>相等</span><br><span class="line">字符串<span class="string">''</span></span><br><span class="line">数字<span class="number">0</span></span><br><span class="line"><span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p>在==时，则会有一些让人难以理解的陷阱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="number">1</span> == <span class="literal">true</span>; <span class="comment">//true</span></span><br><span class="line">    <span class="number">2</span> == <span class="literal">true</span>; <span class="comment">// false</span></span><br><span class="line">    <span class="number">0</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="number">0</span> == <span class="string">''</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="literal">NaN</span> == <span class="literal">NaN</span>;<span class="comment">// false</span></span><br><span class="line">    [] == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line">    [] == ![]; <span class="comment">// true</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>对于不同类型的 == 判断，有这样一些规则，顺序自上而下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span>与<span class="literal">null</span>相等</span><br><span class="line">一个是number一个是string时，会尝试将string转换为number</span><br><span class="line">尝试将boolean转换为number</span><br><span class="line"><span class="number">0</span>或<span class="number">1</span></span><br><span class="line">尝试将<span class="built_in">Object</span>转换成number或string</span><br></pre></td></tr></table></figure><p>而这些取决于另外一个对比量，即值的类型，所以对于0、空字符串的判断，建议使用=== ===会先判断两边的值类型，类型不匹配时为false。 下面类型的对象不建议用new构造</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Object</span> <span class="comment">//用&#123;&#125;代替</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span> <span class="comment">//用[]代替</span></span><br></pre></td></tr></table></figure><p>引用对象成员用obj.prop代替obj[“prop”]，除非属性名是变量。 从number到string的转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 推荐写法*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">typeof</span>(a); <span class="comment">//"number"</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> aa=a+<span class="string">''</span>;</span><br><span class="line"><span class="keyword">typeof</span>(aa); <span class="comment">//"string"</span></span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//'1'</span></span><br><span class="line"><span class="comment">/** 不推荐写法*/</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(a)或a.toString()</span><br></pre></td></tr></table></figure><p>从string到number的转换，使用parseInt，必须显式指定第二个参数的进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 推荐写法*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> aa = <span class="built_in">parseInt</span>(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">typeof</span>(a); <span class="comment">//"string"</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//'1'</span></span><br><span class="line"><span class="keyword">typeof</span>(aa); <span class="comment">//"number"</span></span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>从float到integer的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 推荐写法*/</span></span><br><span class="line"><span class="built_in">Math</span>.floor/<span class="built_in">Math</span>.round/<span class="built_in">Math</span>.ceil</span><br><span class="line"><span class="comment">/** 不推荐写法*/</span></span><br><span class="line"><span class="built_in">parseInt</span></span><br></pre></td></tr></table></figure><p>字符串拼接应使用数组保存字符串片段，使用时调用join方法。避免使用+或+=的方式拼接较长的字符串，每个字符串都会使用一个小的内存片段，过多的内存片段会影响性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**推荐的拼接方式array的push、join*/</span></span><br><span class="line"><span class="keyword">var</span> str=[],</span><br><span class="line">    list=[<span class="string">'测试A'</span>,<span class="string">'测试B'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span> , len=list.length; i &lt; len; i++) &#123;</span><br><span class="line">    str.push( <span class="string">'&lt;div&gt;'</span>+ list[i] + <span class="string">'&lt;/div&gt;'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(str.join(<span class="string">''</span>)); <span class="comment">//&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</span></span><br><span class="line"><span class="comment">/** 不推荐的拼接方式+=*/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>,</span><br><span class="line">    list=[<span class="string">'测试A'</span>,<span class="string">'测试B'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = list.length; i&lt; len; i++) &#123;</span><br><span class="line">    str+=<span class="string">'&lt;div&gt;'</span> + list[i] + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>尽量避免使用存在兼容性及消耗资源的方法或属性</p><p><code>不要使用with，void，evil，eval_r，innerText</code></p><p>注重HTML分离, 减小reflow, 注重性能</p><h2 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h2><p>命名应用小写英文、数字、_组合，便于团队其他成员理解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header_btn.gif</span><br><span class="line">header_btn2.gif</span><br></pre></td></tr></table></figure><ul><li>页面元素类图片均放入img文件夹,</li><li>测试用图片放于img/testimg文件夹，psd源图放入img/psdimg文件夹。</li><li>图片格式仅限于gif、png、jpg等。</li><li>用png图片做图片时,要求图片格式为png-8格式,若png-8实在影响图片质量或其中有半透明效果,请为ie-6单独定义背景，并尽量避免使用半透明的png图片。</li><li>背景图片请尽可能使用sprite技术, 减小http请求</li></ul><h2 id="注释规范："><a href="#注释规范：" class="headerlink" title="注释规范："></a>注释规范：</h2><blockquote><p>JAVASCRIPT、CSS文件注释需要标明作者、文件版本、创建/修改时间、重大版本修改记录、函数描述、文件版本、创建或者修改时间、功能、作者等信息。</p></blockquote><p><code>/* * 注释块 */</code></p><p>中间可添加如下信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@file 文件名</span><br><span class="line">@addon 把一个函数标记为另一个函数的扩张，另一个函数的定义不在源文件中</span><br><span class="line">@argument 用大括号中的自变量类型描述一个自变量</span><br><span class="line">@author 函数/类作者的姓名</span><br><span class="line">@base 如果类是继承得来，定义提供的类名称</span><br><span class="line"><span class="string">`@class`</span>用来给一个类提供描述，不能用于构造器的文档中</span><br><span class="line">@<span class="keyword">constructor</span> 描述一个类的构造器</span><br><span class="line">@deprecated 表示函数/类已被忽略</span><br><span class="line">@exception 描述函数/类产生的一个错误</span><br><span class="line">@exec @extends 表示派生出当前类的另一个类</span><br><span class="line">@fileoverview 表示文档块将用于描述当前文件，这个标签应该放在其它任何标签之前</span><br><span class="line">@final 指出函数/类</span><br><span class="line">@ignore 让jsdoc忽视随后的代码</span><br><span class="line">@link 类似于@link标签，用于连接许多其它页面</span><br><span class="line">@member 定义随后的函数为提供的类名称的一个成员</span><br><span class="line">@param 用大括号中的参数类型描述一个参数</span><br><span class="line">@private 表示函数/类为私有，不应包含在生成的文档中</span><br><span class="line">@requires 表示需要另一个函数/类</span><br><span class="line">@return 描述一个函数的返回值</span><br><span class="line">@see 连接到另一个函数/类</span><br><span class="line">@throws 描述函数/类可能产生的错误</span><br><span class="line">@type 指定函数/成员的返回类型</span><br><span class="line">@version 函数/类的版本号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    <content src="http://yoursite.com/http://q80egzbfm.bkt.clouddn.com/http://q80egzbfm.bkt.clouddn.com/picGO20200331121438.png" type="image" />
    
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>jqeury</title>
    <link href="http://yoursite.com/2020/03/19/jquery/"/>
    <id>http://yoursite.com/2020/03/19/jquery/</id>
    <published>2020-03-19T13:33:38.078Z</published>
    <updated>2020-04-01T04:15:29.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="第一节-jQuery初步认知"><a href="#第一节-jQuery初步认知" class="headerlink" title="第一节 jQuery初步认知"></a>第一节 jQuery初步认知</h4><h5 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h5><ul><li><strong><code>jQuery</code>是什么:</strong><ul><li>是一个<code>javascript</code>代码仓库，我们称之为<code>javascript</code>框架。</li><li>是一个快速的简洁的<code>javascript</code>框架，可以简化查询<code>DOM</code>对象、处理事件、制作动画、处理<code>Ajax</code>交互过程。</li></ul></li></ul><a id="more"></a><p>-<br>    -  <strong>它可以帮我们做什么(有什么优势)</strong><br>     - 轻量级、体积小，使用灵巧(只需引入一个<code>js</code>文件)<br>     -  强大的选择器<br>     - 出色的<code>DOM</code>操作的封装<br>     - 出色的浏览器兼容性<br>     - 可靠的事件处理机制<br>     - 完善的<code>Ajax</code><br>     - 链式操作、隐式迭代<br>     - 方便的选择页面元素(模仿<code>CSS</code>选择器更精确、灵活)<br>     - 动态更改页面样式/页面内容(操作<code>DOM</code>，动态添加、移除样式)<br>     - 控制响应事件(动态添加响应事件)<br>     - 提供基本网页特效(提供已封装的网页特效方法)<br>     - 快速实现通信(<code>ajax</code>)<br>     - 易扩展、插件丰富</p><ul><li><p><strong><code>JQuery</code>概念</strong></p><ul><li><code>javascript</code>概念<ul><li>基于<code>Js</code>语言的<code>API</code>和语法组织逻辑，通过内置<code>window</code>和<code>document</code>对象，来操作内存中的<code>DOM</code>元素</li></ul></li><li><code>JQuery</code>概念<ul><li>基于<code>javascript</code>的，同上，提高了代码的效率</li></ul></li></ul></li></ul><ul><li><p><strong>如何引入<code>JQuery</code>包</strong></p><ul><li><p>引入本地的<code>JQuery</code></p></li><li><p>引入<code>Google</code>在线提供的库文件（稳定可靠高速）</p></li><li><p>使用<code>Google</code>提供的<code>API</code>导入 <code>&lt;script type=“text/javascript” src=“jquery.js”&gt;&lt;/script&gt;</code></p></li><li><p>写第一个<code>JQUery</code>案例</p><ul><li>解释:在<code>JQuery</code>库中，<code>$</code>是<code>JQuery</code>的别名，<code>$()</code>等效于就<code>jQuery()</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=“text/javascript” src=“”&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type=“text/</span>javascript”&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(“jQuery 你好!”);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>讲解<code>$(function(){})</code>;</strong></p><ul><li><p><code>$</code>是<code>jQuery</code>别名。如<code>$()</code>也可<code>jQuery()</code>这样写,相当于页面初始化函数，当页面加载完毕，会执行<code>jQuery()</code>。</p></li><li><p>希望在做所有事情之前，<code>JQuery</code>操作<code>DOM</code>文档。必须确保在<code>DOM</code>载入完毕后开始执行，应该用<code>ready</code>事件做处理<code>HTML</code>文档的开始</p></li><li><p><code>$(document).ready(function(){})</code>;</p><ul><li>类似于<code>js</code>的<code>window.onload</code>事件函数，但是<code>ready</code>事件要先于<code>onload</code>事件执行</li><li><code>window.onload = function(){}</code>;</li></ul></li><li><p>为方便开发，<code>jQuery</code>简化这样的方法，直接用<code>$()</code>表示</p></li><li><p><code>JQuery</code>的<code>ready</code>事件不等于<code>Js</code>的<code>load</code>：</p><ul><li>执行时机不同：<code>load</code>需要等外部图片和视频等全部加载才执行。<code>ready</code>是<code>DOM</code>绘制完毕后执行，先与外部文件</li><li>用法不同：<code>load</code>只可写一次，<code>ready</code>可以多次</li></ul></li></ul></li><li><p><strong><code>window.onload</code>与<code>$(document).ready()</code>对比</strong></p></li></ul><table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>必须等网页中所有内容加载完后(图片)才执行</td><td>网页中的<code>DOM</code>结构绘制完后就执行,可能<code>DOM</code>元素相关的东西并没有加载完</td></tr><tr><td>编写个数</td><td>不能同时执行多个</td><td>能同时执行多个</td></tr><tr><td>简化写法</td><td>无</td><td><code>$(document).ready(function(){ //.. });</code><br /><br />推荐写法：<code>$(function(){ });</code></td></tr></tbody></table><ul><li><p><strong><code>jQuery</code>有哪些功能(<code>API</code>)</strong>：</p><ul><li>选择器 </li><li>过滤器 </li><li>事件 </li><li>效果 </li><li><code>ajax</code></li></ul></li><li><p><strong>简单的<code>JQuery</code>选择器</strong>：</p><ul><li><code>JQuery</code>基本选择器（<code>ID</code>选择器，标签选择器，类选择器，通配选择器和组选择器<code>5</code>种）</li><li><code>ID</code>选择器：<code>document.getElementById(id)</code>与<code>$(&quot;#id&quot;)</code>对比(改变文字大小)—<code>id</code>唯一，返回单个元素</li><li>标签选择器：<code>document.getElementsByTagName(tagName)</code>与<code>$(&quot;tagname&quot;)</code>对比—多个标签，返回数组</li><li>类选择器:<code>$(&quot;.className&quot;)</code>–多个<code>classname</code>（改变背景图片）</li><li>通配选择器：<code>document.getElementsByTagName(&quot;*&quot;)</code>与<code>$(&quot;*&quot;)</code>对比—指范围内的所有标签元素</li><li>组选择器：<code>$(&quot;seletor1,seletor2,seletor3&quot;)</code>—-无数量限制，用逗号分割</li></ul></li></ul><h5 id="初步了解JQuery"><a href="#初步了解JQuery" class="headerlink" title="初步了解JQuery"></a>初步了解<code>JQuery</code></h5><hr><ul><li><p><strong><code>JQuery</code>是什么</strong></p><ul><li><code>javascript</code>用来干什么的：<ul><li>操作<code>DOM</code>对象</li><li>动态操作样式<code>css</code></li><li>数据访问</li><li>控制响应事件等</li></ul></li><li><code>jQuery</code>作用一样，只是更加快速简洁</li></ul></li><li><p><strong>如何引用<code>JQuery</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">写第一个JQUery案例</span></span><br><span class="line"><span class="regexp">&lt;script type=“text/</span>javascript” src=“”&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type=“text/</span>javascript”&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(“jQuery 你好!”);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>$()讲解</code></strong></p><ul><li><code>$</code>在<code>JQuery</code>库中，<code>$</code>是<code>JQuery</code>的别名，<code>$()</code>等效于就<code>jQuery()</code>.</li><li><code>$()</code>是<code>JQuery</code>方法,赞可看作是<code>JQuery</code>的选择器，与<code>css</code>选择器相似（可做对比）</li><li><code>var jQuery==$ =function(){}</code> <code>$()</code>本质就是一个函数也就是 <code>jQuery</code>的核心函数</li><li>只要是<code>jQuery</code>的对象都这样变量加上一个<code>符号$</code>方便识别：<code>var $div = $(&quot;#&quot;)</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>　<span class="title">$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>$()</code>和<code>document</code>是相等的吗</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">alert(document.getElementById("id") == $("#aa"));//返回结果为false</span><br><span class="line">alert(document.getElementById("id") == $("#aa").get(0));//返回true</span><br></pre></td></tr></table></figure><ul><li><p><strong>代理对象<code>$()</code></strong></p><ul><li><code>jQuery</code>中返回的是代理对象本身</li><li><code>jQuery</code>的核心原理是通过选择器找到对应的代理对象</li><li><code>jQuery</code>全都是通过方法操作</li><li>样式选择器<code>$(&quot;.className&quot;)</code><ul><li><code>$(&quot;.aa&quot;).css(&quot;color&quot;,&quot;green&quot;);</code></li></ul></li><li>id选择器(“”)<ul><li><code>$(&quot;#a&quot;).css(&quot;background-color&quot;,&quot;#ff0066&quot;);</code></li></ul></li><li>标签选择器<ul><li><code>$(&quot;p&quot;).css(&quot;color&quot;,&quot;#cc3366&quot;);</code></li></ul></li><li>组选择器<ul><li><code>$(&quot;#b ul li&quot;).size();</code></li></ul></li></ul></li><li><p><strong>对象转换(<code>$(element)</code>)</strong></p><ul><li>原生<code>dom</code>对象和<code>jquery</code>代理对象的相互转换</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(传入的原生对象);</span><br><span class="line"><span class="comment">//原生对象转化成jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">"nav"</span>);</span><br><span class="line"><span class="keyword">var</span> $nav = $(nav);</span><br><span class="line">alert($nav.get(<span class="number">0</span>) == nav);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>检索范围的限制（<code>$(&#39;字符串&#39;,element)</code>）</strong></p><ul><li><p><strong>总结：三种写法对比：</strong></p><ul><li><p>方式一：不推荐 搜索速度最慢</p><ul><li><code>$(&quot;#nav&quot;).css();</code></li><li><code>$(&quot;#nav li&quot;).css();</code></li></ul></li><li><p>方式二：搜索速度最快 链式操作</p><ul><li><code>$(&quot;#nav&quot;).css().children().css();</code></li></ul></li><li><p>方式三：也常用 速度第二快</p><ul><li><code>var $nav = $(&quot;#nav&quot;).css()</code>;</li><li><code>$(&quot;li&quot;,$nav).css()</code>;  <code>$nav</code>限制了搜索范围 速度快</li></ul></li></ul></li></ul></li><li><p><strong>总结： <code>$()</code> <code>jquery</code>核心方法的作用和使用场景</strong></p><ul><li>如果是一个字符串参数并且没有标签对（选择器）<code>$(ul.nav&quot;)</code></li><li>如果是一个字符串参数并且有标签对（创建<code>html</code>标签）<code>$(&quot;&lt;img&gt;&quot;)</code> –最终加到<code>DOM</code>树中 <code>$xx.append(&quot;&lt;img&gt;&quot;)</code>;</li><li>如果是传入一个<code>element dom</code>对象，直接包装为<code>proxy</code>对象返回 <code>$(DOM对象)</code></li><li>如果第一个参数是字符串，第二个是<code>element</code> <code>dom</code>对象的话，那么就是在<code>element</code>这个<code>dom</code>对象里面寻找选择器对应的元素并且代理 <code>$(&quot;li&quot;,$DOM对象)</code></li></ul></li></ul><ul><li><strong>代理模式以及代理内存结构</strong></li></ul><p><img src="https://i.loli.net/2020/03/21/FMu21dLQeNvqKWT.png" alt="代理内存结构1"></p><p><img src="https://i.loli.net/2020/03/21/lokmIVRApfnK9ux.png" alt="代理内存结构2"></p><h4 id="第二节-选择器"><a href="#第二节-选择器" class="headerlink" title="第二节 选择器"></a>第二节 选择器</h4><hr><ul><li><strong>来回顾一下<code>CSS</code>常用的选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>标签选择器</td><td><code>E{css规则}</code></td><td>以文档元素作为选择符</td></tr><tr><td><code>ID</code>选择器</td><td><code>#ID{css规则}</code></td><td><code>ID</code>作为选择符</td></tr><tr><td>类选择器</td><td><code>E.className{css规则}</code></td><td><code>class</code>作为选择符</td></tr><tr><td>群组选择器</td><td><code>E1,E2,E3{css规则}</code></td><td>多个选择符应用同样的样式</td></tr><tr><td>后代选择器</td><td><code>E F{css规则}</code></td><td>元素<code>E</code>的任意后代元素<code>F</code></td></tr></tbody></table><h5 id="选择器引擎规则-39-字符串-39"><a href="#选择器引擎规则-39-字符串-39" class="headerlink" title="选择器引擎规则($(&#39;字符串&#39;))"></a>选择器引擎规则(<code>$(&#39;字符串&#39;)</code>)</h5><ul><li><p><code>css</code>选择器的规则</p><ul><li>标签选择器 – $(‘p’)</li><li><code>id</code>选择器 – $(‘#id’)</li><li>类选择器 – $(‘.class’)</li><li>混合选择器 – $(‘.class p’)</li></ul></li><li><p><code>css3</code>的选择器规则</p></li><li><p>状态和伪类（<code>:even</code> <code>:odd</code> <code>:first</code> <code>:last</code> <code>:eq(index)</code>）</p></li><li><p>属性（<code>[attr=value]</code>）</p></li></ul><h5 id="层级选择器-通过DOM的嵌套关系匹配元素"><a href="#层级选择器-通过DOM的嵌套关系匹配元素" class="headerlink" title="层级选择器:通过DOM的嵌套关系匹配元素"></a>层级选择器:通过<code>DOM</code>的嵌套关系匹配元素</h5><ul><li><code>jQuery</code>层级选择器—-包含选择器、子选择器、相邻选择器、兄弟选择器4种</li><li>a.包含选择器：<code>$(&quot;a b&quot;)</code>在给定的祖先元素下匹配所有后代元素。(不受层级限制)</li><li>b.子选择器：<code>$(&quot;parent &gt; child&quot;)</code>在给定的父元素下匹配所有子元素。</li><li>c.相邻选择器：<code>$(&quot;prev + next&quot;)</code> 匹配所有紧接在<code>prev</code>元素后的<code>next</code>元素。</li><li>d.兄弟选择器：<code>$(&quot;prev ~ siblings&quot;)</code> 匹配prev元素之后的所有<code>sibling</code>元素。</li></ul><h5 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h5><hr><ul><li><strong>基本过滤选择</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>:first</code></td><td>匹配找到的第1个元素</td><td>单个元素</td></tr><tr><td><code>:last</code></td><td>匹配找到的最后一个元素</td><td>单个元素</td></tr><tr><td><code>:eq()</code></td><td>匹配一个给定索引值的元素</td><td>单个元素</td></tr><tr><td><code>:even</code></td><td>匹配所有索引值为偶数的元素</td><td>集合元素</td></tr><tr><td><code>:odd</code></td><td>匹配所有索引值为奇数的元素</td><td>集合元素</td></tr><tr><td><code>:gt(index)</code></td><td>匹配所有大于给定索引值的元素</td><td>集合元素</td></tr><tr><td><code>:lt(index)</code></td><td>匹配所有小于给定索引值的元素</td><td>集合元素</td></tr><tr><td><code>:not</code></td><td>去除所有与给定选择器匹配的元素</td><td>集合元素</td></tr><tr><td><code>:animated</code></td><td>选取当前正在执行动画的所有元素</td><td>集合元素</td></tr><tr><td><code>:focus</code></td><td>选取当前正在获取焦点的元素</td><td>集合元素</td></tr><tr><td><code>:find()</code></td><td>获得当前元素集合中每个元素的后代</td><td>集合元素</td></tr></tbody></table><ul><li><strong>内容过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td><code>:contains(text)</code></td><td>选取含有文本内容为text的元素</td><td>集合元素</td></tr><tr><td><code>:empty</code></td><td>选取不包含子元素获取文本的空元素</td><td>集合元素</td></tr><tr><td><code>:has(selector)</code></td><td>选择含有选择器所匹配的元素的元素</td><td>集合元素</td></tr><tr><td><code>:parent</code></td><td>选取含有子元素或者文本的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>可见过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td><code>:hidden</code></td><td>选择所有不可见的元素</td><td>集合元素</td></tr><tr><td><code>:visible</code></td><td>选取所有可见的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>属性过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>[attribute]</code></td><td>选取拥有此属性的元素</td><td>集合元素</td></tr><tr><td><code>[attribute=value]</code></td><td>选取属性值为<code>value</code>值的元素</td><td>集合元素</td></tr><tr><td><code>[attribue^=value]</code></td><td>选取属性的值以<code>value</code>开始的元素</td><td>集合元素</td></tr><tr><td><code>[attribue$=value]</code></td><td>选取属性的值以<code>value</code>结束的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>子元素过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>:nth-child(index/even/odd)</code></td><td>选取每个父元素下的第index个子元素或者奇偶元素（<code>index</code>从<code>1</code>算起）</td><td>集合元素</td></tr><tr><td><code>:first-child</code></td><td>选取每个元素的第一个子元素</td><td>集合元素</td></tr><tr><td><code>:last-child</code></td><td>选取每个元素的最后一个子元素</td><td>集合元素</td></tr></tbody></table><ul><li><p><code>:nth-child()</code>选择器是很常用的子元素过滤选择器，如下</p><ul><li><code>:nth-child(even)</code>选择每个父元素下的索引值是偶数的元素</li><li><code>:nth-child(odd)</code>选择每个父元素下的索引值是奇数的元素</li><li><code>:nth-child(2)</code>选择每个父元素下的索引值是<code>2</code>的元素</li><li><code>:nth-child(3n)</code>选择每个父元素下的索引值是3的倍数的元素 (<code>n</code>从<code>1</code>开始)</li></ul></li><li><p><strong>表单对象属性过滤选择器</strong></p></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>:enabled</code></td><td>选取所有可用元素</td><td>集合元素</td></tr><tr><td><code>:disabled</code></td><td>选取所有不可用元素</td><td>集合元素</td></tr><tr><td><code>:checked</code></td><td>选取所有被选中的元素（单选框、复选框）</td><td>集合元素</td></tr><tr><td><code>:selected</code></td><td>选取所有被选中的元素（下拉列表）</td><td>集合元素</td></tr></tbody></table><ul><li><strong>表单选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:input</code></td><td>选取所有<code>input</code> <code>textarea</code> <code>select</code> <code>button</code>元素</td></tr><tr><td><code>:text</code></td><td>选取所有单行文本框</td></tr><tr><td><code>:password</code></td><td>选取所有密码框</td></tr><tr><td><code>:radio</code></td><td>选取所有单选框</td></tr><tr><td><code>:checkbox</code></td><td>选取所有多选框</td></tr><tr><td><code>:submit</code></td><td>选取所有的提交按钮</td></tr><tr><td><code>:image</code></td><td>选取所有的图像按钮</td></tr><tr><td><code>:reset</code></td><td>选取所有的重置按钮</td></tr><tr><td><code>:button</code></td><td>选取所有的按钮</td></tr><tr><td><code>:file</code></td><td>选取所有的上传域</td></tr><tr><td><code>:hidden</code></td><td>选取所有的不可见元素</td></tr></tbody></table><ul><li><p><strong>特定位置选择器</strong></p><ul><li><code>:first</code></li><li><code>:last</code></li><li><code>:eq(index)</code></li></ul></li><li><p><strong>指定范围选择器</strong></p><ul><li><code>:even</code></li><li><code>:odd</code></li><li><code>:gt(index)</code></li><li><code>:lt(index)</code></li></ul></li><li><p><strong>排除选择器</strong></p><ul><li><code>:not</code> 非</li></ul></li></ul><h4 id="第三节-选择器优化"><a href="#第三节-选择器优化" class="headerlink" title="第三节 选择器优化"></a>第三节 选择器优化</h4><hr><ul><li><p>使用合适的选择器表达式可以提高性能、增强语义并简化逻辑。常用的选择器中，<code>ID</code>选择器速度最快，其次是类型选择器。</p><ul><li>a. 多用<code>ID</code>选择器</li><li>b. 少直接使用<code>class</code>选择器</li><li>c. 多用父子关系，少用嵌套关系</li><li>d. 缓存<code>jQuery</code>对象</li></ul></li><li><p><strong>使用过滤器</strong></p><ul><li><code>jQuery</code>提供了<code>2</code>种选择文档元素的方式：选择器和过滤器</li><li>a. 类过虑器：根据元素的类属性来进行过滤操作。<ul><li><code>hasClass(className)</code>：判断当前<code>jQuery</code>对象中的某个元素是否包含指定类名，包含返回<code>true</code>，不包含返回<code>false</code></li></ul></li><li>b. 下标过滤器：精确选出指定下标元素<ul><li><code>eq(index)</code>：获取第<code>N</code>个元素。<code>index</code>是整数值，下标从<code>0</code>开始</li></ul></li><li>c. 表达式过滤器 <ul><li><code>filter(expr)/(fn)</code>：筛选出与指定表达式/函数匹配的元素集合。</li><li>功能最强大的表达式过滤器，可接收函数参数，也可以是简单的选择器表达式</li></ul></li><li>d. 映射 <code>map(callback)</code>：将一组元素转换成其他数组</li><li>e. 清洗 <code>not(expr)</code>：删除与指定表达式匹配的元素</li><li>f. 截取 <code>slice(start,end)</code>：选取一个匹配的子集</li></ul></li><li><p><strong>查找</strong></p><ul><li>向下查找后代元素 <ul><li><code>children()</code>:取得所有元素的所有子元素集合（子元素）</li><li><code>find()</code>:搜索所有与指定表达式匹配的元素(所有后代元素中查找)</li></ul></li><li>查找兄弟元素 <code>siblings()</code>查找当前元素的兄弟</li></ul></li></ul><h4 id="第四节-代理对象属性和样式操作"><a href="#第四节-代理对象属性和样式操作" class="headerlink" title="第四节 代理对象属性和样式操作"></a>第四节 代理对象属性和样式操作</h4><hr><ul><li><p><strong>代理对象属性和样式操作</strong></p><ul><li><code>attr</code></li><li><code>prop</code>(一般属性值是<code>boolean</code>的值或者不用设置属性值，一般使用)</li><li><code>css</code>(最好不用，一般我用来做测试)</li><li><code>addClass</code> / <code>removeClass</code></li></ul></li><li><p>操作原生<code>DOM</code>的时候用的方式：一次只能操作一个</p><ul><li>操作属性：<code>setAttribute</code> / <code>getAttribute</code></li><li>操作样式：<code>style.xx = value</code></li><li>操作类样式：<code>className=&#39;&#39;</code></li><li>获取<code>DOM</code>的子元素<code>children</code>属性</li><li><code>DOM</code>里面添加一个子元素<code>appendChild()</code></li></ul></li><li><p>操作<code>jQuery</code>代理对象的时候：批量操作<code>DOM</code>对象(全都是通过方法操作)</p></li><li><p>操作属性：<code>attr()</code>、<code>prop()</code> </p><ul><li><p><code>attr</code>和<code>prop</code>区别：如果属性的值是布尔类型的值 用<code>prop</code>操作 反之<code>attr</code></p></li><li><p><code>attr</code>主要依赖的是Element对象的<code>getArribute()</code>和<code>setAttribute()</code>两个方法</p></li><li><p><code>prop</code>主要依赖的是JS中的对象属性和设置方式</p></li></ul></li><li><p>操作样式：<code>css()</code></p></li><li><p>操作类样式：<code>addClass()</code> <code>removeClass()</code></p></li><li><p>操作<code>DOM</code>子元素：<code>children()</code></p></li><li><p>添加子元素：<code>append()</code></p></li></ul><h4 id="第五节-jQuery中DOM操作"><a href="#第五节-jQuery中DOM操作" class="headerlink" title="第五节 jQuery中DOM操作"></a>第五节 jQuery中DOM操作</h4><hr><ul><li><p><code>DOM</code>是一种与浏览器、平台|语言无关的接口，使用该接口可以轻松的访问 页面中的所有的标准组件</p></li><li><p><strong><code>DOM</code>操作的分类</strong></p><ul><li><p><strong><code>DOM Core</code></strong></p><ul><li><code>DOM core</code>并不专属于<code>JavaScript</code>，任何支持<code>DOM</code>的程序都可以使用</li><li><code>JavaScript</code> 中的<code>getElementByID()</code> <code>getElementsByTagName()</code> <code>getAttribute()</code> <code>setAttribute()</code>等方法都是<code>DOM Core</code>的组成部分</li></ul></li><li><p><strong><code>HTML-DOM</code></strong></p><ul><li><code>HTML -DOM</code>的出现比<code>DOM-Core</code>还要早，它提供一些更简明的标志来描述<code>HTML</code>元素的属性</li><li>比如：使用<code>HTML-DOM</code>来获取某元素的<code>src</code>属性的方法<ul><li><code>element.src</code></li></ul></li></ul></li><li><p><strong><code>CSS-DOM</code></strong></p><ul><li>针对<code>CSS</code>的操作。在<code>JavaScript</code>中，主要用于获取和设置<code>style</code>对象的各种属性，通过改变<code>style</code>对象的属性，使网页呈现不同的效果</li></ul></li></ul></li></ul><h5 id="查找、创建、删除、复制、替换节点"><a href="#查找、创建、删除、复制、替换节点" class="headerlink" title="查找、创建、删除、复制、替换节点"></a>查找、创建、删除、复制、替换节点</h5><ul><li><strong>查找节点</strong><ul><li>查找属性节点 <code>attr()</code> 可以获取各属性的值</li></ul></li><li><strong>创建节点</strong><ul><li><code>$(html)</code>：根据传递的标记字符串，创建<code>DOM</code>对象</li></ul></li><li><strong>插入节点</strong></li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>append()</code></td><td>插入到所有子元素的最后一位</td></tr><tr><td><code>appendTo()</code></td><td>颠倒<code>append()</code>的操作</td></tr><tr><td><code>prepend()</code></td><td>插入到所有子元素的第一位</td></tr><tr><td><code>prependTo()</code></td><td>颠倒<code>prepend()</code>的操作</td></tr><tr><td><code>after()</code></td><td>剪切到元素的后面</td></tr><tr><td><code>insertAfter()</code></td><td>颠倒<code>after()</code>的操作</td></tr><tr><td><code>before()</code></td><td>剪切到元素的前面</td></tr><tr><td><code>insertBefore()</code></td><td>颠倒<code>before()</code>的操作</td></tr></tbody></table><ul><li><p><strong>删除节点</strong></p><ul><li>jQuery提供了三种删除节点的方法 <code>remove()</code> <code>detach()</code> <code>empty()</code></li></ul></li><li><p><strong><code>remove()方法</code></strong></p><ul><li>当某个节点用<code>remove()</code>方法删除后，该节点所包含的所有后代节点将同时被删除，将会只剩下一个DOM元素，不再有事件功能了，但还是可以继续使用删除后的引用<ul><li><strong><code>detach()</code></strong></li></ul></li><li>和<code>remove()</code>方法一样，也是从<code>DOM</code>中去掉所有匹配的元素，与<code>remove()</code>不同的是，所有绑定的事件、附加的数据等，都会被保留下来，等待下一次的使用<ul><li><strong><code>empty()</code></strong></li></ul></li><li><code>empty()</code>方法并不是删除节点，而是清空节点，它能清空元素中所有后代节点</li></ul></li><li><p><strong>复制节点</strong></p><ul><li>使用<code>clone()</code>方法来完成</li><li>在<code>clone()</code>方法中传递一个参数<code>true</code>，同时复制元素中所绑定的事件</li></ul></li><li><p><strong>替换节点</strong></p><ul><li><code>replaceWith()</code>:将所有匹配的元素替换成指定的元素</li><li><code>replaceAll()</code>:用匹配的元素替换掉指定元素</li><li>注意：两者效果一致，只是语法不同 <code>$A.replaceAll($B)</code>等效于 <code>$B.replaceWhith($A)</code>;</li></ul></li></ul><h5 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h5><ul><li>获取样式和设置样式 <code>attr()</code></li><li>追加样式 <code>addClass()</code>，添加<code>属性</code></li><li>移除样式 <code>removeClass()</code>移除<code>属性</code></li><li>切换样式 <ul><li><strong><code>toggle()</code></strong> 方法只要是控制行为上的重复切换（如果元素是显示的，则隐藏；如果元素原来是隐藏的，则显示）</li><li><strong><code>toggleClass()</code></strong> 方法控制样式上的重复切换（如何类名存在，则删除它，如果类名不存在，则添加它） </li></ul></li><li>判断是否含有某个样式<ul><li><strong><code>hasClass()</code></strong> 可以用来判断元素是否含有某个<code>class</code>,如有返回<code>true</code> 该方法等价于<code>is()</code></li><li><strong>设置和获取HTML、文本和值</strong></li></ul></li><li><strong><code>html()</code></strong><ul><li>此方法类似<code>JavaScript</code>中<code>innerinnerHTML</code>属性，可以用来读取和设置某个元素中的<code>HTML</code>内容</li></ul></li><li><strong><code>text()</code></strong><ul><li>此方法类型<code>JavaScript</code>中<code>innerHTML</code>，用来读取和设置某个元素中的文本内容</li></ul></li><li><strong><code>val()</code></strong><ul><li>此方法类似<code>JavaScript</code>中的<code>value</code>属性，用来设置获取元素的值。无论是文本框、下拉列表还是单选框，都可以返回元素的值，如果元素多选，返回一个包含所有选择的值的数组</li></ul></li></ul><h5 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h5><ul><li><strong><code>children()</code></strong> 方法<ul><li>该方法用来取得匹配元素的子元素集合</li><li><code>childre()</code>方法只考虑子元素而不考虑其他后代元素</li></ul></li><li><strong><code>next()</code></strong> 方法<ul><li>返回被选元素的后一个同级元素</li></ul></li><li><strong><code>nextAll()</code></strong> 方法<ul><li>当前元素下面的所有同级元素</li></ul></li><li><strong><code>prev()</code></strong> 方法<ul><li>返回被选元素的前一个同级元素</li></ul></li><li><strong><code>prevAll()</code></strong> 方法<ul><li>当前元素前面的所有同级元素</li></ul></li><li><strong><code>siblings()</code></strong> 方法<ul><li>用于匹配元素前后所有的同辈元素</li></ul></li><li><strong><code>prevUntil()</code></strong> 方法<ul><li>prevUntil()方法返回<code>selector</code>与<code>stop</code>之间的每个元素<code>之前</code>所有同级元素</li><li>$(“selector”).prevvUntil(“stop”)</li><li>返回在类名为 “start” 和 “stop”的两个<code>&lt;li&gt;</code>元素之间的所有同级元素：</li></ul></li><li><strong><code>nextUntil()</code></strong> 方法<ul><li>nextUntil()方法返回<code>selector</code>与<code>stop</code>之间的每个元素<code>之后</code>所有同级元素</li><li>$(“selector”).nextUntil(“stop”)</li><li>返回在类名为 “start” 和 “stop”的两个<code>&lt;li&gt;</code>元素之间的所有同级元素：</li></ul></li><li><strong><code>parent()</code></strong> 方法<ul><li>获得集合中每个元素的父级元素</li></ul></li><li><strong><code>parents()</code></strong> 方法<ul><li>获得集合中每个元素的祖先元素<ul><li><strong><code>offsetparent()</code></strong> 方法</li></ul></li><li>返回离自己最近用于定位的父节点元素<ul><li><strong><code>closest()</code></strong> 方法</li></ul></li><li>从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素</li></ul></li></ul><h5 id="定位操作"><a href="#定位操作" class="headerlink" title="定位操作"></a>定位操作</h5><ul><li><code>CSS DOM</code>技术简单的来说就是读取和设置<code>style</code>对象的各种属性</li><li>用<code>css()</code>方法获取元素的样式属性，可以同时设置多个样式属性</li><li><strong><code>CSS DOM</code>中关于元素定位有几个常用的方法</strong></li><li><strong><code>offset()</code></strong> 方法<ul><li>它的作用是获取元素在当前视窗的相对偏移其中返回的对象包含两个属性，即<code>top</code>和<code>left</code>，他只对可见元素有效 </li></ul></li><li><strong><code>position()</code></strong> 方法<ul><li>获取相对于最近的一个<code>position()</code>样式属性设置为<code>relative</code>或者<code>absolute</code>的祖父节点的相对偏移，与<code>offset()</code>一样，他返回的对象也包括两个属性，即<code>top</code>和<code>left</code></li></ul></li><li><strong><code>scrollTop()</code></strong> 方法和 <strong><code>scrollLeft()</code></strong> 方法<ul><li>这两个方法的作用分别是获取元素的滚动条距顶端的距离和距左侧的距离</li><li><strong>一张图总结以上的位置关系(项目中很常用-必须要弄清楚)</strong></li></ul></li><li><strong><code>width()</code></strong> 方法<ul><li>取得第一个匹配元素当前计算的实际宽度值（px）</li></ul></li><li><strong><code>height()</code></strong> 方法<ul><li>取得匹配元素当前计算的实际高度值（px）。</li></ul></li><li><strong><code>innerWidth()</code></strong> 方法<ul><li>获取第一个匹配元素内部区域宽度（包括补白、不包括边框）（content + padding）</li></ul></li><li><strong><code>innerHeight()</code></strong> 方法<ul><li>获取第一个匹配元素内部区域高度（包括补白、不包括边框）（content + padding）</li></ul></li><li><strong><code>outerWidth()</code></strong> 方法<ul><li>获取第一个匹配元素外部宽度（默认包括补白和边框）（content + padding + border），参数为<code>true</code>的时候，求出宽度带有<code>margin</code></li></ul></li><li><strong><code>outerHeight()</code></strong> 方法<ul><li>获取第一个匹配元素外部高度（默认包括补白和边框）（content + padding + border），参数为<code>true</code>的时候，求出宽度带有<code>margin</code></li></ul></li></ul><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><ul><li><p><strong><code>each()</code></strong> 方法</p><ul><li>遍历数组元素</li><li>each(function(index,ele){}) index：代表索引值，ele：代表元素本身</li></ul></li><li><p><strong><code>wrap()</code></strong> 方法</p><ul><li>把选中的元素用其他元素的结构化标记包裹起来</li><li>如：<code>$(&#39;li&#39;).wrap($(&#39;&lt;div&gt;&#39;))</code>，把每一个<code>li</code>用<code>div</code>包裹起来</li><li><code>wrap(function(index,ele){})</code></li></ul></li><li><p><strong><code>wrapInner()</code></strong> 方法</p><ul><li>在选中的元素里面用其他元素的结构化标记包裹起来</li><li>如：<code>$(&#39;li&#39;).wrap($(&#39;&lt;p&gt;&#39;))</code>，用<code>div</code>把<code>li</code>里面包裹起来</li><li><code>wrapInner(function(index,ele){})</code></li></ul></li><li><p><strong><code>wrapAll()</code></strong> 方法</p><ul><li>将所有选中的元素用单个元素包裹起来</li><li>容易破坏页面结构</li></ul></li><li><p><strong><code>unwrap()</code></strong> 方法</p><ul><li>unwrap() 方法删除被选元素的父元素</li></ul></li><li><p><strong><code>end()</code></strong> 方法</p><ul><li>回到最近的一个”破坏性”操作之前。即，将匹配的元素列表变为前一次的状态。</li><li>他之前会在<code>prevObject</code>上面存储上一次操作的内容，<code>end()</code>就是调用了prevObject里面的内容，所以说调取<code>end()</code>就相当于调取了<code>prevObject</code></li></ul></li><li><p><strong><code>add()</code></strong> 方法</p><ul><li>将元素添加到选好的元素的集合中</li><li>把<code>&lt;p&gt;</code>和<code>&lt;span&gt;</code>元素添加到已存在的元素组合中<code>&lt;h1&gt;</code></li><li>可以集中操作</li><li><code>$(&#39;li&#39;).eq(0).add($(&#39;li&#39;).eq(4)).css({width:100})</code></li></ul></li><li><p><strong><code>slice(a,b)</code></strong> 方法</p><ul><li>选取一个匹配的子集</li><li>选取<code>a</code>到<code>b</code>之间的内容，包括<code>a</code>,不包括<code>b</code>（算头不算尾）</li></ul></li></ul><h4 id="第六节-jQuery中的事件"><a href="#第六节-jQuery中的事件" class="headerlink" title="第六节 jQuery中的事件"></a>第六节 jQuery中的事件</h4><hr><ul><li><p><strong>事件对象的属性</strong></p><ul><li><p><code>event.type</code>：获取事件的类型</p></li><li><p><code>event.target</code>:获取到触发事件的元素</p></li><li><p><code>event.preventDefault</code>方法 阻止默认事件行为</p></li><li><p><code>event.stopPropagation()</code>阻止事件的冒泡</p></li><li><p><code>keyCode</code>：只针对于<code>keypress</code>事件，获取键盘键数字 按下回车，<code>13</code></p></li><li><p><code>event.pageX / event.pageY</code> 获取到光标相对于页面文档的<code>x</code>坐标和<code>y</code>坐标</p><ul><li>如果没有<code>jQuery</code>，在IE浏览器中用<code>event.x</code> / <code>event.y</code>;在<code>Firefox</code>浏览器中用<code>event.pageX</code> / <code>event.pageY</code>。如果页面上有滚动条还要加上滚动条的宽度和高度</li></ul></li><li><p><code>event.clientX</code>：光标对于浏览器窗口的水平坐标</p></li><li><p><code>event.clientY</code>：光标对于浏览器窗口的垂直坐标</p></li><li><p><code>event.screenX</code>：光标对于电脑屏幕的水平坐标    电脑屏幕  </p></li><li><p><code>event.screenY</code>：光标对于电脑屏幕的水平坐标 </p></li><li><p><code>event.which</code> 该方法的作用是在鼠标单击事件中获取到鼠标的左、中、右键，和在键盘事件中的按键 <code>1</code>代表左键  <code>2</code>代表中键  <code>3</code>代表右键</p></li></ul></li><li><p><strong>事件冒泡</strong></p><ul><li>什么是冒泡<ul><li>在页面上可以有多个事件，也可以多个元素影响同一个元素</li><li>从里到外</li><li>嵌套关系</li><li>相同事件</li><li>其中的某一父类没有相同事件时,继续向上查找</li></ul></li></ul></li><li><p><strong>停止事件冒泡</strong></p><ul><li>停止事件冒泡可以阻止事件中其他对象的事件处理函数被执行</li><li>在<code>jQuery</code>中提供了<strong><code>stopPropagation()</code></strong>方法</li></ul></li><li><p><strong>阻止默认行为</strong></p><ul><li>网页中元素有自己的默认行为，例如：单击超链接后会跳转、单击提交后表单会提交，有时需要阻止元素的默认行为</li><li>在<code>jQuery</code>中提供了<code>preventDefault()</code>方法来阻止元素的默认行为</li></ul></li><li><p><strong>事件捕获</strong></p><ul><li>事件捕获和冒泡是相反的过程，事件捕获是从最顶端往下开始触发</li><li>并非所有的浏览器都支持事件捕获，并且这个缺陷无法通过<code>JavaScript</code>来修复。<code>jQuery</code>不支持事件捕获，如需要用事件捕获，要用原生的<code>JavaScript</code></li></ul></li><li><p><strong>绑定自定义事件</strong></p><ul><li><code>trigger()</code>：方法触发被选元素的自定义指定事件类型</li><li>例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#demo'</span>).on(<span class="string">'eat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event,a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#demo'</span>).tigger(<span class="string">'eat'</span>,[<span class="number">100</span>]);</span><br></pre></td></tr></table></figure></li><li>会事件冒泡</li></ul></li><li><p><strong><code>on()</code>;事件绑定方法</strong></p><ul><li><p><code>on(events,[selector],[data],fn);</code></p></li><li><p><strong><code>bind()</code>;绑定，旧版本的</strong></p></li><li><p>为匹配元素绑定处理方法</p></li><li><p>需要给一个元素添加多个事件 ，事件执行一样时候</p></li><li><p><code>one()</code>：只执行一次         </p></li></ul></li></ul><ul><li><strong>绑定特定事件类型方法</strong>：</li></ul><table><thead><tr><th>分类</th><th>页面载入方法</th><th>说明</th></tr></thead><tbody><tr><td>页面载入</td><td><code>ready(fn)</code></td><td>当<code>DOM</code>载入就绪可以绑定一个要执行的函数</td></tr></tbody></table><table><thead><tr><th>分类</th><th>事件绑定（解除绑定）方法</th><th>说明</th></tr></thead><tbody><tr><td>事件绑定</td><td><code>on(type,[selector],[data],fn)</code></td><td>在选择元素上绑定一个或者多个事件处理函数，[data]是参数，[selector]是事件源对象</td></tr><tr><td>事件绑定</td><td><code>off()</code></td><td>移除<code>on</code>绑定的事件</td></tr><tr><td>事件绑定</td><td><code>one()</code></td><td>只触发绑定事件一次</td></tr><tr><td>事件绑定</td><td><code>bind(type,[data],fn)</code></td><td>为每个匹配元素的特定事件绑定一个事件处理函数</td></tr><tr><td>事件绑定</td><td><code>unblind()</code></td><td>解除绑定</td></tr><tr><td>事件绑定</td><td><code>delegate(selector,eventType,handler)</code></td><td>为所有选择匹配元素附加一个或多个事件处理函数</td></tr><tr><td>事件绑定</td><td><code>undelegate()</code></td><td>移除绑定</td></tr></tbody></table><table><thead><tr><th>分类</th><th>事件动态方法</th><th>说明</th></tr></thead><tbody><tr><td>事件动态</td><td><code>live(type,fn)</code></td><td>对动态生成的元素进行事件绑定</td></tr><tr><td>事件动态</td><td><code>die(type,fn)</code></td><td>移除<code>live()</code>绑定的事件</td></tr></tbody></table><table><thead><tr><th>分类</th><th>鼠标交互方法</th><th>说明</th></tr></thead><tbody><tr><td>交互事件</td><td><code>click()</code></td><td>当鼠标指针点击元素时，触发<code>click</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mousedown(fn)</code></td><td>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 <code>mousedow</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseenter(fn)</code></td><td>鼠标指针移动到元素上时触发<code>mouseenter</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseleave(fn)</code></td><td>当鼠标指针离开元素时，会发生<code>mouseleave</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mousemove(fn)</code></td><td>当鼠标指针在指定的元素中移动时，就会发生<code>mousemove</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseout(fn)</code></td><td>当鼠标指针从元素上移开时，发生<code>mouseout</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseover(fn)</code></td><td>当鼠标指针位于元素上方时，会发生<code>mouseover</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseup(fn)</code></td><td>当在元素上放松鼠标按钮时，会发生<code>mouseup</code>方法</td></tr><tr><td>鼠标事件</td><td><code>blur(fn)</code></td><td>当元素失去焦点时触发<code>blur</code>方法</td></tr><tr><td>鼠标事件</td><td><code>focus()</code></td><td>当元素获得焦点时，触发<code>focus</code>方法</td></tr><tr><td>鼠标事件</td><td><code>hover()</code></td><td>鼠标移入移出触发<code>hover</code>方法</td></tr><tr><td>鼠标事件</td><td><code>toggle(fn1,fn2,[fn3],[fn4])</code></td><td>每单击后依次调用函数</td></tr><tr><td>鼠标事件</td><td><code>change()</code></td><td>当元素的值发生改变时，会发生<code>change</code>方法</td></tr><tr><td>鼠标事件</td><td><code>submit()</code></td><td>当提交表单时，会发生<code>submit</code>方法</td></tr></tbody></table><table><thead><tr><th>分类</th><th>键盘交互方法</th><th>说明</th></tr></thead><tbody><tr><td>键盘事件</td><td><code>keydown()</code></td><td>当键盘或按钮被按下时，发生<code>keydown</code>事件。</td></tr><tr><td>键盘事件</td><td><code>keypress()</code></td><td>当键盘按键被按下并释放一个键时发生<code>keypress</code>事件</td></tr><tr><td>键盘事件</td><td><code>keyup()</code></td><td>当按钮被松开时，发生<code>keyup</code>事件。它发生在当前获得焦点的元素上</td></tr></tbody></table><table><thead><tr><th>分类</th><th>窗口操作方法</th><th>说明</th></tr></thead><tbody><tr><td>窗口操作</td><td><code>resize(fn)</code></td><td>绑定一个处理函数</td></tr><tr><td>窗口操作</td><td><code>scroll(fn)</code></td><td>绑定一个处理函数</td></tr></tbody></table><h4 id="第七节-jQuery动画"><a href="#第七节-jQuery动画" class="headerlink" title="第七节 jQuery动画"></a>第七节 jQuery动画</h4><hr><ul><li><code>JavaScrip</code>t语言本身不支持动画设计，必须通过改变<code>CSS</code>来实现动画效果</li></ul><p><strong>显隐动画</strong></p><ul><li><p><code>show()</code>:显示 <code>hide()</code>:隐藏</p><ul><li>原理：<code>hide()</code>通过改变元素的高度宽度和不透明度，直到这三个属性值到<code>0</code></li><li><code>show()</code>从上到下增加元素的高度，从左到右增加元素宽度，从<code>0</code>到<code>1</code>增加透明度，直至内容完全可见</li><li>参数：<ul><li><code>show(speed,callback)</code><ul><li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li><li><code>callback</code>: 动画完成时执行的方法</li></ul></li></ul></li></ul></li><li><p>显示和隐藏式一对密不可分的动画形式</p></li><li><p><strong>显隐切换</strong></p><ul><li><code>toggle()</code>:切换元素的可见状态<ul><li>原理：匹配元素的宽度、高度以及不透明度，同时进行动画，隐藏动画后将<code>display</code>设置为<code>none</code></li><li>参数：<ul><li><code>toggle(speed)</code></li><li><code>toggle(speed,callback)</code></li><li><code>toggle(boolean)</code><ul><li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li><li><code>easing</code>： 使用哪个缓冲函数来过渡的字符串(<code>linear</code>/<code>swing</code>)</li><li><code>callback</code>： 动画完成时执行的方法</li><li><code>boolean</code>:<code>true</code>为显示 <code>false</code>为隐藏</li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>滑动</strong></p><ul><li><p><strong>显隐滑动效果</strong></p><ul><li><p><code>slideDown()</code>:滑动显示</p></li><li><p><code>slideUp()</code>:滑动隐藏</p></li><li><p>参数:</p><ul><li><code>slideDown(speed,callback)</code></li><li><code>slideUp(speed,callback)</code></li></ul></li></ul></li><li><p><strong>显隐切换滑动</strong></p><ul><li><code>slideToggle()</code>:显隐滑动切换</li><li>参数:<ul><li><code>slideToggle(speed,callback)</code></li></ul></li><li>如果是显示的，那么滑动隐藏</li><li>如果是隐藏的，那么滑动显示</li></ul></li></ul><p><strong>渐变：通过改变不透明度</strong></p><ul><li><p><strong>淡入淡出</strong></p><ul><li><code>fadeIn()</code> 淡入</li><li><code>fadeOut()</code> 淡出</li><li>参数：<ul><li><code>fadeIn(speed,callback)</code></li><li><code>fadeOut(speed,callback)</code></li></ul></li></ul></li><li><p><strong>设置淡出透明效果</strong></p><ul><li><code>fadeTo()</code>⁭：以渐进的方式调整到指定透明度</li><li>参数：<ul><li><code>fadeTo(speed,opacity,callback)</code></li></ul></li></ul></li><li><p><strong>渐变切换:结合<code>fadeIn</code>和<code>fadeOut</code></strong></p><ul><li><code>fadeToggle()</code><ul><li>参数:<ul><li><code>fadeOut(speed,callback)</code></li></ul></li><li>如果是显示的，那么淡入</li><li>如果是隐藏的，那么淡出</li></ul></li></ul></li></ul><ul><li><strong>自定义动画：<code>animate()</code></strong><ul><li>注意：在使用<code>animate</code>方法之前，为了影响该元素的<code>top</code>  <code>left</code> <code>bottom</code>  <code>right</code>样式属性，必须先把元素的<code>position</code>样式设置为<code>relative</code>或者<code>absolute</code></li><li><strong>animate()</strong> 方法有四个参数<ul><li><strong>animate({变化参数},’时间’,’运动速率’,’回调函数’)</strong></li><li><strong>变化参数</strong><ul><li>比如：<code>width</code>,<code>height</code></li></ul></li><li><strong>回调函数</strong><ul><li>执行完动画返回的结果，也可以进行下一次动画</li></ul></li><li><strong>运动速率</strong><ul><li><code>linear</code>代表匀速（直线）运动</li><li><code>swing</code>代表慢快慢的运动</li><li><code>jQuery</code>当中就提供了这两种速率，如果想要更多效果，可以引入<code>jQuery</code>插件:<code>jquery.sasing.js</code></li><li><img src="https://i.loli.net/2020/03/21/QHSlsVgv4WF1Ka5.jpg" alt="easing插件的效果"></li></ul></li></ul></li><li><strong>停止元素的动画</strong><ul><li>很多时候需要停止匹配正在进行的动画，需要使用stop() </li><li><code>stop()</code>语法结构：<code>stop([clearQueue],[gotoEnd]);</code><ul><li>都是可选参数，为布尔值<ul><li>第一个参数，是否停止后续所有运动，<code>false</code>，不停止，<code>true</code>，停止</li><li>第二个参数：是否立即到达当前目标点，<code>false</code>：不到达，<code>true</code>：到达</li></ul></li><li>如果直接使用<code>stop()</code>方法，会立即停止当前正在进行的动画</li></ul></li></ul></li><li><strong>判断元素是否处于动画状态</strong><ul><li>如果不处于动画状态，则为元素添加新的动画，否则不添加<br><code>if(!$(element).is(&quot;:animated&quot;)){ //判断元素是否处于动画状态}</code></li><li>这个方法在<code>animate</code>动画中经常被用到，需要注意</li></ul></li><li><strong>延迟动画：delay()</strong><ul><li>在动画执行过程中，如果你想对动画进行延迟操作，那么使用<code>delay()</code></li></ul></li></ul></li><li>用<code>animate</code>模拟<code>show()</code>:</li><li><code>show</code>: 表示由透明到不透明</li><li><code>toggle</code>: 切换</li><li><code>hide</code>:表示由显示到隐藏</li></ul><blockquote><p>里面可以用各种样式，也可以设置事件，<code>linear</code>代表匀速（直线）运动，<code>swing</code>代表慢快慢的运动</p></blockquote><ul><li><strong>动画方法总结</strong></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>hide()</code>和<code>show()</code></td><td>同时修改多个样式属性即高度和宽度和不透明度</td></tr><tr><td><code>fadeIn()</code>和<code>fadeOut()</code></td><td>只改变不透明度</td></tr><tr><td><code>slideUp()</code>和<code>slideDown()</code></td><td>只改变高度</td></tr><tr><td><code>fadeTo()</code></td><td>只改变不透明度</td></tr><tr><td><code>toggle()</code></td><td>用来代替<code>show()</code>和<code>hide()</code>方法，所以会同时修改多个属性即高度、宽度和不透明度</td></tr><tr><td><code>slideToggle()</code></td><td>用来代替<code>slideUp</code>和<code>slideDown()</code>方法，所以只能改变高度</td></tr><tr><td><code>fadeToggle()</code></td><td>用来代替<code>fadeIn()</code>和<code>fadeOut</code>方法，只能改变不透明度</td></tr><tr><td><code>animate()</code></td><td>属于自定义动画，以上各种动画方法都是调用了<code>animate</code>方法。此外，用<code>animate</code>方法还能自定义其他的样式属性，例如：<code>left</code> <code>marginLeft ``scrollTop</code>等</td></tr></tbody></table><h4 id="第八节-jQuery工具方法"><a href="#第八节-jQuery工具方法" class="headerlink" title="第八节 jQuery工具方法"></a>第八节 jQuery工具方法</h4><hr><ul><li><p>实例方法是定义在原型上面</p></li><li><p>定义在<code>jQuery</code>函数上面的方法就叫做工具方法，如：<code>jQuery.type()</code>，<code>$.type()</code></p></li><li><p><strong>type()</strong></p><ul><li>判断数据类型</li><li>原生<code>js</code>里面的判断数据类型<ul><li><code>typeof arr</code>;</li><li><code>arr instanceof Array</code></li><li><code>arr.constructor == &#39;Array&#39;</code></li><li><code>Object.prototype.toString.call(arr)</code>;</li></ul></li></ul></li><li><p><strong>trim()</strong></p><ul><li>消除两边的空格（字符串中间的空格消除不掉）</li></ul></li><li><p><strong>proxy()</strong></p><ul><li>改变<code>this</code>指向</li><li>参数1：要改变<code>this</code>指向的函数或变量</li><li>参数2：<code>this</code>要指向的函数或变量</li><li>如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(a + <span class="string">''</span> + b);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   name: <span class="string">'aimee'</span></span><br><span class="line"> &#125;</span><br><span class="line"> $.proxy(show,obj)(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"> <span class="comment">// 把show的this指向obj</span></span><br><span class="line"> <span class="comment">// 在最后还可以传参，也可以这样传参</span></span><br><span class="line"> <span class="comment">// $.proxy(show,obj,1,2);</span></span><br><span class="line"> <span class="comment">// $.proxy(show,obj,1)(2);</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 柯里化的思想</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">nianji,xuehao</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(nianji);</span><br><span class="line">   <span class="built_in">console</span>.log(xuehao);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   name: <span class="string">'aimee'</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> fn = $.proxy(show,obj,<span class="number">2014</span>);</span><br><span class="line"> fn(<span class="number">201401010101</span>);</span><br><span class="line"> fn(<span class="number">201402020202</span>);</span><br><span class="line"> <span class="comment">// 不用再次传参,直接传需要的，不用传好几个参数了</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>noConflict()</strong></p><ul><li><p>防止冲突，如<code>var jq = $.noConflict(removeAll)</code></p></li><li><p>让渡变量<code>$</code>的<code>jQuery</code>控制权</p></li><li><p>该方法释放 <code>jQuery</code>对<code>$</code>变量的控制。</p></li><li><p>该方法也可用于为<code>jQuery</code>变量规定新的自定义名称</p></li></ul></li><li><p><strong>parseJSON()</strong></p><ul><li>解析一个<code>JSON</code>字符串，如<code>var obj = $.parseJSON(&#39;{&quot;name&quot;:&quot;John&quot;}&#39;)</code></li><li>用于将符合标准格式的的<code>JSON</code>字符串转为与之对应的<code>JavaScript</code>对象</li></ul></li><li><p><strong>makeArry()</strong></p><ul><li>把类数组转换成数组</li></ul></li><li><p><strong>extend()</strong></p><ul><li><p>定义在了<code>jQuery</code>函数上面</p></li><li><p>在<code>jQuery</code>源码当中，有很多的工具方法都是基于<code>extend</code>方法来实现的</p></li><li><p>扩展提供了新的<code>jQuery</code>工具方法，用来拓展一个新的工具或实例方法</p></li><li><p>这两个函数是一样的，只不过一个是在<code>jQuery</code>方法上面，一个是在<code>prototype</code>上面</p></li><li><p><strong>$.extend()</strong></p></li><li><p><strong>$.fn.extend()</strong></p><ul><li><code>fn</code>就是<code>prototype</code>,<code>$.fn</code>就是相当于<code>$.prototype</code></li><li>这个<code>extend()</code>定义在了<code>prototype</code>上面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用来拓展一个新的工具或实例方法，就是自己在<span class="string">`jQuery`</span>方法上创建一个方法,</span><br><span class="line"></span><br><span class="line">$.extend(&#123;</span><br><span class="line">  leftTrim: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^\s+/g</span>;</span><br><span class="line">    <span class="keyword">return</span> str.replace(reg,<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log($.leftTrim(<span class="string">'         dg'</span>));</span><br><span class="line"><span class="comment">// 调用这个 leftTree，就和调用其他的 jQuery 方法一样</span></span><br><span class="line"><span class="comment">// 作用是消除左侧空格</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">还可以合并对象，<span class="string">`fn.extend`</span>同时适用</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  parson1: &#123;</span><br><span class="line">    name: <span class="string">'dg'</span>,</span><br><span class="line">    age: <span class="number">55</span></span><br><span class="line">  &#125;,</span><br><span class="line">  number: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  parson2: &#123;</span><br><span class="line">    name: <span class="string">'cg'</span>,</span><br><span class="line">    age: <span class="number">30</span></span><br><span class="line">  &#125;,</span><br><span class="line">  number: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aa = $.extend(<span class="literal">true</span>,obj1,obj2)</span><br><span class="line"><span class="comment">// 把obj2和合并到了obj1</span></span><br><span class="line"><span class="comment">// true是深拷贝，取掉true就是浅拷贝</span></span><br><span class="line"><span class="comment">// 后面相同的会覆盖到前面的</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Callbacks()</strong></p><ul><li><p>回调函数，返回回调函数对象</p></li><li><p>管理回调队列</p></li><li><p>可以混合搭配，同时使用</p><ul><li><strong>fire()</strong> 执行函数（可执行多次）</li><li><strong>add()</strong> 调取函数（可传参多个）</li><li><strong>once()</strong> 参数，只执行一次<code>fire</code>函数</li><li><strong>unique</strong> 参数，在<code>add</code>调用函数里，相同的函数只执行一遍</li><li><strong>memory</strong> 参数，记忆，<code>fire()</code>后面的函数依旧会被执行</li><li><strong>stopOnFalse</strong> 参数，上个回调函数返回<code>false</code>之后中断后面的回调函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cb = $.Callbacks(<span class="string">'memory once stopFalse unique'</span>) </span><br><span class="line"><span class="comment">// memory：fire后面的函数依旧会被执行</span></span><br><span class="line"><span class="comment">// once：fire函数只会执行一次</span></span><br><span class="line"><span class="comment">// stopOnFalse：fn2返回了false，fn3不会被执行，和memory相抵触，没有作用</span></span><br><span class="line"><span class="comment">// unique：在一个add调用函数里面，只执行一遍函数</span></span><br><span class="line"></span><br><span class="line">cb.add(fn1,fn1); <span class="comment">// 调用函数fn1,fn1</span></span><br><span class="line">cb.add(fn2); <span class="comment">// 调用函数fn2</span></span><br><span class="line">cb.fire(); <span class="comment">// 执行函数队列</span></span><br><span class="line">cb.fire(); <span class="comment">// 执行函数队列</span></span><br><span class="line">cb.add(fn3); <span class="comment">// 调用函数fn3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Deferred()</strong></p><ul><li>延迟回调对象，相当于有状态的<code>Callbacks()</code></li><li>添加函数<ul><li><strong>done</strong> 对象被受理时，调用添加的处理程序</li><li><strong>fail</strong> 对象被拒绝时，调用添加的处理程序</li><li><strong>progress</strong> 调用正在进行中的对象上进行的回调函数</li></ul></li><li>触发函数<ul><li><strong>resolve</strong> 成功的状态</li><li><strong>reject</strong> 失败的状态</li><li><strong>notity</strong> 进行中的状态</li><li><strong>promise</strong> 不能触发函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = c$.Deferred();  <span class="comment">// 让一个变量代替Deferred，解决重复使用</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;dtd.notify()&#125;,<span class="number">500</span>)<span class="comment">// notity()，进行中的状态</span></span><br><span class="line"> setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;dtd.reject()&#125;,<span class="number">1000</span>)<span class="comment">// reject()，失败的状态</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;dtd.resolve()&#125;,<span class="number">2000</span>)<span class="comment">// resolve()，成功的状态</span></span><br><span class="line">  <span class="keyword">return</span> dtd.promise(); <span class="comment">// 返回dtd函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb = demo(); <span class="comment">// 闭包，接受dtd函数</span></span><br><span class="line"><span class="comment">//cb.resolve(); 这个不可以在外面执行了，因为dtd返回的是只读的Deferred对象</span></span><br><span class="line"></span><br><span class="line">cb.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// done，对象成功的时候调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// fail，对象失败的时候调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.progress(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// progress，正在进行时调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功和失败的状态不会改变，如果失败就不会执行成功了，但是进行中可以改变状态</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>when()</strong></p><ul><li>里面传的参数是<code>Deferred</code>对象</li><li>执行完之后会<code>return</code>出来一个<code>Deferred</code>对象</li><li>当<code>when</code>里面传的几个<code>Deferred</code>对象，同时都为成功的状态时，才能触发<code>done</code>里面的内容，但凡有一个失败的，就会执行<code>fail</code>里面的内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred();<span class="comment">// 让回调函数有转台</span></span><br><span class="line">  dtd.resolve(); <span class="comment">// 成功的状态</span></span><br><span class="line">  <span class="keyword">return</span> dtd.promise(); <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 让回调函数有转台</span></span><br><span class="line">  dtd.resolve();<span class="comment">// 成功的状态</span></span><br><span class="line">  <span class="keyword">return</span> dtd.promise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb = aa();</span><br><span class="line"><span class="keyword">var</span> cb2 = bb();</span><br><span class="line"></span><br><span class="line">$.when(cb,cb2)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.progress(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="第九节-jQuery与Ajax"><a href="#第九节-jQuery与Ajax" class="headerlink" title="第九节 jQuery与Ajax"></a>第九节 jQuery与Ajax</h4><hr><ul><li><strong>Ajax</strong>简介 :<ul><li><code>Asynchronous Javascript And XML</code> （异步的<br><code>JavaScript</code>和<code>XML</code>）</li><li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li></ul></li><li><strong><code>Ajax</code>优势与不足</strong><ul><li><strong><code>Ajax</code>优势</strong><ul><li>优秀的用户体验<ul><li>这是<code>Ajax</code>下最大的有点，能在不刷新整个页面前提下更新数据</li></ul></li><li>提高<code>web</code>程序的性能<ul><li>与传统模式相比，<code>Ajax</code>模式在性能上最大的区别在于传输数据的方式，在传统模式中，数据的提交时通过表单来实现的。<code>Ajax</code>模式只是通过<code>XMLHttpRequest</code>对象向服务器提交希望提交的数据，即按需发送</li></ul></li><li>减轻服务器和带宽的负担<ul><li><code>Ajax</code>的工作原理相当于在用户和服务器之间加了一个中间层，似用户操作与服务器响应异步化。它在客户端创建<code>Ajax</code>引擎，把传统方式下的一些服务器负担的工作转移到客户端，便于客户端资源来处理，减轻服务器和带宽的负担</li></ul></li></ul></li><li><strong>Ajax的不足</strong><ul><li>浏览器对<code>XMLHttpRequest</code>对象的支持度不足</li><li>破坏浏览器前进、后退按钮的正常功能</li><li>对搜索引擎的支持的不足</li><li>开发和调试工具的缺乏</li></ul></li></ul></li></ul><h5 id="创建一个Ajax请求"><a href="#创建一个Ajax请求" class="headerlink" title="创建一个Ajax请求"></a>创建一个Ajax请求</h5><hr><ul><li><p><strong><code>serialize()</code></strong> 方法</p><ul><li>串联表单对象，序列表表格内容为字符串，用于 Ajax 请求。</li></ul></li><li><p><strong><code>serializeArray()</code></strong> 方法</p><ul><li>把串联表单对象的形式用数组表示出来</li></ul></li><li><p><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成</p></li><li><p><strong>创建<code>ajax</code>对象 <code>var xhr = new XMLHttpRequest();</code></strong></p></li><li><p><strong>准备发送请求</strong></p><ul><li><p><strong><code>get</code> / <code>post</code></strong></p><ul><li><p><strong><code>get</code></strong></p><ul><li>传递的数据放在<code>URL</code>后面</li><li>中文编码 <code>encodeURI( &#39;&#39; )</code>;</li><li>缓存 在数据后面加上随机数或者日期对象或者……</li></ul></li><li><p><strong><code>post</code></strong></p><ul><li>传递的数据放在<code>send()</code>里面，并且一定要规定数据格式</li><li>没有缓存问题</li></ul></li><li><p><code>form</code>表单中:</p><ul><li><code>action</code>:<ul><li><code>method</code>: (默认是<code>get</code>)</li><li><code>get</code>: 会在<code>url</code>里面以 <code>name=value</code> , 两个数据之间用 <code>&amp;</code> 连接</li></ul></li><li><code>post</code>:</li></ul></li><li><p><code>enctype</code>: <code>&quot;application/x-www-form-urlencoded&quot;</code></p></li></ul></li><li><p><code>url</code></p></li><li><p>是否异步</p><ul><li>同步(<code>false</code>)：阻塞</li><li>异步(<code>true</code>)：非阻塞</li></ul></li></ul></li><li><p><strong>正式发送请求</strong></p></li><li><p><strong><code>ajax</code>请求处理过程</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">alert( xhr.responseText );</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>onreadystatechange</code> ：当处理过程发生变化的时候执行下面的函数</p></li><li><p><code>readyState</code> ：<code>ajax</code>处理过程</p><ul><li>0：请求未初始化（还没有调用 <code>open()</code>）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成；您可以获取并使用服务器的响应了。</li></ul></li><li><p><code>responseText</code> ：请求服务器返回的数据存在该属性里面</p></li><li><p><code>status</code> : <code>http</code>状态码</p></li></ul><p><img src="https://i.loli.net/2020/03/21/loRVTpOvIUat5cu.jpg" alt="HTTP状态码"></p><ul><li>案例：<code>ajax</code>封装案例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ajax请求后台数据</span></span><br><span class="line"><span class="keyword">var</span> btn =  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">ajax(&#123;<span class="comment">//json格式</span></span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">url:<span class="string">"post.php"</span>,</span><br><span class="line">data:<span class="string">"username=poetries&amp;pwd=123456"</span>,</span><br><span class="line">asyn:<span class="literal">true</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ajx = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> type = aJson.type || <span class="string">"get"</span>;</span><br><span class="line"><span class="keyword">var</span> asyn = aJson.asyn || <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> url = aJson.url;<span class="comment">// url 接收 传输位置</span></span><br><span class="line"><span class="keyword">var</span> success = aJson.success;<span class="comment">// success 接收 传输完成后的回调函数</span></span><br><span class="line"><span class="keyword">var</span> data = aJson.data || <span class="string">''</span>;<span class="comment">// data 接收需要附带传输的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;<span class="comment">//兼容处理</span></span><br><span class="line">ajx = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//一般浏览器</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ajx = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);<span class="comment">//IE6+</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">"get"</span> &amp;&amp; data)</span><br><span class="line">&#123;</span><br><span class="line">url +=<span class="string">"/?"</span>+data+<span class="string">"&amp;"</span>+<span class="built_in">Math</span>.random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化ajax请求</span></span><br><span class="line">ajx.open( type , url , asyn );</span><br><span class="line"><span class="comment">//规定传输数据的格式</span></span><br><span class="line">ajx.setRequestHeader(<span class="string">'content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"><span class="comment">//发送ajax请求（包括post数据的传输）</span></span><br><span class="line">type == <span class="string">"get"</span> ?ajx.send():ajx.send(aJson.data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line">ajx.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ajx.readState == <span class="number">4</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ajx.status == <span class="number">200</span> &amp;&amp; ajx.status&lt;<span class="number">300</span>)<span class="comment">//200是HTTP 请求成功的状态码</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//请求成功处理数据</span></span><br><span class="line">success &amp;&amp; success(ajx.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"请求出错"</span>+ajx.status);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="jQuery中的Ajax-补充部分–来自锋利的jQuery"><a href="#jQuery中的Ajax-补充部分–来自锋利的jQuery" class="headerlink" title="jQuery中的Ajax  [补充部分–来自锋利的jQuery]"></a>jQuery中的Ajax  [补充部分–来自锋利的jQuery]</h5><hr><p><code>jquery</code>对<code>Ajax</code>操作进行了封装，在<code>jquery</code>中的<code>$.ajax()</code>方法属于最底层的方法，第<code>2</code>层是<code>load()</code>、<code>$.get()</code>、<code>$.post();</code>第<code>3</code>层是<code>$.getScript()</code>、<code>$.getJSON()</code>，第<code>2</code>层使用频率很高 </p><h6 id="load-方法"><a href="#load-方法" class="headerlink" title="load()方法"></a><code>load()</code>方法</h6><hr><ul><li><code>load()</code>方法是<code>jquery</code>中最简单和常用的<code>ajax</code>方法，能载入远程<code>HTML</code>代码并插入<code>DOM</code>中 结构为：<code>load(url,[data],[callback])</code><ul><li>使用<code>url</code>参数指定选择符可以加载页面内的某些元素 <code>load</code>方法中<code>url</code>语法：<code>url selector</code> 注意：<code>url</code>和选择器之间有一个空格</li></ul></li><li>传递方式<ul><li><code>load()</code>方法的传递方式根据参数<code>data</code>来自动指定，如果没有参数传递，则采用<code>GET</code>方式传递，反之，采用<code>POST</code></li></ul></li><li>回调参数<ul><li>必须在加载完成后才执行的操作，该函数有三个参数 分别代表请求返回的内容、请求状态、<code>XMLHttpRequest</code>对象</li><li>只要请求完成，回调函数就会被触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#testTest"</span>).load(<span class="string">"test.html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">responseText,textStatus,XMLHttpRequest</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//respnoseText 请求返回的内容</span></span><br><span class="line">    <span class="comment">//textStatus 请求状态 ：sucess、error、notmodified、timeout</span></span><br><span class="line">    <span class="comment">//XMLHttpRequest </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>load方法参数</strong></li></ul><table><thead><tr><th>参数名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>String</code></td><td>请求<code>HTML</code>页面的<code>URL</code>地址</td></tr><tr><td><code>data(可选)</code></td><td><code>Object</code></td><td>发送至服务器的<code>key</code> / <code>value</code>数据</td></tr><tr><td><code>callback(可选)</code></td><td><code>Function</code></td><td>请求完成时的回调函数，无论是请求成功还是失败</td></tr></tbody></table><h6 id="get-和-post-方法"><a href="#get-和-post-方法" class="headerlink" title="$.get()和$.post()方法"></a>$.get()和$.post()方法</h6><hr><p><code>load()</code>方法通常用来从web服务器上获取静态的数据文件。在项目中需要传递一些参数给服务器中的页面，那么可以使用<code>$.get()</code>和<code>$.post()</code>或<code>$.ajax()</code>方法</p><ul><li><p>注意：<code>$.get()</code>和<code>$.post()</code>方法是<code>jquery</code>中的全局函数</p></li><li><p><strong>$.get()方法</strong></p><ul><li><code>$.get()</code>方法使用<code>GET</code>方式来进行异步请求</li><li>结构为：<code>$.get(url,[data],callback,type)</code><ul><li>如果服务器返回的内容格式是<code>xml</code>文档，需要在服务器端设置<code>Content-Type</code>类型 代码如下：<code>header(&quot;Content-Type:text/xml:charset=utf-8&quot;)</code> //<code>php</code></li></ul></li></ul></li><li><p><strong><code>$.get()</code>方法参数解析</strong></p></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>String</code></td><td>请求<code>HTML</code>页的地址</td></tr><tr><td><code>data(可选)</code></td><td><code>Object</code></td><td>发送至服务器的<code>key</code>/ <code>value</code> 数据会作为<code>QueryString</code>附加到请求URL中</td></tr><tr><td><code>callback(可选)</code></td><td><code>Function</code></td><td>载入成功的回调函数（只有当<code>Response</code>的返回状态是success才调用该方法）</td></tr><tr><td><code>type(可选)</code></td><td><code>String</code></td><td>服务器返回内容的格式，包括<code>xml</code>、<code>html</code>、<code>script</code>、<code>json</code>、<code>text</code>和<code>_default</code></td></tr></tbody></table><ul><li><p><strong>$.post()方法</strong></p><ul><li>它与<code>$.get()</code>方法的结构和使用方式相同，有如下区别<ul><li><code>GET</code>请求会将参数跟张乃URL后进行传递，而<code>POST</code>请求则是作为<code>Http</code>消息的实体内容发送给web服务器，在<code>ajax</code>请求中，这种区别对用户不可见<ul><li><code>GET</code>方式对传输数据有大小限制（通常不能大于<code>2KB</code>），而使用<code>POST</code>方式传递的数据量要比<code>GET</code>方式大得多（理论不受限制）</li><li><code>GET</code>方式请求的数据会被浏览器缓存起来，因此其他人可以从浏览器的历史纪录中读取这些数据，如：账号、密码。在某种情况下，<code>GET</code>方式会带来严重的安全问题，而<code>POST</code>相对来说可以避免这些问题</li><li><code>GET</code>和<code>POST</code>方式传递的数据在服务端的获取也不相同。在<code>PHP</code>中，<code>GET</code>方式用<code>$_GET[]</code>获取；<code>POST</code>方式用<code>$_POST[]</code>获取;两种方式都可用<code>$_REQUEST[]</code>来获取 </li></ul></li></ul></li></ul></li><li><p><strong>总结</strong></p><ul><li>使用<code>load()</code>、<code>$.get()</code>和<code>$.post()</code>方法完成了一些常规的<code>Ajax</code>程序，如果还需要复杂的<code>Ajax</code>程序，就需要用到<code>$.ajax()</code>方式</li></ul></li></ul><h6 id="ajax-方法"><a href="#ajax-方法" class="headerlink" title="$.ajax()方法"></a>$.ajax()方法</h6><hr><ul><li><code>$.ajax()</code>方法是<code>jquery</code>最底层的<code>Ajax</code>实现，它的结构为<code>$.ajax(options)</code></li><li>该方法只有一个参数，但在这个对象里包含了<code>$.ajax()</code>方式所需要的请求设置以及回调函等信息，参数以<code>key</code> / <code>value</code>存在，所有参数都是可选的</li><li><strong>$.ajax()方式常用参数解析</strong></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>String</code></td><td>(默认为当前页地址)发送请求的地址</td></tr><tr><td><code>type</code></td><td><code>String</code></td><td>请求方式（<code>POST</code>或<code>GET</code>）默认为<code>GET</code></td></tr><tr><td><code>timeout</code></td><td><code>Number</code></td><td>设置请求超时时间（毫秒）</td></tr><tr><td><code>dataType</code></td><td><code>String</code></td><td>预期服务器返回的类型。可用的类型如下<br /><br /> <strong>xml</strong>:返回<code>XML</code>文档，可用<code>jquery</code>处理<br /><strong>html</strong>:返回纯文本的<code>HTML</code>信息，包含的<code>script</code>标签也会在插入<code>DOM</code>时执行<br /><strong>script</strong>：返回纯文本的<code>javascript</code>代码。不会自动缓存结果，除非设置<code>cache</code>参数。注意：在远程请求时，所有的<code>POST</code>请求都将转为<code>GET</code>请求<br /><strong>json</strong>:返回<code>JSON</code>数据<br /><strong>jsonp</strong>:<code>JSONP</code>格式，使用<code>jsonp</code>形式调用函数时，例如：<code>myurl?call back=?,jquery</code>将自动替换后一个<code>？</code>为正确的函数名，以执行回调函数<br /><strong>text</strong>:返回纯文本字符串</td></tr><tr><td><code>beforeSend</code></td><td><code>Function</code></td><td>发送请求前可以修改<code>XMLHttpRequest</code>对象的函数，例如添加自定义<code>HTTP</code>头。在<code>beforeSend</code>中如果返回<code>false</code>可以取消本次<code>Ajax</code>请求。<code>XMLHttpRequest</code>对象是唯一的参数<br /> function(XMLHttpRequest){<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br>}</td></tr><tr><td><code>complete</code></td><td><code>Function</code></td><td>请求完成后的回调函数（请求成功或失败时都调用）<br /> 参数：<code>XMLHttpRequest</code>对象和一个描述成功请求类型的字符串<br />function(XMLHttpRequest,textStatus){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次Ajax请求时传递的<code>options</code>参数<br>}</td></tr><tr><td><code>success</code></td><td><code>Function</code></td><td>请求成功后调用的回调函数，有两个参数<br />(1)由服务器返回，并根据<code>dataTyppe</code>参数进行处理后的数据<br />(2)描述状态的字符串<br /><code>function</code>(data,textStatus){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<code>data</code>可能是<code>xmlDoc、``jsonObj</code>、<code>html</code>、<code>text</code>等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br />}</td></tr><tr><td><code>error</code></td><td><code>Function</code></td><td>请求失败时被调用的函数</td></tr><tr><td><code>global</code></td><td><code>Boolean</code></td><td>默认为<code>true</code>。表示是否触发全局<code>Ajax</code>事件，设置为<code>false</code>将不会触发。<code>AjaxStart</code>或<code>AjaxStop</code>可用于控制各种<code>Ajax</code>事件</td></tr></tbody></table><h4 id="第十节-插件"><a href="#第十节-插件" class="headerlink" title="第十节 插件"></a>第十节 插件</h4><hr><ul><li><p><strong>什么是插件</strong></p><ul><li>插件(<code>Plugin</code>)也称为<code>jQuery</code>的扩展。以<code>jQuery</code>核心代码为基础编写的符合一定规范的应用程序。通过<code>js</code>文件的方式引用。</li></ul></li><li><p><strong>插件分为哪几类</strong></p><ul><li><code>UI</code>类、表单及验证类、输入类、特效类、<code>Ajax</code>类、滑动类、图形图像类、导航类、综合工具类、动画类等等 </li></ul></li></ul><ul><li><strong>引入插件的步骤</strong><ul><li>引入<code>jquery.js</code>文件，而且在所以插件之前引入</li><li>引入插件</li><li>引入插件相关文件，比如皮肤、中文包</li></ul></li></ul><ul><li><p><strong>如何自定义插件</strong>：    </p><ul><li>插件形式分为3类：<ul><li>封装对象方法插件</li><li>封装全局函数插件</li><li>选择器插件(类似于.<code>find()</code>)</li></ul></li></ul></li><li><p><strong>自定义插件的规范</strong>（解决各种插件的冲突和错误，增加成功率）</p><ul><li>命名：<code>jquery.插件名.js</code></li><li>所有的新方法附加在<code>jquery.fn</code>对象上面，所有新功能附加在<code>jquery</code>上</li><li>所有的方法或插件必须用分号结尾，避免出问题</li><li>插件必须返回jQuery对象，便于链式连缀</li><li>避免插件内部使用<code>$</code>，如果要使用，请传递<code>jQuery</code>(<code>$</code>并不是总等于<code>jQuery</code>，另外其他<code>js</code>框架也可能使用<code>$</code>)</li><li>插件中的<code>this</code>应该指向<code>jQuery</code>对象</li><li>使用<code>this.each()</code>迭代元素</li></ul></li><li><p><strong>自定义插件案例</strong></p><ul><li>为了方便用户创建插件，<code>jQuery</code>提供了 <code>jQuery.extend()</code> 和 <code>jQuery.fn.extend()</code></li><li><code>jQuery.extend()</code>：创建工具函数或者是选择器</li><li><code>jQuery.fn.extend()</code>：创建<code>jQuery</code>对象命令  （<code>fn</code>相当于<code>prototype</code>的别名）</li></ul></li><li><p><strong><code>jQuery</code>官方提供的插件开发模板</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.plugin=<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> defaults = &#123;</span><br><span class="line"><span class="comment">//各种参数 各种属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options = $.extend(defaults,options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//实现功能的代码</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p><strong>自定义<code>jQuery</code>函数</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.extend(&#123;</span><br><span class="line">test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"hello plugin"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p><strong>自定义<code>jQuery</code>命令</strong>：</p><ul><li>形式1：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">"hello plugin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><ul><li>形式2：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"hello plugin"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><h4 id="附录一-jQuery各个版本新增的一些常用的方法"><a href="#附录一-jQuery各个版本新增的一些常用的方法" class="headerlink" title="附录一 jQuery各个版本新增的一些常用的方法"></a>附录一 jQuery各个版本新增的一些常用的方法</h4><hr><ul><li><code>jQuery1.3</code>新增常用的方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>.closest()</code></td><td>从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素</td></tr><tr><td><code>die()</code></td><td>从元素中删除先前用<code>live()</code>方法绑定的所有的事件</td></tr><tr><td><code>live()</code></td><td>附加一个事件处理器到符合目前选择器的所有元素匹配</td></tr></tbody></table><ul><li><code>jQuery1.4</code>新增常用的方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>.first()</code></td><td>获取集合中第一个元素</td></tr><tr><td><code>last()</code></td><td>获取集合中最后一个元素</td></tr><tr><td><code>has(selector)</code></td><td>保留包含特定后代的元素，去掉那些不含有指定后代的元素</td></tr><tr><td><code>detach()</code></td><td>从<code>DOM</code>中去掉所有匹配的元素。<code>detach()</code>和<code>remov()</code>一样，除了<code>detach()</code>保存了所有<code>jquery</code>数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入<code>DOM</code>时，这种方法很有用</td></tr><tr><td><code>delegate()</code></td><td>为所有选择器匹配的元素附加一个处理一个或多个事件</td></tr><tr><td><code>undelegate()</code></td><td>为所有选择器匹配的元素删除一个处理一个或多个事件</td></tr></tbody></table><ul><li><code>jQuery1.6</code>新增常用的方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>prop(proptyName)</code></td><td>获取在匹配元素集合中的第一个元素的属性值</td></tr><tr><td><code>removeProp(proptyName,value)</code></td><td>为匹配的元素删除设置的属性</td></tr><tr><td><code>:focus</code></td><td>选择当前获取焦点的元素</td></tr></tbody></table><h4 id="附录二-jQuery性能优化"><a href="#附录二-jQuery性能优化" class="headerlink" title="附录二 jQuery性能优化"></a>附录二 jQuery性能优化</h4><hr><ul><li><p><strong>性能优化</strong></p><ul><li>使用最新版的jQuery类库</li><li><strong>使用合适的选择器</strong><ul><li><code>$(#id)</code><ul><li>使用<code>id</code>来定位<code>DOM</code>元素是最佳的方式，为了提高性能，建议从最近的<code>ID</code>元素开始往下搜索</li></ul></li><li><code>$(&quot;p&quot;)</code> , <code>$(&quot;div&quot;)</code> , <code>$(&quot;input&quot;)</code><ul><li>标签选择器性能也不错，它是性能优化的第二选择。因为<code>jQuery</code>将直接调用本地方法<code>document.getElementsByTagName()</code>来定位<code>DOM</code>元素</li></ul></li><li><code>$(&quot;.class&quot;)</code><ul><li>建议有选择性的使用  </li></ul></li><li><code>$(&quot;[attribute=value]&quot;)</code><ul><li>对这个利用属性定位<code>DOM</code>元素，本地<code>JavaScript</code>并没有直接实现。这种方式性能并不是很理想。建议避免使用。</li></ul></li><li><code>$(&quot;:hidden&quot;)</code><ul><li>和上面利用属性定位<code>DOM</code>方式类似，建议尽量不要使用 </li></ul></li><li><strong>注意的地方</strong><ul><li>尽量使用<code>ID</code>选择器</li><li>尽量给选择器指定上下文</li></ul></li></ul></li></ul><ul><li><p><strong>缓存对象</strong></p><ul><li>如果你需要在其他函数中使用<code>jQuery</code>对象，你可以把他们缓存在全局环境中</li></ul></li><li><p><strong>数组方式使用<code>jQuery</code>对象</strong></p><ul><li>使用<code>jQuery</code>选择器获取的结果是一个<code>jQuery</code>对象。在性能方面，建议使用<code>for</code>或<code>while</code>循环来处理，而不是<code>$.each()</code></li></ul></li><li><p><strong>事件代理</strong></p><ul><li>每一个<code>JavaScript</code>事件（如：<code>click</code>、<code>mouseove</code>r）都会冒泡到父级节点。当我们需要给多个元素调用同个函数时这点很有用。比如，我们要为一个表单绑定这样的行为：点击td后，把背景颜色设置为红色<ul><li><code>$(&quot;#myTable td&quot;).click(function(){$(this).css(&quot;background&quot;,&quot;red&quot;);});</code></li><li>假设有<code>100</code>个<code>td</code>元素，在使用以上的方式时，绑定了<code>100</code>个事件，将带来性能影响</li><li>代替这种多元素的事件监听方法是，你只需向他们的父节点绑定一次事件，然后通过<code>event.target</code>获取到点击的当前元素<ul><li><code>$(&quot;#myTable td&quot;).click(function({$(e.target).css(&quot;background&quot;,&quot;red&quot;)});</code></li><li><code>e.target</code>捕捉到触发的目标 </li></ul></li><li>在<code>jQuery1.7</code>中提供了一个新的方法<code>on()</code>，来帮助你将整个事件监听封装到一个便利的方法中<ul><li><code>$(&quot;#myTable td&quot;).on(&quot;click&quot;,&#39;td&#39;,function(){$(this).css(&quot;background&quot;,&quot;red&quot;);});</code></li></ul></li></ul></li></ul></li><li><p><strong>将你的代码转化成jQuery插件</strong></p><ul><li>它能够使你的代码有更好的重用性，并且能够有效的帮助你组织代码</li></ul></li><li><p><strong>使用join()方法来拼接字符串</strong></p><ul><li>也许你之前使用<code>+</code>来拼接字符串，现在可以改了。它确实有助于性能优化，尤其是长字符串处理的时候</li></ul></li><li><p><strong>合理使用HTML5和Data属性</strong></p><ul><li><code>HTML5</code>的<code>data</code>属性可以帮助我们插入数据，特别是后端的数据交换。<code>jQuery</code>的<code>Data()</code>方法有效利用<code>HTML5</code>的属性<ul><li>例如：<code>&lt;div id=&quot;dl&quot; data-role=&quot;page&quot; data-list-value=&quot;43&quot; data-options=&#39;{&quot;name:&quot;&quot;John&quot;}&#39;&gt;</code></li><li>为了读取数据，你需要使用如下代码<ul><li><code>$(&quot;#dl&#39;).data(&quot;role&#39;;//page)</code></li><li><code>$(&quot;#dl&#39;).data(&quot;lastValue&#39;;//43)</code></li><li><code>$(&quot;#dl&#39;).data(&quot;options&#39;;//john)</code></li></ul></li></ul></li></ul></li><li><p><strong>尽量使用原生的JavaScript方法</strong></p></li><li><p><strong>压缩JavaScript代码</strong></p><ul><li>一方面使用<code>Gzip</code>；另一方面去除<code>JavaScript</code>文件里面的注释、空白 </li></ul></li></ul></li></ul><h4 id="附录三-常用的jQuery代码片段"><a href="#附录三-常用的jQuery代码片段" class="headerlink" title="附录三 常用的jQuery代码片段"></a>附录三 常用的jQuery代码片段</h4><hr><ul><li>禁用页面的右键菜单</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(functuion()&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>新窗口打开页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//例子1：href="http://"的链接将会在新窗口打开链接</span></span><br><span class="line">    $(<span class="string">'a[href=^="http://"]'</span>).attr(<span class="string">"target"</span>,<span class="string">"_blank"</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//例子2：rel="external"的超链接将会在新窗口打开链接</span></span><br><span class="line">    $(<span class="string">"a[rel$='external']"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.target = <span class="string">"_blank"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line">&lt;a href=<span class="string">"http://baidu.com"</span> rel=<span class="string">"external"</span>&gt;open&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><ul><li>判断浏览器类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).reday(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//Firefox2 and above</span></span><br><span class="line">    <span class="keyword">if</span>( $.browser.mozilla &amp;&amp; $.browser.version&gt;=<span class="string">"1.8"</span>)&#123;</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Safari</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.safari)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Chrome</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.chrome)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Opera</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.opera)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IE6 and blow</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.msie &amp;&amp; $.browser.version&lt;=<span class="number">6</span>)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// anything above IE6</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.msie &amp;&amp; $.browser.version &gt; <span class="number">6</span>)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>输入框文字获取和失去焦点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"input.text1"</span>).val(<span class="string">"Enter you search text here"</span>);</span><br><span class="line">    textFill($(<span class="string">'input.text1'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textFill</span>(<span class="params">input</span>)</span>&#123;<span class="comment">//input focus text function</span></span><br><span class="line">    <span class="keyword">var</span> originvalue = input.val();</span><br><span class="line">    input.focus(funtion()&#123;</span><br><span class="line">        <span class="keyword">if</span>($.trim(input.val())== originvalue)&#123;</span><br><span class="line">            input.val(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>($.trim(input.val()) == <span class="string">' '</span>)&#123;</span><br><span class="line">          input.val(originalvalue);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取鼠标位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      $(<span class="string">"#XY"</span>).html(<span class="string">"X:"</span> + e.pageX+ <span class="string">"| Y"</span> + e.pageY);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>判断元素是否存在</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">"#id"</span>).length)&#123;</span><br><span class="line">      <span class="comment">// do some thing  </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>点击div也可以跳转</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.location  = $(<span class="keyword">this</span>).find(<span class="string">"a"</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置div在屏幕中央</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery.fn.center = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.css(<span class="string">"position"</span>,<span class="string">"absolute"</span>);</span><br><span class="line">        <span class="keyword">this</span>.css(<span class="string">"top"</span>,($(<span class="built_in">window</span>).height() - <span class="keyword">this</span>.lenght()) / <span class="number">2</span> +$(<span class="built_in">window</span>).scrollTop() + <span class="string">"px"</span>); </span><br><span class="line">        <span class="keyword">this</span>.css(<span class="string">"left"</span>,($(<span class="built_in">window</span>).height() - <span class="keyword">this</span>.lenght()) / <span class="number">2</span> +$(<span class="built_in">window</span>).scrollLeft() + <span class="string">"px"</span>); </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//use </span></span><br><span class="line"></span><br><span class="line"> $(<span class="string">"#XY"</span>).center();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>关闭所有动画效果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery.fx.off = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>检测鼠标的右键和左键</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#xy"</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        alert(e.which);<span class="comment">//1 = 鼠标左键  2= 鼠标中间 3 = 鼠标右键</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>回车提交表单</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"input"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.which == <span class="string">"13"</span>)&#123;</span><br><span class="line">            alert(<span class="string">"回车提交"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>设置全局的Ajax参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#load"</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    showLoading();<span class="comment">//显示loading</span></span><br><span class="line">    disableButtons() <span class="comment">//禁用按钮</span></span><br><span class="line">&#125;)</span><br><span class="line"> $(<span class="string">"#load"</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hideLoading();<span class="comment">//隐藏loading</span></span><br><span class="line">    enableButtons();<span class="comment">//启用按钮</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>获取选中的下拉框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#someElement"</span>).find(<span class="string">'option:selected'</span>);</span><br><span class="line">$(<span class="string">"#someElement option:selected"</span>);</span><br></pre></td></tr></table></figure><ul><li>切换复选框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tog = <span class="literal">false</span>;</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"input[type=checkbox]').attr("</span>checked<span class="string">",!tog);</span></span><br><span class="line"><span class="string">    tog = !tog;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><ul><li>个性化链接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">"a[href$='pdf']"</span>).addClass(<span class="string">"pdf"</span>);</span><br><span class="line">     $(<span class="string">"a[href$='zip']"</span>).addClass(<span class="string">"zip"</span>);</span><br><span class="line">     $(<span class="string">"a[href$='psd']"</span>).addClass(<span class="string">"psd"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在一段时间后自动隐藏或关闭元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).fadeIn(<span class="number">400</span>);</span><br><span class="line">  &#125;,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//而在1.4之后的版本可以用delay()来实现</span></span><br><span class="line">$(<span class="string">"div"</span>).slideUp(<span class="number">300</span>).delay(<span class="number">3000</span>).fadeIn(<span class="number">400</span>);</span><br></pre></td></tr></table></figure><ul><li>使用事件代理绑定元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//为table里面的td元素绑定click事件，不管td是一直存在还是动态创建的</span></span><br><span class="line"> <span class="comment">//jQuery 1.4.2之前使用这种方式</span></span><br><span class="line"> $(<span class="string">"table"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"td"</span>,<span class="keyword">this</span>).live(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="keyword">this</span>).toggleClass(<span class="string">"hover"</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery 1.4.2使用的方式</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"table"</span>).delegate(<span class="string">"td"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"hover"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery1.7.1使用的方式</span></span><br><span class="line">$(<span class="string">"table"</span>).on(<span class="string">"click"</span>,<span class="string">"td"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"hover"</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li>预加载图片</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = [];</span><br><span class="line">  <span class="comment">// Arguments are image paths relative to the current page.</span></span><br><span class="line">  $.preLoadImages = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args_len = <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = args_len; i--;) &#123;</span><br><span class="line">      <span class="keyword">var</span> cacheImage = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">      cacheImage.src = <span class="built_in">arguments</span>[i];</span><br><span class="line">      cache.push(cacheImage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">jQuery.preLoadImages(<span class="string">"image1.gif"</span>, <span class="string">"/path/to/image2.png"</span>);</span><br></pre></td></tr></table></figure><ul><li>让页面中的每个元素都适合在移动设备上展示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scr = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">scr.setAttribute(<span class="string">'src'</span>, <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(scr);</span><br><span class="line">scr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'class'</span>, <span class="string">''</span>).attr(<span class="string">'id'</span>, <span class="string">''</span>).css(&#123;</span><br><span class="line"><span class="string">'margin'</span> : <span class="number">0</span>,</span><br><span class="line"><span class="string">'padding'</span> : <span class="number">0</span>,</span><br><span class="line"><span class="string">'width'</span>: <span class="string">'100%'</span>,</span><br><span class="line"><span class="string">'clear'</span>:<span class="string">'both'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>图像等比例缩放</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).bind(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// IMAGE RESIZE</span></span><br><span class="line">$(<span class="string">'#product_cat_list img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> maxWidth = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">var</span> maxHeight = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">var</span> ratio = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> width = $(<span class="keyword">this</span>).width();</span><br><span class="line"><span class="keyword">var</span> height = $(<span class="keyword">this</span>).height();</span><br><span class="line"><span class="keyword">if</span>(width &gt; maxWidth)&#123;</span><br><span class="line">ratio = maxWidth / width;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"width"</span>, maxWidth);</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"height"</span>, height * ratio);</span><br><span class="line">height = height * ratio;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> width = $(<span class="keyword">this</span>).width();</span><br><span class="line"><span class="keyword">var</span> height = $(<span class="keyword">this</span>).height();</span><br><span class="line"><span class="keyword">if</span>(height &gt; maxHeight)&#123;</span><br><span class="line">ratio = maxHeight / height;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"height"</span>, maxHeight);</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"width"</span>, width * ratio);</span><br><span class="line">width = width * ratio;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//$("#contentpage img").show();</span></span><br><span class="line"><span class="comment">// IMAGE RESIZE</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>返回页面顶部</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Back To Top</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  $(<span class="string">'.top'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">     $(<span class="built_in">document</span>).scrollTo(<span class="number">0</span>,<span class="number">500</span>);  </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">//Create a link defined with the class .top</span></span><br><span class="line">&lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"top"</span>&gt;Back To Top&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用jQuery打造手风琴式的折叠效果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> accordion = &#123;</span><br><span class="line">     init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> $container = $(<span class="string">'#accordion'</span>);</span><br><span class="line">           $container.find(<span class="string">'li:not(:first) .details'</span>).hide();</span><br><span class="line">           $container.find(<span class="string">'li:first'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">           $container.on(<span class="string">'click'</span>,<span class="string">'li a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                  e.preventDefault();</span><br><span class="line">                  <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>).parents(<span class="string">'li'</span>);</span><br><span class="line">                  <span class="keyword">if</span>($<span class="keyword">this</span>.hasClass(<span class="string">'active'</span>))&#123;</span><br><span class="line">                         <span class="keyword">if</span>($(<span class="string">'.details'</span>).is(<span class="string">':visible'</span>)) &#123;</span><br><span class="line">                                $<span class="keyword">this</span>.find(<span class="string">'.details'</span>).slideUp();</span><br><span class="line">                         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                $<span class="keyword">this</span>.find(<span class="string">'.details'</span>).slideDown();</span><br><span class="line">                         &#125;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         $container.find(<span class="string">'li.active .details'</span>).slideUp();</span><br><span class="line">                         $container.find(<span class="string">'li'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">                         $<span class="keyword">this</span>.addClass(<span class="string">'active'</span>);</span><br><span class="line">                         $<span class="keyword">this</span>.find(<span class="string">'.details'</span>).slideDown();</span><br><span class="line">                  &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用jQuery和Ajax自动填充选择框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"select#ctlJob"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.getJSON(<span class="string">"/select.php"</span>,&#123;<span class="attr">id</span>: $(<span class="keyword">this</span>).val(), <span class="attr">ajax</span>: <span class="string">'true'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j.length; i++) &#123;</span><br><span class="line">options += <span class="string">'</span></span><br><span class="line"><span class="string">'</span> + j[i].optionDisplay + <span class="string">'</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"select#ctlPerson"</span>).html(options);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>自动替换丢失的图片</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Safe Snippet</span></span><br><span class="line">$(<span class="string">"img"</span>).error(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).unbind(<span class="string">"error"</span>).attr(<span class="string">"src"</span>, <span class="string">"missing_image.gif"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Persistent Snipper</span></span><br><span class="line">$(<span class="string">"img"</span>).error(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).attr(<span class="string">"src"</span>, <span class="string">"missing_image.gif"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>预防对表单进行多次提交</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'form'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> jQuery.data(<span class="keyword">this</span>, <span class="string">"disabledOnSubmit"</span>) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      jQuery.data(<span class="keyword">this</span>, <span class="string">"disabledOnSubmit"</span>, &#123; <span class="attr">submited</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      $(<span class="string">'input[type=submit], input[type=button]'</span>, <span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).attr(<span class="string">"disabled"</span>, <span class="string">"disabled"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>动态添加表单元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//change event on password1 field to prompt new input</span></span><br><span class="line">$(<span class="string">'#password1'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//dynamically create new input and insert after password1</span></span><br><span class="line">        $(<span class="string">"#password1"</span>).append(<span class="string">""</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在窗口滚动时自动加载内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loading = <span class="literal">false</span>;</span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((($(<span class="built_in">window</span>).scrollTop()+$(<span class="built_in">window</span>).height())+<span class="number">250</span>)&gt;=$(<span class="built_in">document</span>).height())&#123;</span><br><span class="line"><span class="keyword">if</span>(loading == <span class="literal">false</span>)&#123;</span><br><span class="line">loading = <span class="literal">true</span>;</span><br><span class="line">$(<span class="string">'#loadingbar'</span>).css(<span class="string">"display"</span>,<span class="string">"block"</span>);</span><br><span class="line">$.<span class="keyword">get</span>("load.php?start="+$('#loaded_max').val(), function(loaded)&#123;</span><br><span class="line">$(<span class="string">'body'</span>).append(loaded);</span><br><span class="line">$(<span class="string">'#loaded_max'</span>).val(<span class="built_in">parseInt</span>($(<span class="string">'#loaded_max'</span>).val())+<span class="number">50</span>);</span><br><span class="line">$(<span class="string">'#loadingbar'</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">loading = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#loaded_max'</span>).val(<span class="number">50</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>导航菜单背景切换效果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">'nav'</span>&gt; </span><br><span class="line">    &lt;li&gt;导航一&lt;<span class="regexp">/li&gt; </span></span><br><span class="line"><span class="regexp">    &lt;li&gt;导航二&lt;/</span>li&gt; </span><br><span class="line">    &lt;li&gt;导航三&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：代码需要修饰完善</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#nav'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 要知道siblings的使用          </span></span><br><span class="line"></span><br><span class="line">$(e.target).addClass(<span class="string">'tclass'</span>).siblings(<span class="string">'.tclass'</span>).removeClass(<span class="string">'tclass'</span>);;</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li>解决<code>jQuery</code>, <code>prototype</code>共存，<code>$</code>全局变量冲突问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"prototype.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/blogbeta.blueidea.com/</span>jquery.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt; jQuery.noConflict();&lt;/script&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：一定要先引入prototype.js 再引入jquery.js，先后顺序不可错</span></span><br></pre></td></tr></table></figure><ul><li>jQuery 判断元素上是否绑定了事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery event封装支持判断元素上是否绑定了事件，此方法只适用于jQuery绑定的事件</span></span><br><span class="line"><span class="keyword">var</span> $events = $(<span class="string">"#foo"</span>).data(<span class="string">"events"</span>);</span><br><span class="line"><span class="keyword">if</span>( $events &amp;&amp; $events[<span class="string">"click"</span>] )&#123;　　</span><br><span class="line">    <span class="comment">//your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何正确地使用<code>toggleClass</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切换（toggle）类允许你根据某个类的//是否存在来添加或是删除该类。</span></span><br><span class="line"><span class="comment">//这种情况下有些开发者使用：</span></span><br><span class="line">a.hasClass(<span class="string">'blueButton'</span>) ? a.removeClass(<span class="string">'blueButton'</span>) : a.addClass(<span class="string">'blueButton'</span>);</span><br><span class="line"><span class="comment">//toggleClass允许你使用下面的语句来很容易地做到这一点</span></span><br><span class="line">a.toggleClass(<span class="string">'blueButton'</span>);</span><br></pre></td></tr></table></figure><ul><li>如何设置IE特有的功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">    <span class="comment">// Internet Explorer就是个虐待狂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何验证某个元素是否为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">if</span> (! $(<span class="string">'#keks'</span>).html()) &#123;</span><br><span class="line">    <span class="comment">//什么都没有找到;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">'#keks'</span>).is(<span class="string">":empty"</span>)) &#123;</span><br><span class="line">    <span class="comment">//什么都没有找到;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问IFrame里的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iFrameDOM = $(<span class="string">"iframe#someID"</span>).contents();</span><br><span class="line"><span class="comment">//然后，就可以通过find方法来遍历获取iFrame中的元素了</span></span><br><span class="line">iFrameDOM.find(<span class="string">".message"</span>).slideUp();</span><br></pre></td></tr></table></figure><ul><li>管理搜索框的值<ul><li>现在各大网站都有搜索框，而搜索框通常都有默认值，当输入框获取焦点时，默认值消失。而一旦输入框失去焦点，而输入框里又没有输入新的值，输入框里的值又会恢复成默认值，如果往输入框里输入了新值，则输入框的值为新输入的值。这种特效用<code>JQuery</code><br>很容易实现</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#searchbox"</span>) .focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).val(<span class="string">''</span>)</span><br><span class="line">&#125;) .blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>); </span><br><span class="line">    <span class="comment">// '请搜索...'为搜索框默认值 </span></span><br><span class="line">    ($<span class="keyword">this</span>.val() === <span class="string">''</span>)? $<span class="keyword">this</span>.val(<span class="string">'请搜索...'</span>) : <span class="literal">null</span>; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>部分页面加载更新<ul><li>为了提高<code>web</code>性能，有更新时我们通常不会加载整个页面，而只是仅仅更新部分页面内容，如图片的延迟加载等。页面部分刷新的特效在<code>JQuery</code>中也很容易实现</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="comment">//每隔5秒钟刷新页面内容 //获取的内容将增加到 id为content的元素后 </span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"#content"</span>).load(url); &#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><ul><li>采配置JQuery与其它库的兼容性<ul><li>如果在项目中使用<code>JQuery</code>，<code>$</code> 是最常用的变量名，但<code>JQuery</code>并不是唯一一个使用<code>$</code>作为变量名的库，为了避免命名冲突，你可以按照下面方式来组织你的代码</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一： 为JQuery重新命名为</span></span><br><span class="line"> $jvar $j = jQuery.noConflict();$j(<span class="string">'#id'</span>).... <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">方法二： 推荐使用的方式</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123; $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//这儿，你可以正常的使用JQuery语法 &#125;);</span></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><ul><li>测试密码的强度<ul><li>在某些网站注册时常常会要求设置密码，网站也会根据输入密码的字符特点给出相应的提示，如密码过短、强度差、强度中等、强度强等。这又是怎么实现的呢？看下面代码：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">id</span>=<span class="string">"pass"</span> /&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"passstrength"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的正则表达式建议各位收藏哦，项目上有可能会用得着</span></span><br><span class="line">$(<span class="string">'#pass'</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//密码为八位及以上并且字母数字特殊字符三项都包括 </span></span><br><span class="line"><span class="keyword">var</span> strongRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^(?=.&#123;8,&#125;)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\W).*$"</span>, <span class="string">"g"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 </span></span><br><span class="line"> <span class="keyword">var</span> mediumRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^(?=.&#123;7,&#125;)(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$"</span>, <span class="string">"g"</span>); </span><br><span class="line"><span class="keyword">var</span> enoughRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?=.&#123;6,&#125;).*"</span>, <span class="string">"g"</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> == enoughRegex.test($(<span class="keyword">this</span>).val())) &#123; </span><br><span class="line"></span><br><span class="line">$(<span class="string">'#passstrength'</span>).html(<span class="string">'More Characters'</span>); &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (strongRegex.test($(<span class="keyword">this</span>).val())) &#123;</span><br><span class="line">     $(<span class="string">'#passstrength'</span>).className = <span class="string">'ok'</span>; </span><br><span class="line">     $(<span class="string">'#passstrength'</span>).html(<span class="string">'Strong!'</span>); &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mediumRegex.test($(<span class="keyword">this</span>).val())) &#123;</span><br><span class="line">    $(<span class="string">'#passstrength'</span>).className = <span class="string">'alert'</span>; </span><br><span class="line">    $(<span class="string">'#passstrength'</span>).html(<span class="string">'Medium!'</span>); &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123; </span><br><span class="line">    $(<span class="string">'#passstrength'</span>).className = <span class="string">'error'</span>;      </span><br><span class="line">    $(<span class="string">'#passstrength'</span>).html(<span class="string">'Weak!'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="附录四-常见CND加速服务"><a href="#附录四-常见CND加速服务" class="headerlink" title="附录四 常见CND加速服务"></a>附录四 常见CND加速服务</h4><hr><ul><li><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">Bootstrap中文网开源项目免费 CDN 服务</a></li><li><a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度静态资源公共库</a></li><li><a href="http://libs.useso.com/" target="_blank" rel="noopener">360网站卫士常用前端公共库CDN服务–已停止服务</a></li><li><a href="http://staticfile.org/" target="_blank" rel="noopener">开放静态文件 CDN </a></li><li><a href="http://www.asp.net/ajax/cdn" target="_blank" rel="noopener">微软CDN服务</a></li><li><a href="https://bbs.aliyun.com/read/139395.html" target="_blank" rel="noopener">阿里云</a></li><li><a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs" target="_blank" rel="noopener">百度开放云平台</a></li><li><a href="http://code.jquery.com/" target="_blank" rel="noopener">jQuery CDN</a></li><li><a href="http://www.jq22.com/cdn/" target="_blank" rel="noopener">jQuery cdn加速</a></li><li><a href="http://lib.sinaapp.com/" target="_blank" rel="noopener">新浪CDN</a></li></ul><h4 id="附录五-jQuery的一些资源"><a href="#附录五-jQuery的一些资源" class="headerlink" title="附录五 jQuery的一些资源"></a>附录五 jQuery的一些资源</h4><hr><ul><li>速查手册<ul><li><a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="noopener">jQuery API 中文文档–css88</a></li><li><a href="http://overapi.com/jquery" target="_blank" rel="noopener">jQuery-overapi</a></li><li><a href="http://www.sxt.cn/searchsxt/sxtapipro/index.html" target="_blank" rel="noopener">在线桌面版API</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md" target="_blank" rel="noopener">更多详情—一份实用的API参考手册集合</a></li></ul></li><li><code>jQuery</code>插件<ul><li>基础常用<ul><li><a href="http://caibaojian.com/scrollfix" target="_blank" rel="noopener">滚动固定在某个位置</a></li><li><a href="http://caibaojian.com/power-slider" target="_blank" rel="noopener">jQuery图片滚动插件全能版</a></li><li><a href="http://code.ciaoca.com/jquery/wookmark/?utm_source=caibaojian.com" target="_blank" rel="noopener">jQuery Wookmark Load 瀑布流布局</a></li><li><a href="http://code.ciaoca.com/jquery/jcrop/?utm_source=caibaojian.com" target="_blank" rel="noopener">jQuery Jcrop 图像裁剪</a></li><li><a href="http://code.ciaoca.com/jquery/kxbdmarquee/?utm_source=caibaojian.com" target="_blank" rel="noopener">jQuery kxbdMarquee 无缝滚动</a></li><li><a href="http://code.ciaoca.com/jquery/lightbox/?utm_source=caibaojian.com" target="_blank" rel="noopener">jQuery lightBox 灯箱效果</a></li><li><a href="http://www.appelsiini.net/projects/lazyload?utm_source=caibaojian.com" target="_blank" rel="noopener">Lazy Load Plugin for jQuery</a></li></ul></li><li>更多插件-动效库整理<ul><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md" target="_blank" rel="noopener">插件动效库</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6.md" target="_blank" rel="noopener">常用组件</a></li></ul></li></ul></li></ul><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><hr><ul><li><a href="http://www.cnblogs.com/aaronjs/p/3279314.html" target="_blank" rel="noopener">jQuery源码分析系列</a></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><hr><ul><li>锋利的<code>jQuery</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一节-jQuery初步认知&quot;&gt;&lt;a href=&quot;#第一节-jQuery初步认知&quot; class=&quot;headerlink&quot; title=&quot;第一节 jQuery初步认知&quot;&gt;&lt;/a&gt;第一节 jQuery初步认知&lt;/h4&gt;&lt;h5 id=&quot;jQuery概述&quot;&gt;&lt;a href=&quot;#jQuery概述&quot; class=&quot;headerlink&quot; title=&quot;jQuery概述&quot;&gt;&lt;/a&gt;jQuery概述&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;jQuery&lt;/code&gt;是什么:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;是一个&lt;code&gt;javascript&lt;/code&gt;代码仓库，我们称之为&lt;code&gt;javascript&lt;/code&gt;框架。&lt;/li&gt;
&lt;li&gt;是一个快速的简洁的&lt;code&gt;javascript&lt;/code&gt;框架，可以简化查询&lt;code&gt;DOM&lt;/code&gt;对象、处理事件、制作动画、处理&lt;code&gt;Ajax&lt;/code&gt;交互过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="jqeury" scheme="http://yoursite.com/categories/jqeury/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="jqeury" scheme="http://yoursite.com/tags/jqeury/"/>
    
  </entry>
  
  <entry>
    <title>html5のcss3</title>
    <link href="http://yoursite.com/2020/03/07/html5%E3%81%AEcss3/"/>
    <id>http://yoursite.com/2020/03/07/html5%E3%81%AEcss3/</id>
    <published>2020-03-07T02:41:12.000Z</published>
    <updated>2020-04-01T06:08:04.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="第一课-HTML5结构"><a href="#第一课-HTML5结构" class="headerlink" title="第一课 HTML5结构"></a>第一课 HTML5结构</h4><hr><ul><li><code>HTML5</code> 是新一代的 <code>HTML</code></li><li><code>DTD</code>声明改变    <code>&lt;!DOCTYPE html&gt;</code><ul><li>新的结构标签            </li></ul></li></ul><p><img src="https://sm.ms/image/AqulXZIvb8xeiBs" alt="一些总结--from-dunitian"></p><h5 id="常用的一些新的结构标签"><a href="#常用的一些新的结构标签" class="headerlink" title="常用的一些新的结构标签"></a>常用的一些新的结构标签</h5><hr><p><img src="https://sm.ms/image/w3UoQax6fetCkh2" alt="结构标签"></p><p><img src="https://sm.ms/image/TpklKVi39aIfoFB" alt="多媒体交互标签"></p><p><img src="https://i.loli.net/2020/03/21/iJneF84GQwSmf62.png" alt="特殊样式标签"></p><p><img src="https://i.loli.net/2020/03/21/bEKUXByRq3jNYuk.png" alt="兼容性不是很好的标签"></p><ul><li>补充说明<ul><li><code>small</code> 这个元素表示边栏评论，如附属细则</li><li><code>cite</code>这个元素可用于显示作品标题（图书、电影、诗歌等）</li><li><code>adress</code>这个元素显示<code>article</code>或整个文档的合同信息，且位于<code>footer</code>这个元素之中</li><li><code>time</code>显示人和机器可读的日期和时间，而且机器可读的时间戳是属性<code>datetime</code>的值第二个可选的是<code>pubtime</code>用于表示出版日期值</li></ul></li></ul><h5 id="删除的HTML标签"><a href="#删除的HTML标签" class="headerlink" title="删除的HTML标签"></a>删除的<code>HTML</code>标签</h5><hr><ul><li><p>纯表现的元素：</p><ul><li><code>basefont</code></li><li><code>big</code></li><li><code>center</code></li><li><code>font</code></li><li><code>s</code></li><li><code>strike</code></li><li><code>tt</code></li><li><code>u</code></li></ul></li><li><p>对可用性产生负面影响的元素：</p><ul><li><code>frame</code></li><li><code>frameset</code></li><li><code>noframes</code><ul><li>产生混淆的元素：</li></ul></li><li><code>acronym</code></li><li><code>applet</code></li><li><code>isindex</code></li><li><code>dir</code></li></ul></li><li><p><strong>重新定义的<code>HTML</code>标签</strong></p><ul><li><code>&lt;b&gt;</code>  代表内联文本，通常是粗体，没有传递表示重要的意思</li><li><code>&lt;i&gt;</code> 代表内联文本，通常是斜体，没有传递表示重要的意思</li><li><code>&lt;dd&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，定义包含文本，<code>ialog</code>也可用</li><li><code>&lt;dt&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，汇总细节，<code>dialog</code>也可用</li><li><code>&lt;hr&gt;</code>表示主题结束，而不是水平线，虽然显示相同</li><li><code>&lt;menu&gt;</code> 重新定义用户界面的菜单，配合<code>commond</code>或者<code>menuitem</code>使用</li><li><code>&lt;small&gt;</code> 表示小字体，例如打印注释或者法律条款</li><li><code>&lt;strong&gt;</code> 表示重要性而不是强调符号</li></ul></li><li><p>崭新新的页面布局</p></li></ul><p><img src="https://sm.ms/image/ckstUVevlr21QRI" alt="传统的布局"></p><p><img src="https://sm.ms/image/k5W1KvBr6s9TUeb" alt="实例-from-dunitian"></p><p><img src="https://sm.ms/image/XNLVsUbKaRlwGpc" alt="草图--from-dunitian"></p><h4 id="第二课-HTML5智能表单"><a href="#第二课-HTML5智能表单" class="headerlink" title="第二课 HTML5智能表单"></a>第二课 HTML5智能表单</h4><hr><h5 id="HTML4-01-form表单复习"><a href="#HTML4-01-form表单复习" class="headerlink" title="HTML4.01 form表单复习"></a>HTML4.01 form表单复习</h5><hr><ul><li><code>input</code>表单<code>type</code>属性值<ul><li><code>type=&quot;text&quot;</code>          单行文本输入框</li><li><code>type=&quot;password&quot;</code>  密码（<code>maxlength=&quot;&quot;</code>）</li><li><code>type=&quot;radio&quot;</code>       单项选择（<code>checked=&quot;checked&quot;</code>）</li><li><code>type=&quot;checkbox&quot;</code>  多项选择</li><li><code>type=&quot;button&quot;</code>     按钮</li><li><code>type=&quot;submit&quot;</code>         提交</li><li><code>type=&quot;file&quot;</code>           上传文件</li><li><code>type=&quot;reset&quot;</code>    重置</li></ul></li></ul><h5 id="HTML5智能表单"><a href="#HTML5智能表单" class="headerlink" title="HTML5智能表单"></a>HTML5智能表单</h5><hr><ul><li><code>input</code>表单<code>type</code>属性值：<ul><li><code>type = &quot;email&quot;</code> 限制用户输入必须为<code>Email</code>类型</li><li><code>type=&quot;url&quot;</code>          限制用户输入必须为<code>URL</code>类型</li><li><code>type=&quot;date&quot;</code>     限制用户输入必须为日期类型</li><li><code>type=&quot;datetime&quot;</code> 显示完整日期 含时区</li><li><code>type=&quot;datetime-local&quot;</code> 显示完整日期 不含时区</li><li><code>type=&quot;time&quot;</code>    限制用户输入必须为时间类型</li><li><code>type=&quot;month&quot;</code>  限制用户输入必须为月类型</li><li><code>type=&quot;week&quot;</code>    限制用户输入必须为周类型</li><li><code>type=&quot;number&quot;</code> 限制用户输入必须为数字类型</li><li><code>type=&quot;range&quot;</code>    生成一个滑动条</li><li><code>type=&quot;search&quot;</code>  具有搜索意义的表单<code>results=&quot;n&quot;</code>属性</li><li><code>type=&quot;color&quot;</code>    生成一个颜色选择表单</li><li><code>type=&quot;tel&quot;</code>    显示电话号码</li></ul></li></ul><h5 id="Input-类型-Date-Pickers（日期选择器）"><a href="#Input-类型-Date-Pickers（日期选择器）" class="headerlink" title="Input 类型 - Date Pickers（日期选择器）"></a>Input 类型 - Date Pickers（日期选择器）</h5><hr><ul><li><p>**<code>HTML5</code> 拥有多个可供选取日期和时间的新输入类型：</p></li><li><p><code>date</code> 选取日、月、年</p></li><li><p><code>month</code> 选取月、年</p></li><li><p><code>week</code>  选取周和年</p></li><li><p><code>time</code>  选取时间（小时和分钟）</p></li><li><p>以下两个没有作用</p><ul><li><code>datetime</code>  选取时间、日、月、年（UTC 时间）</li><li><code>datetime-local</code>  选取时间、日、月、年（本地时间）</li></ul></li></ul><h5 id="HTML5新增表单属性"><a href="#HTML5新增表单属性" class="headerlink" title="HTML5新增表单属性"></a>HTML5新增表单属性</h5><hr><ul><li><code>required:</code> <code>required</code>内容不能为空</li><li><code>placeholder:</code> 表单提示信息</li><li><code>autofocus:</code>自动聚焦</li><li><code>pattern:</code> 正则表达式  输入的内容必须匹配到指定正则范围</li><li><code>autocomplete:</code>是否保存用户输入值<ul><li>默认为<code>on</code>，关闭提示选择<code>off</code></li></ul></li><li><code>formaction:</code> 在<code>submit</code>里定义提交地址</li><li><code>datalist:</code> 输入框选择列表配合<code>list</code>使用 <code>list</code>值为<code>datalist</code>的<code>id</code>值</li><li><code>output:</code> 计算或脚本输出</li></ul><h5 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h5><hr><ul><li><p><code>validity</code>对象，通过下面的<code>valid</code>可以查看验证是否通过，如果八种验证都返回<code>true</code>,一种验证失败返回<code>false</code></p><ul><li><code>oText.addEventListener(&quot;invalid&quot;,fn1,false)</code></li><li><code>ev.preventDefault()</code>: 阻止默认事件</li><li><code>valueMissing</code>: 当输入值为空的时候，返回<code>true</code></li><li><code>typeMismatch</code>: 控件值与预期不吻合，返回<code>true</code></li><li><code>patternMismatch</code>: 输入值不满足<code>pattern</code>正则，返回<code>true</code></li><li><code>cusomError</code><ul><li><code>setCustomValidity()</code></li></ul></li></ul></li></ul><h4 id="第三课-css3选择器"><a href="#第三课-css3选择器" class="headerlink" title="第三课 css3选择器"></a>第三课 css3选择器</h4><hr><p><img src="https://i.loli.net/2020/03/21/B8ArWHDsLhNvT4w.png" alt="css3属性快速一览"></p><p><img src="https://sm.ms/image/gnOzHevKRAWBUSj" alt="css3属性快速一览"></p><ul><li><p><code>CSS3</code>发展史简介</p><ul><li><code>HTML</code>的诞生 20世纪90年代初</li><li><code>1996</code>年底，    <code>CSS</code>第一版诞生</li><li><code>1998</code>年<code>5</code>月     <code>CSS2</code>正式发布</li><li><code>2004</code>年     <code>CSS2.1</code>发布</li><li><code>CSS3</code>的发布    <code>2002</code> <code>2003</code>  <code>2004</code> <code>2005</code>  <code>2007</code> <code>2009</code> <code>2010</code></li></ul></li></ul><ul><li><p><strong>模块化开发</strong></p><ul><li><code>CSS1</code> 中定义了网页的基本属性：<ul><li>字体、颜色、基本选择器等</li></ul></li><li><code>CSS2</code>中在<code>CSS1</code>的基础上添加了高级功能<ul><li>浮动和定位、高级选择器等(子选择器、相邻选择器、通用选择器)</li></ul></li><li><code>CSS3</code>遵循的是模块化开发。发布时间并不是一个时间点，而是一个时间段</li></ul></li><li><p><strong><code>CSS</code>选择器复习</strong></p><ul><li>通用选择器：<code>*</code> 选择到所有的元素</li><li>选择子元素：<code>&gt;</code> 选择到元素的直接后代</li><li>相邻兄弟选择器：<code>+</code>选择到紧随目标元素后的第一个元素</li><li>普通兄弟选择器：<code>~</code>选择到紧随其后的所有兄弟元素</li><li>伪元素选择器：<ul><li><code>::first-line</code> 匹配文本块的首行</li><li><code>::first-letter</code> 选择文本块的首字母</li></ul></li><li>伪类选择器：<ul><li><code>:before</code>,<code>:after</code>在元素内容前面、后面添加内容(相当于行内元素)</li></ul></li></ul></li></ul><ul><li><strong>CSS3结构选择器</strong></li></ul><p><img src="https://sm.ms/image/8exk5vcaSAioFb2" alt="CSS3结构选择器"></p><ul><li><strong><code>Css3</code> 属性选择器</strong></li></ul><p><img src="https://sm.ms/image/kZ1QUurIFHNODn6" alt="Css3属性选择器"></p><ul><li><p><strong><code>CSS3</code>伪类选择器</strong></p><ul><li><p><strong>UI伪类选择器：</strong></p><ul><li><code>:enabled</code>选择启用状态元素</li><li><code>:disabled</code> 选择禁用状态元素</li><li><code>:checked</code>选择被选中的<code>input</code>元素（单选按钮或复选框）</li><li><code>:default</code> 选择默认元素</li><li><code>:valid</code>、<code>invalid</code> 根据输入验证选择有效或无效的<code>input</code>元素</li><li><code>:in-range</code>、<code>out-of-range</code>选择指定范围之内或者之外受限的元素</li><li><code>:required</code>、<code>optional</code>根据是否允许:<code>required</code>属性选择<code>input</code>元素</li></ul></li><li><p><strong>动态伪类选择器：</strong></p><ul><li><code>:link</code>选择链接元素</li><li><code>:visited</code> 选择用户以访问的元素</li><li><code>:hover</code> 鼠标悬停其上的元素</li><li><code>:active</code>鼠标点击时触发的事件</li><li><code>:focus</code> 当前获取焦点的元素</li></ul></li><li><p><strong>其他伪类选择器</strong>：</p><ul><li><code>:not(&lt;选择器&gt;)</code>对括号内选择器的选择取反</li><li><code>:lang(&lt;目标语言&gt;)</code> 基于<code>lang</code>全局属性的元素</li><li><code>:target</code> <code>url</code>片段标识符指向的元素<ul><li><code>:empty</code>选择内容为空的元素</li></ul></li><li><code>:selection</code>鼠标光标选择元素内容</li></ul></li></ul></li></ul><h4 id="第四课-CSS3新增文本属性"><a href="#第四课-CSS3新增文本属性" class="headerlink" title="第四课 CSS3新增文本属性"></a>第四课 CSS3新增文本属性</h4><hr><ul><li><p><strong>CSS文本属性复习</strong></p><ul><li><p><code>white-space</code>：对象内空格的处理方式</p><ul><li><p><code>nowrap</code> 控制文本不换行</p></li><li><p><code>pre</code> 空白会被浏览器保留</p></li><li><p><code>pre-line</code> 合并空白  保留换行符</p></li><li><p><code>pre-wrap</code> 保留空白  正常换行</p></li></ul></li><li><p><code>direction</code>：文本流的方向</p><ul><li><code>ltr</code> 文本从左向右</li><li><code>rtl</code>  文本从右往左</li></ul></li><li><p><code>unicode-bidi</code>：用于同一个页面里存在从不同方向读进的文本显示。与<code>direction</code>属性一起使用</p></li></ul></li><li><p><strong>CSS3新增文本属性</strong></p><ul><li><code>color:rgba()</code>;</li><li><code>text-overflow</code>:是否使用一个省略标记（…）标示对象内文本的溢出</li><li><code>text-align</code>:文本的对齐方式</li><li><code>text-transform</code>:文字的大小写</li><li><code>text-decoration</code>:文本的装饰线，复合属性</li><li><code>text-shadow</code>:文本阴影</li><li><code>text-fill-color</code>:文字填充颜色</li><li><code>text-stroke</code>:复合属性。设置文字的描边</li><li><code>tab-size</code>:制表符的长度</li><li><code>word-wrap</code>:当前行超过指定容器的边界时是否断开转行</li><li><code>word-break</code>:规定自动换行的处理方法</li></ul></li></ul><ul><li><p><strong><code>text-overflow:</code>是否使用一个省略标记（<code>...</code>）标示对象内文本的溢出</strong></p><ul><li><code>clip</code>： 默认值 无省略号</li><li><code>ellipsis</code>：当对象内文本溢出时显示省略标记（<code>...</code>）。</li><li><strong>注意</strong>：该属性需配合<code>over-flow:hidden</code>属性(超出处理)还有 <code>white-space:nowrap</code>(禁止换行)配合使用，否则无法看到效果</li></ul></li><li><p><strong><code>text-align</code>:文本的对齐方式</strong></p><ul><li><code>css1</code></li><li><code>left</code>:默认值 左对齐</li><li><code>right</code>:右对齐</li><li><code>center</code>:居中</li><li><code>justify</code>： 内容两端对齐。</li><li><code>css3</code></li><li><code>start</code>:开始边界对齐</li><li><code>end</code>:结束边界对齐</li></ul></li><li><p><strong><code>text-transform</code></strong>:文字的大小写</p><ul><li><strong><code>css1</code></strong><ul><li><code>none</code>：    默认值 无转换 </li><li><code>capitalize</code>：     将每个单词的第一个字母转换成大写 </li><li><code>uppercase</code>：    转换成大写 </li><li><code>lowercase</code>：    转换成小写</li></ul></li><li><strong><code>css3</code></strong><ul><li><code>full-width</code>：    将左右字符设为全角形式。不支持</li><li><code>full-size-kana</code>：将所有小假名字符转换为普通假名。不支持<ul><li>例如：土耳其语</li></ul></li></ul></li></ul></li><li><p><strong><code>text-decoration</code>:文本的装饰线，复合属性(只火狐支持)</strong></p><ul><li><code>text-decoration-line</code>：<ul><li>指定文本装饰的种类。相当于<code>CSS1</code>时的<code>text-decoration</code>属性</li></ul></li><li><code>text-decoration-style</code> ：<ul><li>`指定文本装饰的样式。</li></ul></li><li><code>text-decoration-color</code>：<ul><li>`指定文本装饰的颜色。</li></ul></li><li><code>blink</code>： 指定文字的装饰是闪烁。  <code>opera</code>和<code>firefox</code></li><li><code>text-decoration</code> : <code>#F00 double overline</code>   <code>CSS3</code>实例</li></ul></li><li><p><strong><code>text-shadow</code>:文本阴影</strong></p><ul><li>取值：<code>x</code> <code>y</code>   <code>blur</code> <code>color</code>,……<ul><li><code>x</code>      横向偏移</li><li><code>y</code>       纵向偏移</li><li><code>blur</code>     模糊距离(灰度)</li><li><code>color</code>    阴影颜色</li></ul></li></ul></li><li><p><code>text-fill-color</code>:文字填充颜色</p></li><li><p><code>text-stroke</code>:复合属性。设置文字的描边</p><ul><li><code>text-stroke-width</code>:文字的描边厚度 </li><li><code>text-stroke-color</code>:文字的描边颜色 </li></ul></li><li><p><code>tab-size</code>:制表符的长度   </p><ul><li>默认值为<code>8</code>(一个<code>tab</code>键的空格字节长度)，在    <code>pre</code>标签之内才会有显示</li></ul></li><li><p><code>word-wrap</code>:当前行超过指定容器的边界时是否断开转行</p><ul><li><code>normal</code>： 默认值</li><li>允许内容顶开或溢出指定的容器边界。 </li></ul></li><li><p><code>break-word</code>：</p><ul><li>内容将在边界内换行。如果需要，单词内部允许断行</li></ul></li></ul><h4 id="第五课-CSS3盒模型"><a href="#第五课-CSS3盒模型" class="headerlink" title="第五课 CSS3盒模型"></a>第五课 CSS3盒模型</h4><hr><ul><li>CSS盒模型复习</li></ul><p><img src="https://i.loli.net/2020/03/21/lFZEpMj6PHfOBbA.jpg" alt="标准盒子模型"></p><p><img src="https://i.loli.net/2020/03/21/lXHLSOETkMqaVhQ.jpg" alt="IE盒子模型"></p><ul><li><p><strong>CSS3弹性盒模型</strong></p><ul><li><p><strong>以下6个属性设置在容器上</strong></p><ul><li><code>flex-direction</code></li><li><code>flex-wrap</code></li><li><code>flex-flow</code></li><li><code>justify-content</code></li><li><code>align-items</code></li><li><code>align-content</code></li></ul></li><li><p><strong>属性详解</strong></p><ul><li><code>flex-direction: row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>;</li><li><code>flex-wrap: nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>;</li><li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><ul><li><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code>;</li></ul></li><li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。<ul><li><code>justify-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>;</li></ul></li><li><code>align-items</code>属性定义项目在交叉轴上如何对齐。<ul><li><code>align-items: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li></ul></li><li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<ul><li><code>align-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>;</li></ul></li></ul></li><li><p><strong>以下6个属性设置在项目上</strong></p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul></li></ul></li><li><p><strong>属性详解</strong></p><ul><li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li><li><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</li><li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为<code>1</code>，即如果空间不足，该项目将缩小。</li><li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li><li><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li><li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。<ul><li><code>align-self: auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li></ul></li></ul></li></ul><p><img src="https://sm.ms/image/1vgdQV3osYUnPL4" alt="flex布局语法篇小结"></p><ul><li>拓展阅读<ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex布局语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">flex布局实例篇</a></li></ul></li></ul><h4 id="第六课-css3新增背景属性"><a href="#第六课-css3新增背景属性" class="headerlink" title="第六课 css3新增背景属性"></a>第六课 css3新增背景属性</h4><hr><ul><li><p><strong>CSS背景属性复习</strong></p><ul><li><code>background</code>:<ul><li><code>background-color</code>:背景颜色</li><li><code>background-image</code>:背景图片</li><li><code>background-repeat</code>:背景重复</li><li><code>background-position</code>:背景定位</li><li><code>background-attachment</code>:背景固定(<code>scroll/fixed)</code></li></ul></li></ul></li><li><p><strong>CSS3新增背景属性</strong></p></li><li><p><code>background-size</code>  背景尺寸</p><ul><li><code>background-size:x y</code> 水平 垂直方向的尺寸，像素/百分比/auto/…</li><li><code>background-size:100% 100%</code></li><li><code>background-size:cover</code> 比例放大</li><li><code>background-size:contain</code> 包含（图片不溢出）</li></ul></li><li><p>多背景</p><ul><li><code>background-image:url(1.jpg),url(2.jpg)</code>;</li></ul></li><li><p><code>background-origin</code> 背景区域定位</p><ul><li><code>border-box</code>： 从<code>borde</code>r区域开始显示背景。 </li><li><code>padding-box</code>： 从<code>padding</code>区域开始显示背景。 </li><li><code>content-box</code>： 从<code>content</code>内容区域开始显示背</li></ul></li><li><p><code>background-clip</code>   背景绘制区域</p><ul><li><code>border-box</code>： 从<code>border</code>区域向外裁剪背景。 </li><li><code>padding-box</code>： 从<code>padding</code>区域向外裁剪背景。 </li><li><code>content-box</code>： 从<code>content</code>区域向外裁剪背景。 </li></ul></li><li><p><code>text</code>:背景填充文本</p><ul><li><code>no-clip</code>： 从<code>border</code>区域向外裁剪背景</li></ul></li><li><p><strong>颜色渐变</strong></p><ul><li><p><strong>线性渐变</strong>：<code>linear-gradient</code>(起点/角度，颜色 位置，…,)</p><ul><li>起点：<code>left/top/right/bottom/left top......</code>默认<code>top</code></li><li>角度：逆时针方向 <code>0-360</code>度</li><li>颜色 位置：<code>red 50%</code>, <code>blue 100%</code>(红色从50%渐变到100%为蓝色)</li></ul><ul><li><code>repeating-linear-gradient</code>  线性渐变重复平铺<ul><li><code>IE</code>低版本渐变(滤镜)：</li><li><code>filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=&#39;#ffffff&#39;,endColorstr=&#39;#ff0000&#39;,GradientType=&#39;1&#39;);</code></li></ul></li></ul></li><li><p><strong>径向渐变</strong>：<code>radial-gradient</code>(起点(圆心位置), 形状/半径/大小，颜色1，颜色2)</p><ul><li>起点：<code>left/top/right/bottom</code>或具体值/百分比</li><li>形状：<code>ellipse</code>(椭圆)、<code>circle</code>(正圆)</li><li>大小：具体数值或百分比，也可以是关键字（<code>closest-side</code>(最近端), <code>closest-corner</code>最近角), <code>farthest-side</code>(最远端), f<code>arthest-corner</code>(最远角), <code>contain</code>(包含) ,<code>cover</code>(覆盖)）;</li></ul></li></ul></li></ul><h4 id="第七课-css3新增颜色属性"><a href="#第七课-css3新增颜色属性" class="headerlink" title="第七课 css3新增颜色属性"></a>第七课 css3新增颜色属性</h4><hr><ul><li><p><strong>CSS颜色属性复习</strong></p><ul><li><code>color name</code>    颜色英文名称命名</li><li><code>HEX</code>方式         十六进制方式</li><li><code>rgb</code>方式           三原色配色方式</li></ul></li><li><p><strong>CSS3新增颜色属性</strong></p><ul><li><strong><code>rgba()</code></strong></li></ul></li></ul><table><thead><tr><th>名称</th><th>颜色</th><th>颜色</th><th>取值</th></tr></thead><tbody><tr><td>r</td><td>red</td><td>红色</td><td>0-255</td></tr><tr><td>g</td><td>green</td><td>绿色</td><td>0-255</td></tr><tr><td>b</td><td>blue</td><td>蓝色</td><td>0-255</td></tr><tr><td>a</td><td>alpha</td><td>透明</td><td>0-1</td></tr></tbody></table><ul><li><p><strong><code>HSL</code>模式  <code>HSLA</code>模式</strong></p><ul><li><p><code>H</code>： <code>Hue</code>(色调)。</p><ul><li>0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：<code>0 - 360</code> </li></ul></li><li><p><code>S</code>：<code>Saturation</code>(饱和度)。取值为：0.0% - 100.0% </p></li><li><p><code>L</code>： <code>Lightness</code>(亮度)。取值为：0.0% - 100.0%</p></li><li><p><code>A</code>:    <code>alpha</code>   透明度   0~1之间</p></li><li><p>语法:<code>HSLA(H,S,L,A)</code></p></li></ul></li><li><p>HSL色轮</p></li></ul><p><img src="https://sm.ms/image/v3PuHVTCGpFac12" alt="HSL色轮"></p><ul><li><p>透明颜色：<code>transparent</code></p><ul><li>实例：<code>border</code>实现三角箭头、风车等</li></ul></li><li><p>透明度：</p><ul><li><code>opacity</code></li><li>取值：<code>0-1</code>之间</li><li>注：低版本的<code>IE</code>浏览器不兼容,需用IE浏览器的滤镜实现相同效果，<code>filter:alpha(opacity=50)</code></li><li>对于低版本的火狐浏览器需添加内核前缀，<code>-moz-opacity</code></li></ul></li></ul><h4 id="第八课-CSS3边框系列"><a href="#第八课-CSS3边框系列" class="headerlink" title="第八课 CSS3边框系列"></a>第八课 CSS3边框系列</h4><hr><h5 id="圆角-阴影"><a href="#圆角-阴影" class="headerlink" title="圆角-阴影"></a>圆角-阴影</h5><hr><ul><li><p>边框圆角</p><ul><li>在<code>CSS2</code>中添加圆角矩形需要技巧。我们必须为每个圆角使用不同的图片</li><li>在 <code>CSS3</code>中，创建圆角是非常容易的</li><li>在<code>CSS3</code>中，<code>border-radius</code>属性用于创建圆角</li></ul></li><li><p><strong><code>border-radius</code>边框圆角写法</strong></p><ul><li><code>border-radius: 2em 1em 4em / 0.5em 3em;</code></li><li>等价于<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-left-radius</span>: 2<span class="selector-tag">em</span> 0<span class="selector-class">.5em</span>;</span><br><span class="line"><span class="selector-tag">border-top-right-radius</span>: 1<span class="selector-tag">em</span> 3<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-right-radius</span>: 4<span class="selector-tag">em</span> 0<span class="selector-class">.5em</span>;</span><br><span class="line"><span class="selector-tag">border-bottom-left-radius</span>: 1<span class="selector-tag">em</span> 3<span class="selector-tag">em</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>box-shadow</code>方框添加阴影</strong></p><ul><li><p>语法：<code>box-shadow:x-shadow y-shadow blur spread color inset;</code></p></li><li><p><strong>box-shadow的API</strong></p><ul><li><code>x-shadow</code> 必需。水平阴影的位置。允许负值。    </li><li><code>y-shadow</code>     必需。垂直阴影的位置。允许负值。    </li><li><code>blur</code>     可选。模糊距离。    </li><li><code>spread</code>     可选。阴影的尺寸。    </li><li><code>color</code>     可选。阴影的颜色。请参阅 <code>CSS</code>颜色值    </li><li><code>inset</code>     可选。将外部阴影 (<code>outset</code>) 改为内部阴影</li></ul></li><li><p>实例：<code>box-shadow:10px 10px 5px 5px #888888;</code></p></li></ul></li></ul><h5 id="边框系列-图片"><a href="#边框系列-图片" class="headerlink" title="边框系列-图片"></a>边框系列-图片</h5><hr><ul><li><strong><code>border-image</code>语法</strong></li></ul><table><thead><tr><th>属性</th><th>版本</th><th>简介</th></tr></thead><tbody><tr><td>border-image</td><td>CSS3</td><td>设置或检索对象的边框使用图像来填充</td></tr><tr><td>border-image-source</td><td>CSS3</td><td>设置或检索对象的边框是否用图像定义样式或图像来源路径</td></tr><tr><td>border-image-slice</td><td>CSS3</td><td>设置或检索对象的边框背景图的分割方式</td></tr><tr><td>border-image-width</td><td>CSS3</td><td>设置或检索对象的边框厚度</td></tr><tr><td>border-image-outset</td><td>CSS3</td><td>设置或检索对象的边框背景图的扩展</td></tr><tr><td>border-image-repeat</td><td>CSS3</td><td>设置或检索对象的边框图像的平铺方式</td></tr></tbody></table><ul><li><strong><code>border-image-slice</code></strong><ul><li>设置或检索对象的边框背景图的分割方式</li></ul></li></ul><p><img src="https://sm.ms/image/1ZSCBosFgOWiwp4" alt="Paste_Image.png"></p><ul><li><strong><code>border-image-repeat</code></strong><ul><li>用于指定边框背景图的重复方式</li><li>取值：<ul><li><code>stretch</code>： 指定用拉伸方式来填充边框背景图。 *默认的</li><li><code>repeat</code>： 指定用平铺方式来填充边框背景图。当图片碰到边界时，如果超过则被截断。 </li><li><code>round</code>： 指定用平铺方式来填充边框背景图。图片会根据边框的尺寸动态调整图片的大小    直至正好可以铺满整个边框。写本文档时仅Firefox能看到该效果 </li></ul></li></ul></li></ul><h4 id="第九课-CSS3运动体系"><a href="#第九课-CSS3运动体系" class="headerlink" title="第九课 CSS3运动体系"></a>第九课 CSS3运动体系</h4><hr><h5 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h5><hr><ul><li><p>过渡：给改变添加过程</p><ul><li>什么是过渡</li><li>过渡效果由哪几部分组成</li><li>过渡可以干些什么</li></ul></li><li><p><code>transition</code> 过渡属性</p></li><li><p><code>transition: property duration timing-function delay</code>;</p><ul><li><code>transition-property:</code>过渡属性的名称<ul><li><code>none</code>  没有过渡属性</li><li><code>all</code>      所有属性都过渡(默认值)</li><li><code>property</code>   具体属性名称(<code>property1</code>,<code>property2</code>…)</li></ul></li><li><code>transition-duration:</code>过渡属性花费的时间<ul><li><code>time</code>  秒或毫秒</li></ul></li><li><code>transition-timing-function:</code>过渡效果速度曲线<ul><li><code>time</code>  秒或毫秒</li></ul></li><li><code>transition-delay:</code>过渡效果延迟时间</li></ul></li><li><p><strong><code>transition-timing-function</code>:过渡效果速度曲线</strong></p><ul><li><code>linear</code>:规定以相同速度开始至结束的过渡效果（等于 <code>cubic-bezier(0,0,1,1)</code>）。</li><li><code>ease</code>:规定慢速开始，然后变快，然后慢速结束的过渡效果（<code>cubic-bezier(0.25,0.1,0.25,1)</code>）。</li><li><code>ease-in</code>:规定以慢速开始的过渡效果（等于 <code>cubic-bezier(0.42,0,1,1)</code>）。</li><li><code>ease-out</code>    :规定以慢速结束的过渡效果（等于 <code>cubic-bezier(0,0,0.58,1)</code>）。</li><li><code>ease-in-out</code> :规定以慢速开始和结束的过渡效果（等于 <code>cubic-bezier(0.42,0,0.58,1)</code>）。</li><li><code>cubic-bezier(n,n,n,n)</code>:在 <code>cubic-bezier</code> 函数中定义自己的值。可能的值是 <code>0</code>至 <code>1</code> 之间的数值。</li></ul></li><li><p>过渡完成事件<br><img src="https://sm.ms/image/9GMBLETydk4IwfZ" alt="过渡完成事件"></p></li><li><p><code>Webkit</code>内核： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.addEventListener(<span class="string">'webkitTransitionEnd'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>标准: </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.addEventListener(<span class="string">'transitionend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h5 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h5><hr><ul><li><p>什么是<code>CSS3</code> 动画？</p><ul><li>通过 <code>CSS3</code>，我们能够创建动画，这可以在许多网页中取代动画图片、<code>Flash</code> 动画以及 <code>JavaScript</code></li></ul></li><li><p><strong>动画接口</strong></p></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。</td></tr><tr><td>animation-fill-mode</td><td>规定对象动画时间之外的状态。</td></tr></tbody></table><ul><li><strong>animation-timing-function速度曲线</strong></li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table><ul><li><p>在谷歌浏览器里面需要加上<code>-webkit-</code><br><code>IE6,7,8,9</code>不支持<code>css3</code>运动</p></li><li><p>拓展阅读</p><ul><li><a href="http://note.youdao.com/noteshare?id=c4f5a977a7b3aa256a3c28aa64d6f989" target="_blank" rel="noopener">CSS3动画简介</a></li></ul></li></ul><ul><li><p><strong>CSS3盒模型阴影</strong></p><ul><li><code>box-shadow:inset x y blur spread color</code></li><li><code>inset</code>：投影方式</li><li><code>inset</code>：内投影</li><li><code>outset</code>：外投影 默认(不能设置)</li><li><code>x</code>、<code>y</code>：阴影偏移</li><li><code>blur</code>：模糊半径（灰度）</li><li><code>spread</code>：扩展阴影半径</li><li>先扩展原有形状，再开始画阴影</li><li><code>color</code></li></ul></li><li><p><strong><code>CSS3</code>盒模型倒影</strong></p></li><li><p><code>box-reflect</code> 倒影</p><ul><li>方向 <code>above|below|left|right;</code></li><li>距离</li><li>渐变（可选）</li></ul></li><li><p><strong>CSS3其他盒模型</strong></p><ul><li><code>box-sizing</code> 盒模型解析模式</li><li><code>content-box</code>  标准盒模型(和<code>css2</code>一样的计算)</li><li><code>width/height=border+padding+content</code></li><li><code>border-box</code> 怪异盒模型<code>width/height</code>与设置的值一样 ，<code>content</code>减小</li></ul></li><li><p>扩展阅读</p><ul><li><a href="http://www.jianshu.com/p/e2eb0d8c9de6" target="_blank" rel="noopener">学会使用css3的box-sizing布局</a></li></ul></li></ul><h4 id="第十课-transform-2D转换"><a href="#第十课-transform-2D转换" class="headerlink" title="第十课 transform 2D转换"></a>第十课 transform 2D转换</h4><hr><ul><li><strong><code>Css3</code>平面转换方法</strong><ul><li><code>translate()</code>        移动</li><li><code>rotate()</code>        旋转</li><li><code>scale()</code>        缩放</li><li><code>skew()</code>        翻转</li><li><code>matrix()</code>    矩阵</li></ul></li></ul><ul><li><strong>transform</strong>:<ul><li><code>rotate()</code>  旋转函数 (deg)<ul><li><code>deg</code>  度数</li></ul></li><li><code>skew(X,Y)</code> 倾斜函数 (deg) <ul><li><code>skewX()</code></li><li><code>skewY()</code></li></ul></li><li><code>scale(X,Y)</code> 缩放函数 (正数、负数和小数)<ul><li><code>scaleX()</code></li><li><code>scaleY()</code></li></ul></li><li><code>translate(X,Y)</code> 位移函数(px)<ul><li><code>translateX()</code></li><li><code>translateY()</code></li></ul></li></ul></li></ul><ul><li><p><strong><code>rotate()</code> 旋转方法</strong></p><ul><li>用于旋转元素角度</li><li>例：<code>rotate(30deg)</code><ul><li>把元素顺时针旋转 30 度</li></ul></li></ul></li><li><p><strong><code>translate()</code>位置方法</strong></p><ul><li>用于移动元素位置<ul><li>例：<code>translate(50px,100px)</code><ul><li>把元素从左侧移动 50 像素，从顶端移动 100 像素。</li></ul></li></ul></li><li>其实有些类似于我们的相对定位</li></ul></li><li><p><strong><code>scale()</code>尺寸方法</strong></p><ul><li>方法用于改变元素尺寸<ul><li>例：<code>scale(2,4)</code> <ul><li>把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍</li></ul></li></ul></li></ul></li><li><p><strong><code>skew()</code> 翻转方法</strong></p><ul><li>通过 <code>skew()</code>方法，元素翻转给定的角度<ul><li>例：<code>transform: skew(30deg,20deg);</code><ul><li>把元素围绕 <code>X</code>轴把元素翻转<code>30</code> 度，围绕 <code>Y</code> 轴翻转 <code>20</code>度</li></ul></li></ul></li></ul></li></ul><h4 id="第十一课-transform-3D转换"><a href="#第十一课-transform-3D转换" class="headerlink" title="第十一课 transform 3D转换"></a>第十一课 transform 3D转换</h4><hr><ul><li><p><strong><code>Css3</code>立体转换</strong></p><ul><li><code>transform-style（preserve-3d）</code> 建立<code>3D</code>空间（指定元素的子元素展示的场景是在3D场景还是平面(投影)场景）</li><li><code>Perspective</code> 视角（指定观察者与z=0平面的距离，从而让元素及子元素看起来有3D透视位置效果<br>值：集体的带单位数值）</li><li><code>Perspective- origin</code> 视角基点<ul><li>值：取值类似于变换基准</li></ul></li><li><code>transform-origin</code>：坐标轴基点（变换基准）<ul><li>值：具体的坐标值/百分比/(<code>left</code>/<code>right</code>/<code>center</code>/<code>top</code>/<code>bottom</code>)<br>默认 <code>center center</code></li></ul></li></ul></li><li><p><strong>transform 新增函数</strong></p><ul><li><code>rotateX()</code></li><li><code>rotateY()</code></li><li><code>rotateZ()</code></li><li><code>translateZ()</code></li><li><code>scaleZ()</code></li></ul></li></ul><h4 id="第十二课-视频音频"><a href="#第十二课-视频音频" class="headerlink" title="第十二课 视频音频"></a>第十二课 视频音频</h4><hr><ul><li><p>视频音频格式的简单介绍</p><ul><li>常见的视频格式<ul><li>视频的组成部分：画面、音频、编码格式</li><li>视频编码：H.264、Theora、VP8(google开源)</li></ul></li><li>常见的音频格式<ul><li>视频编码：ACC、MP3、Vorbis</li></ul></li></ul></li><li><p><strong><code>HTML5</code>支持的格式</strong></p></li></ul><hr><ul><li><code>HTML5</code>能在完全脱离插件的情况下播放音视频,但是不是所有格式都支持。</li><li><strong>支持的视频格式：</strong><ul><li><code>Ogg=</code>带有<code>Theora</code>视频编码<code>+Vorbis</code>音频编码的<code>Ogg</code>文件</li><li><code>MEPG4=</code>带有H.264视频编码<code>+AAC</code>音频编码的<code>MPEG4</code>文件</li><li><code>WebM=</code>带有<code>VP8</code>视频编码<code>+Vorbis</code>音频编码的<code>WebM</code>格式</li></ul></li></ul><h5 id="Video的使用"><a href="#Video的使用" class="headerlink" title="Video的使用"></a><code>Video</code>的使用</h5><hr><ul><li><strong>单独用法</strong><ul><li><code>&lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</code></li></ul></li><li><strong>带提示用法</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">video</span> <span class="attr">src</span>=<span class="string">"文件地址"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">您的浏览器暂不支持video标签。播放视频</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">video</span> &gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>兼容用法</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">video</span>  <span class="attr">controls</span>=<span class="string">"controls"</span>  <span class="attr">width</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"move.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"move.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> &gt;</span></span><br><span class="line">您的浏览器暂不支持video标签。播放视频</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">video</span> &gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>Video</code>的常见属性</strong></li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Autoplay</td><td>Autoplay</td><td>视频就绪自动播放</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>Width</td><td>Pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>Height</td><td>Pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>Loop</td><td>Loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td>Preload</td><td>load{auto,meta,none}</td><td>规定是否预加载视频。</td></tr><tr><td>Src</td><td>url</td><td>视频url地址</td></tr><tr><td>Poster</td><td>Imgurl</td><td>加载等待的画面图片</td></tr><tr><td>Autobuffer</td><td>Autobuffer</td><td>设置为浏览器缓冲方式，不设置autoply才有效</td></tr></tbody></table><ul><li><strong><code>Video</code>的<code>API</code>方法</strong></li></ul><table><thead><tr><th>方法</th><th>属性</th><th>事件</th></tr></thead><tbody><tr><td>play()</td><td>currentSrc</td><td>play</td></tr><tr><td>pause()</td><td>currentTime</td><td>pause</td></tr><tr><td>load()</td><td>videoWidth</td><td>progress</td></tr><tr><td>canPlayType()</td><td>videoHeight</td><td>error</td></tr></tbody></table><h4 id="第十三课-canvas"><a href="#第十三课-canvas" class="headerlink" title="第十三课 canvas"></a>第十三课 canvas</h4><hr><ul><li>标签 <code>&lt;canvas&gt;</code><ul><li>不支持<code>canvas</code> 的浏览器可以看到的内容</li><li>默认宽度<code>300px</code>，默认高度<code>150px</code></li><li>注意：<code>canvas</code>宽高需要设置在标签中 否则绘制的东西可能出错</li></ul></li><li><code>&lt;canvas&gt;</code> 绘制环境<ul><li><code>getContext(&quot;2d&quot;)</code>;目前支持<code>2d</code>的场景</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">您的浏览器不支持canvas，请更换浏览器！</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>绘制矩形</strong></p><ul><li><code>rect(L,T,W,H)</code>:创建一个矩形</li><li><code>fillRect(L,T,W,H)</code>:绘制填充的矩形</li><li><code>clearRect(x,y,w,h)</code> 清除矩形选区</li><li><code>strokeRect(L,T,W,H)</code>绘制空心矩形(无填充)<ul><li>默认一像素黑色边框</li></ul></li></ul></li><li><p><strong>设置绘图样式</strong></p><ul><li><code>fillStyle</code>:填充颜色(绘制<code>canvas</code>是有顺序的)</li><li><code>lineWidth</code>:触笔宽度(线宽)</li><li><code>strokeStyle</code>:触笔颜色</li></ul></li><li><p><strong>绘制路径</strong></p><ul><li><code>beginPath()</code> :开始路径</li><li><code>closePath():</code>结束路径</li><li><code>moveTo(x,y)</code>:将触笔移动到x,y点</li><li><code>lineTo(x,y)</code>:绘制到x,y点</li><li><code>stroke():</code> 触笔方法 画线  默认为黑色</li><li><code>fill()</code>:填充方法 </li><li><code>rect(x,y,w,h)</code>:矩形路径</li><li><code>save()</code>:保存路径</li><li><code>restore()</code>:恢复路径</li></ul></li><li><p><strong>绘制曲线</strong> </p><ul><li><code>arcTo(x1,y1,x2,y2,r)</code><ul><li><code>x1</code>,<code>y1</code> 坐标一  <code>x2</code>,<code>y2</code>坐标二   r圆弧半斤</li></ul></li><li><code>quadraticCurveTo(dx,dy,x1,y1)</code><ul><li>贝塞尔曲线:<code>dx</code>,<code>dy</code>控制点  <code>x1</code>,<code>y1</code>结束坐标</li></ul></li><li><code>bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)</code><ul><li>贝塞尔曲线:<code>dx1,dy1</code> 控制点一 <code>dx2,dy2</code>控制点二 </li><li><code>x1,y1</code>结束坐标</li></ul></li></ul></li><li><p><strong>绘制圆形</strong></p><ul><li><code>arc(x,y,半径,起始弧度,结束弧度,旋转方向)</code><ul><li><code>x</code>，<code>y</code>起始位置</li><li>弧度与角度：<code>弧度=角度值*Math.PI/180</code></li><li>旋转方向：顺时针（默认：<code>false</code>），逆时针（<code>true</code>）</li></ul></li></ul></li><li><p><strong>绘制文本</strong></p><ul><li><code>strokeText(文本,x,y)</code>;  绘制空心文本</li><li><code>fillText(文本,x,y)</code>; 绘制实心文本</li><li><code>font = &quot;font-size  font-family&quot;</code>注:尺寸 字体缺一不可<ul><li><code>textAlign = &quot;&quot;;</code>文本左右对齐方式  <code>start center end  left right</code></li><li><code>textBaseline</code>文本上下对齐方式 <ul><li><code>alphabetic</code>默认。文本基线是普通的字母基线。</li><li><code>top</code>    文本基线是 <code>em</code> 方框的顶端。。</li><li><code>hanging</code>    文本基线是悬挂基线。</li><li><code>middle</code>    文本基线是<code>em</code> 方框的正中。</li><li><code>ideographic</code>    文本基线是表意基线。</li><li><code>bottom</code>    文本基线是 <code>em</code> 方框的底端。</li><li><code>measureText(文本).width;</code> 文本实际宽度(只有宽度值)</li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>图形边界样式</strong></p><ul><li><code>lineJoin</code>: 边界连接点样式<ul><li><code>miter</code>(默认值),<code>round</code>(圆角),<code>bevel</code>(斜角)</li></ul></li><li><code>lineCap</code>: 端点样式<ul><li><code>butt</code>(默认值),<code>round</code>(圆角),<code>square</code>(高度多出线宽一半)</li></ul></li></ul></li><li><p><strong>绘制图片</strong></p><ul><li><p>图片预加载，获取图片文件</p><ul><li><code>onload</code>中调用</li><li><code>drawImage(img,x,y,w,h);</code>绘制图片(图片,坐标<code>x</code>,坐标<code>y</code>,宽度,高度)</li></ul></li><li><p>设置背景</p><ul><li><code>createPattern(img,平铺方式)</code></li><li>平铺方式:<code>repeat</code>,<code>repeat-x</code>,<code>repeat-y</code>,<code>no-repeat</code></li></ul></li></ul></li><li><p><strong>canvas变换</strong></p><ul><li><code>translate(x,y)</code><ul><li>坐标基准点偏移 : 从起始点为基准，移动到当前位置</li></ul></li><li><code>rotate(弧度)</code>: 旋转  <code>弧度公式 = 角度*PI/180</code></li><li><code>scale(wb,hb)</code>缩放比例(缩放<code>canvas</code>绘制的图片)</li></ul></li><li><p><strong>颜色渐变</strong></p><ul><li>线性渐变:<code>createLinearGradient(x1,y1,x2,y2)</code><ul><li><code>x1</code>,<code>y1</code>起始坐标点</li><li><code>x2</code>,<code>y2</code>结束坐标点</li></ul></li><li>径向渐变:<code>createRadialGradient(x1,y1,r1,x2,y2,r2)</code><ul><li><code>x1</code>,<code>y1</code>,<code>r1</code>内圆坐标及半径</li><li><code>x2</code>,<code>y2</code>,<code>r2</code>外圆坐标及半径</li><li><code>addColorStop</code>(位置,颜色)  位置:渐变点  <code>0-1</code>之间 可多个</li></ul></li></ul></li><li><p><strong>阴影</strong></p><ul><li><code>shadowOffsetX</code>,<code>shadowOffsetY</code>    <code>x</code>轴、<code>y</code>轴偏移</li><li><code>shadowBlur</code>    阴影模糊度</li><li><code>shadowColor</code>  阴影颜色 默认颜色:<code>rgba(0,0,0,0)</code></li></ul></li><li><p><strong>像素</strong></p><ul><li><code>createImageData(sx,sy)</code> 创建新的、空白的 <code>ImageData</code> 对象</li><li><code>getImageData(x1,y1,sx,sy)</code><ul><li>返回<code>ImageData</code>对象，该对象为画布上指定的矩形复制像素数据<code>putImageData(img,x2,y2)</code></li><li>把图像数据（从指定的 <code>ImageData</code> 对象）放回画布上</li></ul></li></ul></li><li><p><strong>合成</strong></p><ul><li><code>globalAlpha</code>  设置或返回绘图的当前<code>alpha</code>或透明值</li><li><code>globalCompositeOperation</code> 设置或返回新图像如何绘制到已有的图像上</li><li><code>source-over</code>默认。在目标图像上显示源图像。</li><li><code>source-atop</code>在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。</li><li><code>source-in</code>    在目标图像中显示源图像。只有目标图像内的源图像部分会显示，目标图像是透明的。</li><li><code>source-out</code>在目标图像之外显示源图像。只会显示目标图像之外源图像部分，目标图像是透明的。</li><li><code>destination-over</code>在源图像上方显示目标图像。</li><li><code>destination-atop</code>在源图像顶部显示目标图像。源图像之外的目标图像部分不会被显示。</li><li><code>destination-in</code>在源图像中显示目标图像。只有源图像内的目标图像部分会被显示，源图像是透明的。</li><li><code>destination-out</code>在源图像外显示目标图像。只有源图像外的目标图像部分会被显示，源图像是透明的。</li><li><code>lighter</code>显示源图像 + 目标图像。</li><li><code>copy</code>显示源图像。忽略目标图像。</li><li><code>xor</code>使用异或操作对源图像与目标图像进行组合。</li></ul></li></ul><ul><li>扩展阅读<ul><li><a href="http://luckykun.com/work/2016-09-01/canvas-study01.html" target="_blank" rel="noopener">canvas学习之API整理笔记（一）</a></li><li><a href="http://jartto.wang/2016/07/25/make-an-inventory-of-html5-api/" target="_blank" rel="noopener">HTML5 API大盘点</a></li></ul></li></ul><h4 id="第十四课-SVG绘图"><a href="#第十四课-SVG绘图" class="headerlink" title="第十四课 SVG绘图"></a>第十四课 SVG绘图</h4><hr><ul><li><p><strong>svg是什么</strong></p><ul><li>矢量图</li><li>与<code>canvas</code>的区别</li></ul></li><li><p><strong>svg的引入方式</strong></p></li><li><p>方式一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.1" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> </span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//W3C//DTD SVG 1.1//EN"</span>  <span class="meta-string">"http://www.w3.org/</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">Graphics/SVG/1.1/DTD/svg11.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：</p><ul><li>图片、背景、框架</li></ul></li><li><p>方式三: </p><ul><li><code>html</code>页面中添加<code>svg</code></li></ul></li><li><p><strong><code>circle</code>:圆形</strong></p><ul><li>圆心坐标  <code>cx</code>,<code>cy</code></li><li>半径  <code>r</code></li><li><code>fill</code>   <code>stroke</code>  <code>stroke-width</code>     <code>stlye</code>样式 </li><li><code>fill = &quot;none/transparent&quot;</code></li></ul></li><li><p><strong>ellipse:椭圆</strong></p><ul><li><code>cx</code>属性定义的椭圆中心的x坐标</li><li><code>cy</code>属性定义的椭圆中心的y坐标</li><li><code>rx</code>属性定义的水平半径</li><li><code>ry</code>属性定义的垂直半径</li></ul></li><li><p><strong>rect : 矩形</strong></p><ul><li><code>width</code>  <code>height</code> 宽高   </li><li>坐标 <code>x</code>,<code>y</code> </li><li>圆角  <code>rx</code>,<code>ry</code></li></ul></li><li><p><strong><code>line</code>:线条</strong></p><ul><li><code>x1</code>,<code>y1</code>,<code>x2</code>,<code>y2</code></li><li><code>stroke-opacity</code>  透明  <code>fill-opacity</code></li></ul></li><li><p><strong>polyline:折线</strong></p><ul><li><code>points</code>:点坐标（<code>x1 y1 x2 y2...</code>）或(<code>x1,y1,x2,y2....</code>)    </li></ul></li><li><p><strong>polygon:多边形</strong></p><ul><li>折线闭合  <code>fill-rule:evenodd/nonzero</code>;</li></ul></li><li><p><strong>path: 路劲</strong></p><ul><li><code>d</code>属性</li><li><code>M(起始坐标)</code>,<code>L(结束坐标)</code>,<code>H(水平线)</code>,<code>V(垂直线)</code>,<code>A(圆弧)</code>,<code>Z(闭合路劲)</code><ul><li><code>C</code>,<code>S</code>,<code>Q</code>,<code>T</code> 贝塞尔曲线</li><li>大写为绝对坐标(具体的坐标位置)</li><li>小写为相对坐标(相对起始坐标点的具体长度)</li></ul></li><li>A命令<ul><li><code>x</code>半径 <code>y</code>半径 角度  弧长(0 小弧 1大弧)  方向(0逆时针 1顺时针)</li><li>终点<code>(x y)</code></li></ul></li></ul></li><li><p><strong>C命令：三次贝塞尔曲线</strong></p><ul><li><code>(x1,y1,x2,y2,x,y)</code>    <code>x1</code>,<code>y1</code>控制点一    <code>x2</code>,<code>y2</code>控制点二   <code>x</code>,<code>y</code>结束点</li></ul></li><li><p><strong>S命令：平滑贝塞尔曲线(自动对称一个控制点)</strong></p><ul><li><code>(x2,y2,x,y)</code>  <code>x2</code>,<code>y2</code>控制点    x,y结束点</li></ul></li><li><p><strong>Q命令：二次贝塞尔曲线</strong></p><ul><li><code>(x1,y1,x,y)</code>   x1,y1控制点  x,y结束点</li></ul></li><li><p><strong>T命令：一次贝塞尔曲线</strong></p><ul><li><code>(x,y)</code>结束点</li></ul></li><li><p><strong><code>g</code>标签:组合元素  设置元素公共属性</strong></p><ul><li>共用属性</li><li><code>transform = &quot;translate(0,0)&quot;</code></li></ul></li><li><p><strong><code>text</code>标签</strong></p><ul><li><code>x</code>, <code>y</code>, <code>text-anchor</code>(对齐start end middle)    <code>font-size</code></li></ul></li><li><p><strong><code>image</code> 标签</strong></p><ul><li><code>x</code>, <code>y</code>, <code>width</code>  <code>height</code></li><li><code>xlink:href</code>(图片地址)</li></ul></li></ul><h4 id="第十五课-地理信息与本地存储"><a href="#第十五课-地理信息与本地存储" class="headerlink" title="第十五课 地理信息与本地存储"></a>第十五课 地理信息与本地存储</h4><hr><h5 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h5><hr><ul><li><p>经度  :   南北极的连接线</p></li><li><p>纬度  :   东西连接的线</p></li><li><p>位置信息从何而来</p><ul><li><code>IP</code>地址</li><li><code>GPS</code>全球定位系统</li><li><code>Wi-Fi</code>无线网络</li><li>基站</li></ul></li><li><p><code>avigator.geolocation</code></p><ul><li><p>单次定位请求  ：<code>getCurrentPosition</code>(请求成功,请求失败,数据收集方式)</p></li><li><p><strong>请求成功函数</strong></p><ul><li>经度 :  <code>coords.longitude</code></li><li>纬度 :  <code>coords.latitude</code></li><li>准确度 :  <code>coords.accuracy</code></li><li>海拔 : <code>coords.altitude</code></li><li>海拔准确度 :  <code>coords.altitudeAcuracy</code></li><li>行进方向 :  <code>coords.heading</code></li><li>地面速度 :  <code>coords.speed</code></li><li>请求的时间: <code>new Date(position.timestamp)</code></li></ul></li><li><p><strong>请求失败函数</strong></p><ul><li>失败编号  ：<code>code</code><ul><li>0  :  不包括其他错误编号中的错误</li><li>1  :  用户拒绝浏览器获取位置信息</li><li>2  :  尝试获取用户信息，但失败了</li><li>3  :   设置了<code>timeout</code>值，获取位置超时了</li></ul></li></ul></li><li><p><strong>数据收集 :  json的形式</strong></p><ul><li><code>enableHighAcuracy</code>  :  更精确的查找，默认<code>false</code></li><li><code>timeout</code> :  获取位置允许最长时间，默认<code>infinity</code></li><li><code>maximumAge</code> :  位置可以缓存的最大时间，默认<code>0</code></li></ul></li><li><p><strong>多次定位请求*</strong>  : <code>watchPosition</code></p><ul><li>移动设备有用，位置改变才会触发</li><li>配置参数：<code>frequency</code> 更新的频率</li><li>关闭更新请求  :  <code>clearWatch</code></li></ul></li></ul></li></ul><ul><li><strong>examp01 getCurrentPosition</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>请求位置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">navigator.geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">box.innerHTML +=<span class="string">"经度："</span>+position.coords.longitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"纬度："</span>+position.coords.latitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"海拔："</span>+position.coords.accuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"海拔的准确度："</span>+position.coords.altitudeAccuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"地面速度"</span>+position.coords.speed + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"行进方向"</span>+position.coords.heading + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"请求时间"</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(position.timestamp) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">alert(err.code);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">enableHighAccuracy:<span class="literal">false</span>,<span class="comment">//精确请求</span></span><br><span class="line">timeout:<span class="number">5000</span>,<span class="comment">//设置超时</span></span><br><span class="line">maximumAge:<span class="number">1000</span><span class="comment">//缓存时间</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/RKPWMg" target="_blank" rel="noopener">在线演示</a></p><ul><li>*<em>examp02 *</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">navigator.geolocation.watchPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">box.innerHTML +=<span class="string">"经度："</span>+position.coords.longitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"纬度："</span>+position.coords.latitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"海拔："</span>+position.coords.accuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"海拔的准确度："</span>+position.coords.altitudeAccuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"地面速度"</span>+position.coords.speed + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"行进方向"</span>+position.coords.heading + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">box.innerHTML +=<span class="string">"请求时间"</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(position.timestamp) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">alert(err.code);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">enableHighAccuracy:<span class="literal">false</span>,<span class="comment">//精确请求</span></span><br><span class="line">timeout:<span class="number">5000</span>,<span class="comment">//设置超时</span></span><br><span class="line">maximumAge:<span class="number">1000</span><span class="comment">//缓存时间</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/zNGvjY" target="_blank" rel="noopener">在线演示</a></p><ul><li><strong>example03 高德地图应用</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">600px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>);</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/qRdOKZ" target="_blank" rel="noopener">在线演示</a></p><ul><li><strong>examp04  搜索城市</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;<span class="attribute">width</span>:<span class="number">500px</span>; <span class="attribute">height</span>:<span class="number">500px</span>; <span class="attribute">margin</span>:<span class="number">100px</span> auto;&#125;  </span><br><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>:none;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">150px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">38px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">border</span>:none;</span><br><span class="line"><span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#btn</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">placeholder</span>=<span class="string">"请输入城市..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"搜索"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>);</span><br><span class="line"><span class="keyword">var</span> toolBar,mouseTool,contextMenu;</span><br><span class="line"><span class="comment">//在地图中添加操作toolBar插件、mouseTool插件</span></span><br><span class="line">map.plugin([<span class="string">"AMap.ToolBar"</span>,<span class="string">"AMap.MouseTool"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">toolBar = <span class="keyword">new</span> AMap.ToolBar();</span><br><span class="line">map.addControl(toolBar);</span><br><span class="line">mouseTool = <span class="keyword">new</span> AMap.MouseTool(map);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> menuContext = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">menuContext.innerHTML = <span class="string">"&lt;div class=menu&gt;&lt;ul&gt;&lt;li onclick='zoomMenu(0)'&gt;缩小&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li onclick='zoomMenu(1)'&gt;放大&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li onclick='distanceMeasureMenu()'&gt;距离量测&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li onclick = 'addMarkerMenu()'&gt;添加标记&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;"</span>;</span><br><span class="line"><span class="comment">//创建一个自定义的右键菜单</span></span><br><span class="line">contextMenu = <span class="keyword">new</span> AMap.ContextMenu(&#123;<span class="attr">isCustom</span>:<span class="literal">true</span>,<span class="attr">content</span>:menuContext&#125;);</span><br><span class="line"><span class="comment">//给地图绑鼠标右键功能弹出右键菜单</span></span><br><span class="line">AMap.event.addListener(map,<span class="string">"rightclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">contextMenu.open(map,e.lnglat);<span class="comment">//e.lnglat鼠标点击的经纬度</span></span><br><span class="line">contextMenuPosition = e.lnglat;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//右键菜单缩放地图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zoomMenu</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n === <span class="number">0</span>)&#123;map.zoomOut();&#125;</span><br><span class="line"><span class="keyword">if</span>(n === <span class="number">1</span>)&#123;map.zoomIn();&#125;</span><br><span class="line">contextMenu.close();</span><br><span class="line">&#125;</span><br><span class="line">contextMenu.close();</span><br><span class="line"><span class="comment">//测量距离功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distanceMeasureMenu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">mouseTool.rule();</span><br><span class="line">contextMenu.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加标注功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMarkerMenu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">mouseTool.close();</span><br><span class="line"><span class="keyword">var</span> marker = <span class="keyword">new</span> AMap.Marker(&#123;</span><br><span class="line">map: map,</span><br><span class="line">position: contextMenuPosition, <span class="comment">//基点位置</span></span><br><span class="line">offset: &#123;<span class="attr">x</span>:<span class="number">-5</span>,<span class="attr">y</span>:<span class="number">-10</span>&#125; <span class="comment">//相对于基点位置</span></span><br><span class="line">&#125;);</span><br><span class="line">contextMenu.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索城市</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> val = city.value;</span><br><span class="line">map.setCity(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/xgGwaZ" target="_blank" rel="noopener">在线演示</a></p><h5 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h5><hr><ul><li><p><strong><code>Storage</code></strong></p><ul><li><code>sessionStorage</code><ul><li><code>session</code>临时回话，从页面打开到页面关闭的时间段</li><li>窗口的临时存储，页面关闭，本地存储消失</li></ul></li><li><code>localStorage</code><ul><li>永久存储（可以手动删除数据）</li></ul></li></ul></li><li><p><strong><code>Storage</code>的特点</strong></p><ul><li>存储量限制 ( 5M )</li><li>客户端完成，不会请求服务器处理</li><li><code>sessionStorage</code>数据是不共享、 <code>localStorage</code>共享</li></ul></li><li><p><strong><code>Storage API</code></strong></p><ul><li><code>setItem()</code>:<ul><li>设置数据，(<code>key</code>,<code>value</code>)类型，类型都是字符串</li><li>可以用获取属性的形式操作</li></ul></li><li><code>getItem():</code><ul><li>获取数据，通过<code>key</code>来获取到相应的<code>value</code></li></ul></li><li><code>removeItem()</code>:<ul><li>删除数据，通过key来删除相应的<code>value</code></li></ul></li><li><code>clear()</code>:<ul><li>删除全部存储的值</li></ul></li></ul></li><li><p><strong>存储事件:</strong></p><ul><li>当数据有修改或删除的情况下，就会触发<code>storage</code>事件</li><li>在对数据进行改变的窗口对象上是不会触发的`</li><li><code>Key</code> : 修改或删除的<code>key</code>值，如果调用<code>clear()</code>,<code>key</code>为<code>null</code></li><li><code>newValue</code>  :  新设置的值，如果调用<code>removeStorage()</code>,<code>key</code>为<code>null</code></li><li><code>oldValue</code> :  调用改变前的<code>value</code>值</li><li><code>storageArea</code> : 当前的<code>storage</code>对象</li><li><code>url</code> :  触发该脚本变化的文档的url</li><li>注：<code>session</code>同窗口才可以,例子：<code>iframe</code>操作</li></ul></li></ul><h4 id="第十六课-HTML5新增JS方法"><a href="#第十六课-HTML5新增JS方法" class="headerlink" title="第十六课 HTML5新增JS方法"></a>第十六课 HTML5新增JS方法</h4><hr><p><img src="https://sm.ms/image/Li1s5MwlUNBQkeZ" alt="H5在JavaScript中新增的方法一览"></p><ul><li><p><strong>新增选择器</strong></p><ul><li><code>document.querySelector()</code> 选择单个元素</li><li><code>document.querySelectorAll()</code> 选择所有的</li><li><code>document.getElementsByClassName()</code> 通过类名选择</li></ul></li><li><p><strong>延迟加载JS</strong></p><ul><li><code>JS</code>的加载会影响后面的内容加载<ul><li>很多浏览器都采用了并行加载JS，但还是会影响其他内容</li></ul></li><li><code>Html5</code>的<code>defer</code>和<code>async</code><ul><li><code>defer=“defer ”</code>: 延迟加载，会按顺序执行，在<code>onload</code>执行前被触发</li><li><code>async =“async”</code>: 异步加载，加载完就触发，有顺序问题</li></ul></li><li>浏览器兼容性：<code>Labjs</code>库</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态加载script文件 （推荐方法） 只需请求一次 可加载多个JavaScript文件，减少请求次数以及页面的加载阻塞</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line"><span class="keyword">if</span>(script.readyState)&#123;<span class="comment">//IE</span></span><br><span class="line">script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(script.readyState == <span class="string">"loaded"</span> || script.readyState == <span class="string">"complete"</span>)&#123;</span><br><span class="line">onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">script.src = url;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">loadScript(<span class="string">"js/defer.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"加载成功"</span>);</span><br><span class="line">      <span class="comment">//  加载成功回调</span></span><br><span class="line">&#125;);</span><br><span class="line">loadScript(<span class="string">"js/async.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"加载成功"</span>);</span><br><span class="line">   <span class="comment">//  加载成功回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>获取<code>class</code>列表属性</strong></p><ul><li><code>classList</code><ul><li><code>length</code> :  <code>class</code>的长度</li><li><code>add()</code> :  添加<code>class</code>方法</li><li><code>remove()</code>  :  删除<code>class</code>方法</li><li><code>toggle()</code> :  切换<code>class</code>方法 </li><li><code>contains()</code> : 判断类名是否存在返回<code>bool</code>值</li></ul></li></ul></li><li><p><strong><code>JSON</code>的新方法</strong></p><ul><li><p><code>parse()</code> : 把字符串转成<code>json</code></p><ul><li>字符串中的属性要严格的加上引号</li></ul></li><li><p><code>stringify()</code> : 把<code>json</code>转化成字符串</p><ul><li>会自动的把双引号加上</li></ul></li><li><p>与<code>eval</code>的区别</p><ul><li><code>eval()</code>：对任何的字符串进行解析变成js</li><li><code>parse()</code>：字符串中的属性要严格的加上引号</li></ul></li><li><p>其他浏览器兼容</p><ul><li><a href="http://www.json.org/" target="_blank" rel="noopener">去下载json2.js</a></li></ul></li></ul></li><li><p><strong>历史管理</strong></p><ul><li><code>onhashchange</code> ：改变hash值来管理</li><li><code>history</code>  ：<ul><li>服务器下运行<ul><li><code>pushState</code> :  三个参数 ：数据  标题(都没实现)  地址(可选)</li><li><code>onpopstate</code>事件 :  读取数据   <code>event.state</code></li></ul></li></ul></li></ul></li></ul><h4 id="第十七课-HTML5拖拽事件"><a href="#第十七课-HTML5拖拽事件" class="headerlink" title="第十七课 HTML5拖拽事件"></a>第十七课 HTML5拖拽事件</h4><hr><ul><li><p>图片自带拖拽功能</p></li><li><p>其他元素可设置<code>draggable</code>属性</p></li><li><p><strong><code>draggable ：true</code></strong></p><ul><li>拖拽元素(被拖拽元素对象)事件 :  <ul><li><code>ondragstart</code> : 拖拽前触发 </li><li><code>ondrag</code> :拖拽前、拖拽结束之间，连续触发</li><li><code>ondragend</code> :拖拽结束触发</li></ul></li><li>目标元素(拖拽元素被拖到的对象)事件 :  <ul><li><code>ondragenter</code> :进入目标元素触发</li><li><code>ondragover</code>:进入目标、离开目标之间，连续触发</li><li><code>ondragleave</code> :离开目标元素触发</li><li><code>ondrop</code> :在目标元素上释放鼠标触发<ul><li>需要在<code>ondragover</code>事件里面阻止默认事件</li></ul></li></ul></li></ul></li><li><p><strong>拖拽兼容问题</strong></p><ul><li><p>火狐浏览器下需设置<code>dataTransfer</code>对象才可以拖拽除图片外的其他标签</p><ul><li><p><code>dataTransfer</code>对象</p></li><li><p><code>setData()</code> : 设置数据 <code>key</code>和<code>value</code>(必须是字符串)</p></li><li><p><code>getData()</code> : 获取数据，根据<code>key</code>值，获取对应的<code>value</code></p></li><li><p><code>effectAllowed</code> : 设置光标样式(<code>none</code>, <code>copy</code>, <code>copyLink</code>, <code>copyMove</code>, <code>link</code>, <code>linkMove</code>,<code>move</code>, <code>all</code> 和<code>uninitialized</code>)</p></li><li><p><code>setDragImage</code> ：三个参数（指定的元素，坐标<code>X</code>，坐标<code>Y</code>）</p></li><li><p><code>files</code>： 获取外部拖拽的文件，返回一个<code>filesList</code>列表</p><ul><li><code>filesList</code>下有个<code>type</code>属性，返回文件的类型</li></ul></li></ul></li></ul></li><li><p><strong>读取文件信息</strong></p><ul><li><code>FileReader</code>(读取文件信息)<ul><li><code>readAsDataURL</code></li></ul></li><li>参数为要读取的文件对象<ul><li><code>onload</code>当读取文件成功完成的时候触发此事件</li><li><code>this. result</code> 获取读取的文件数据</li></ul></li></ul></li><li><p><strong>examp01 拖拽案例</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drap"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#drap</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被拖拽元素事件</span></span><br><span class="line">drap.ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">// 拖拽前</span></span><br><span class="line"><span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火狐浏览器下需设置dataTransfer对象才可以拖拽除图片外的其他标签</span></span><br><span class="line">ev.dataTransfer.setData(<span class="string">"key"</span>,<span class="string">"poetries"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//effectAllowed : 设置光标样式(none, copy, copyLink, copyMove, link, linkMove,move, all 和uninitialized)</span></span><br><span class="line">ev.dataTransfer.effectAllowed = <span class="string">"copy"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置被拖拽的小元素 setDragImage ：三个参数（指定的元素，坐标X，坐标Y）</span></span><br><span class="line">ev.dataTransfer.setDragImage(pic,<span class="number">25</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.style.background = <span class="string">"green"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drap.ondrag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 拖拽过程中</span></span><br><span class="line"><span class="keyword">this</span>.innerText = <span class="string">"被拖拽中..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drap.ondragend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 拖拽结束</span></span><br><span class="line"><span class="keyword">this</span>.style.background = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">this</span>.innerHTML = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标元素事件</span></span><br><span class="line">box.ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//进入目标元素触发</span></span><br><span class="line"><span class="keyword">this</span>.innerHTML = <span class="string">"可将文件拖放到这里!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">//进入目标、离开目标之间，连续触发</span></span><br><span class="line"><span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">ev.preventDefault(); </span><br><span class="line"><span class="keyword">this</span>.style.background = <span class="string">"pink"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//离开目标元素触发</span></span><br><span class="line"><span class="keyword">this</span>.innerHTML = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">this</span>.style.background = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;<span class="comment">//在目标元素上释放鼠标触发</span></span><br><span class="line"><span class="comment">//alert("拖放结束")</span></span><br><span class="line"><span class="keyword">this</span>.innerHTML = ev.dataTransfer.getData(<span class="string">"key"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/Ndqaxx" target="_blank" rel="noopener">在线演示</a></p><ul><li><strong>example02 拖拽相册</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>请拖拽图片到红框中<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>可以将文件拖放到这里！！<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dustbin"</span>&gt;</span>垃圾回收站<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">2px</span> solid red;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">192px</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br><span class="line"><span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#dustbin</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> dusTbin = <span class="built_in">document</span>.getElementById(<span class="string">"dustbin"</span>);</span><br><span class="line"><span class="keyword">var</span> span = box.getElementsByTagName(<span class="string">"span"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//目标元素事件</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="string">''</span>;</span><br><span class="line">box.ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//进入目标元素触发</span></span><br><span class="line">span.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;<span class="comment">//在目标元素上连续触发</span></span><br><span class="line"><span class="keyword">var</span> ev = ev||<span class="built_in">window</span>.event;</span><br><span class="line">ev.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">span.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//离开目标元素</span></span><br><span class="line">span.style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;<span class="comment">//在目标元素上面释放鼠标触发</span></span><br><span class="line"><span class="comment">//alert("拖拽结束！！");</span></span><br><span class="line"><span class="keyword">var</span> ev = ev||<span class="built_in">window</span>.event;</span><br><span class="line">ev.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">span.style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="keyword">var</span> file = ev.dataTransfer.files;</span><br><span class="line"><span class="comment">//alert(file[0].type);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;file.length ;i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file[i].type.indexOf(<span class="string">"image"</span>)!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> read = <span class="keyword">new</span> FileReader();<span class="comment">//新建一个读取文件对象</span></span><br><span class="line">read.readAsDataURL(file[i]);<span class="comment">//读取文件</span></span><br><span class="line">read.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//读取文件成功之后调用什么函数</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line"><span class="comment">//alert(this.result);</span></span><br><span class="line">img.src = <span class="keyword">this</span>.result;</span><br><span class="line">box.appendChild(img);</span><br><span class="line"><span class="comment">//获取img节点 实现删除功能</span></span><br><span class="line"><span class="keyword">var</span> oImg = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"><span class="keyword">if</span> (oImg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;oImg.length ;j++ )</span><br><span class="line">&#123;</span><br><span class="line">oImg[j].ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">ev.dataTransfer.setData(<span class="string">"data"</span>,ev.target.innerHTML);</span><br><span class="line">img = ev.target;</span><br><span class="line">&#125;</span><br><span class="line">oImg[j].ondragend = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">ev.dataTransfer.clearData(<span class="string">"data"</span>);<span class="comment">//清楚数据</span></span><br><span class="line">img = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现删除功能(移除img节点)</span></span><br><span class="line">dusTbin.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line">dusTbin.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (img)</span><br><span class="line">&#123;</span><br><span class="line">img.parentNode.removeChild(img);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"请上传图片！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/Ndqagr" target="_blank" rel="noopener">在线演示</a></p><ul><li><strong>example03 拖拽排序</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#f3f"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#ff6"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#c60"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#903"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#0f6"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#636"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#36f"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#033"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> oLi = oUl.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> curr = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; oLi.length;i++) &#123;</span><br><span class="line">    oLi[i].index = i;</span><br><span class="line">    oLi[i].ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">      ev.dataTransfer.setData(<span class="string">"data"</span>,<span class="keyword">this</span>.innerHTML);</span><br><span class="line">      <span class="comment">//this.innerHTML = "被拖拽中...";</span></span><br><span class="line">      curr = <span class="keyword">this</span>.index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    oLi[i].ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; oLi.length;i++)&#123;</span><br><span class="line">        oLi[i].style.border = <span class="string">"none"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(curr != <span class="keyword">this</span>.index)&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.border = <span class="string">"2px solid #000"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oLi[i].ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    oLi[i].ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">//鼠标释放的时候</span></span><br><span class="line">      <span class="comment">//oUl.insertBefore(oLi[curr],this);//insertBefore(新节点，目标节点)</span></span><br><span class="line">      inserAfter(oLi[curr],<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.style.border = <span class="string">"none"</span>;</span><br><span class="line">      <span class="comment">//oLi[curr].innerHTML = ev.DataTransfer.getData("data");</span></span><br><span class="line">      sort();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sort();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inserAfter</span>(<span class="params">newItem,targerItem</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parentItem = targerItem.parentNode;</span><br><span class="line">  <span class="keyword">if</span>(parentItem.lastChild == targerItem)&#123;</span><br><span class="line">    parentItem.appendChild(newItem);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    parentItem.insertBefore(newItem,targerItem.nextSibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/XpbEOW" target="_blank" rel="noopener">在线演示</a></p><h4 id="第十八课-跨文档操作"><a href="#第十八课-跨文档操作" class="headerlink" title="第十八课 跨文档操作"></a>第十八课 跨文档操作</h4><hr><ul><li><p><strong>跨文档请求</strong></p></li><li><p>同域跨文档</p><ul><li><code>iframe</code>内页：<ul><li>父页面操作子页面：<code>contentWindow</code></li><li>子页面操作父页面：<code>window.top</code>(找到最顶级的父页面)/<code>parent</code>(第一父页面)</li><li>新窗口页：<ul><li>父页面操作子页面：<code>window.open</code></li><li>子页面操作父页面：<code>window.opener</code></li></ul></li></ul></li></ul></li><li><p><strong>不同域跨文档</strong></p><ul><li><code>postMessage（“发送的数据”,”接收的域”）</code><ul><li><code>message</code>事件监听</li><li><code>ev.origin</code>发送数据来源的域</li><li><code>ev.data</code> 发送的数据</li></ul></li><li>通过判断发送的数据来执行相应的需求</li></ul></li><li><p><strong>ajax跨域</strong></p><ul><li><p><code>XMLHttpRequest</code> 新增功能</p><ul><li>跨域请求：修改服务端头信息<ul><li>I<code>E</code>兼容：<code>XDomaiRequest</code></li></ul></li></ul></li><li><p>进度事件：</p><ul><li><code>upload.onprogress(ev)</code> 上传进度(实现文件上传进度条)<ul><li><code>ev.total</code>  发送文件的总量</li><li><code>ev.loaded</code> 已发送的量</li></ul></li><li><code>FormData</code>  构建提交二进制数据</li></ul></li></ul></li><li><p>拓展阅读</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0ODA2ODU2NQ==&mid=2651130595&idx=2&sn=3d0f546f1867992729b3ace5d03766fc&chksm=f257ca59c520434f08e215b3bdcec3764712f73301b738c18163359e5aa5e949ff019616ffca&mpshare=1&scene=23&srcid=11289XUSBAQzrCp3Io55aoS1#rd" target="_blank" rel="noopener">HTML5 API 大盘点</a></li></ul></li></ul><h6 id="附录一-css3响应式布局"><a href="#附录一-css3响应式布局" class="headerlink" title="附录一　css3响应式布局"></a>附录一　css3响应式布局</h6><hr><ul><li><p>媒体类型</p><ul><li><code>*all</code> 所有媒体</li><li><code>braille</code> 盲文触觉设备</li><li><code>embossed</code> 盲文打印机</li><li><code>*print</code> 手持设备 </li><li><code>projection</code> 打印预览</li><li><code>*screen</code> 彩屏设备</li><li><code>speech</code> ‘听觉’类似的媒体类型</li><li><code>tty</code>不适用像素的设备</li><li><code>tv</code> 电视</li></ul></li><li><p>关键字</p><ul><li><code>and</code></li><li><code>not</code>    <code>not</code>关键字是用来排除某种制定的媒体类型</li><li><code>only</code>     <code>only</code>用来定某种特定的媒体类型</li></ul></li><li><p>媒体特性</p><ul><li><code>(max-width:600px)</code></li><li><code>(max-device-width: 480px)</code>     设备输出宽度</li><li><code>(orientation:portrait)</code>          竖屏</li><li><code>(orientation:landscape)</code>        横屏</li><li><code>(-webkit-min-device-pixel-ratio: 2)</code> 像素比</li><li><code>devicePixelRatio</code>             设备像素比 </li><li><code>window.devicePixelRatio = 物理像素 / dips</code></li></ul></li><li><p>样式引入</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="css/index.css" media="print" /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">"css/demo.css"</span>) screen;</span><br><span class="line"><span class="keyword">@media</span> screen&#123;    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=”stylesheet” media=”all and</span><br><span class="line"> (orientation:portrait)” href=”portrait.css”&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=”stylesheet” media=”all</span><br><span class="line"> and (orientation:landscape)”href=”landscape.css”&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">360px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">500px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" </span><br><span class="line">href="indexA.css"  media="screen and (min-width: 800px)"&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" </span><br><span class="line">href="indexB.css" media="screen and (min-width: 600px) and (max-width: 800px)"&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" </span><br><span class="line">href="indexC.css"    media="screen and (max-width: 600px)"&gt;</span><br></pre></td></tr></table></figure><h6 id="附录二-HTML5速查表"><a href="#附录二-HTML5速查表" class="headerlink" title="附录二　HTML5速查表"></a>附录二　HTML5速查表</h6><hr><ul><li><a href="http://caniuse.com/#search=canvas" target="_blank" rel="noopener">可以查阅支持H5+CSS3的属性</a></li><li><a href="http://www.html5star.com/manual/html5label-meaning/" target="_blank" rel="noopener">HTML5 标签含义之元素周期表</a></li><li><a href="https://sm.ms/image/QKy6iw5fh8IxLFd" target="_blank" rel="noopener">HTML5标签速查表</a></li><li><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fjonibologna.com%2Fcontent%2Fimages%2Fflexboxsheet.pdf">展示 flexbox 属性的作用–推荐</a></li><li><a href="https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/" target="_blank" rel="noopener">Flexbox 视觉指南–更好更容易地理解 Flexbox 某个属性的作用</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    <content src="http://yoursite.com/http://q80egzbfm.bkt.clouddn.com/http://q80egzbfm.bkt.clouddn.com/picGO20200331120703.png" type="image" />
    
    
      <category term="html5のcss3" scheme="http://yoursite.com/categories/html5%E3%81%AEcss3/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>hexo的搭建</title>
    <link href="http://yoursite.com/2020/03/06/hexo/"/>
    <id>http://yoursite.com/2020/03/06/hexo/</id>
    <published>2020-03-06T14:12:59.000Z</published>
    <updated>2020-04-06T02:56:57.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a>关于hexo</h5><p>hexo是一个快速、简洁且高效的博客框架,Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统</p><a id="more"></a><p>Hexo同时也是GitHub上的开源项目,如果想要更加全面的了解Hexo可以到其<a href="https://hexo.io/" target="_blank" rel="noopener">官网</a>了解更多的细节。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>下载<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Git</a></li><li>下载<a href="https://nodejs.org/en/download/。" target="_blank" rel="noopener">node.js</a>并安装,默认会安装npm(<a href="https://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">教程</a>) 查看版本 <code>node -v nmp -v</code>;<br>  <strong>（注:配置好node.js的环境变量）</strong></li><li>下载安装hexo 方法(基于npm/cnpm包的Git命令安装) <ol><li><code>输入:nmp install -g hexo</code>（可能会等待很久）</li><li>使用安装cnpm淘宝镜像<code>输入npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>安装完成后<code>输入cnpm install -g hexo-cli</code> 稍等片刻就安装好了 <code>hexo -v</code> 查看版本号   </li></ol></li></ul><h3 id="本地搭建hexo静态博客"><a href="#本地搭建hexo静态博客" class="headerlink" title="本地搭建hexo静态博客"></a>本地搭建hexo静态博客</h3><ul><li>新建一个文件夹（如blog\自己定义）</li><li>点击文件夹,右击运行Git Bash here,<code>输入hexo init</code>(生成模块)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">生成完成后，指定文件夹目录下有：</span><br><span class="line">node_modules: 依赖包</span><br><span class="line">public：存放生成的页面</span><br><span class="line">scaffolds：生成文章的一些模板</span><br><span class="line">source：用来存放你的文章</span><br><span class="line">themes：主题</span><br><span class="line">** _config.yml: 博客的配置文件**</span><br></pre></td></tr></table></figure></li><li>生成完之后 <code>输入 hexo server</code> 运行程序,就可以访问本地localhost:4000可以看到博客已经搭建完成(如果报错的话,大概就是端口号被占用输入<code>hexo s -p 5000</code> 更改端口号)</li></ul><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>cd  主题目录下</p><ul><li>下载主题(以next主题为例)(注:可以去</li><li><code>输入 git clone https://github.com/iissnan/hexo-theme-next.git（主题的地址）</code></li><li>打开站点下的_config.yml配置文件  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next(更改为自己下载的主题名字)</span><br></pre></td></tr></table></figure><h3 id="next主题的使用"><a href="#next主题的使用" class="headerlink" title="next主题的使用"></a>next主题的使用</h3><ul><li>安装好主题后主题文件夹里面会有一个主题配置_config配置文件</li><li>进入_config后找到Schemes里面会有4不同类型的主题样式(依个人爱好自行选择)</li><li>关于hexo-next主题下的一些个性化配置，请参考:(Next主题配置)[]</li></ul><blockquote><p>补注<br>hexo g hexo s （本地查看)localhost:4000 hexo g(生成文件)<br>hexo d 推到远端github中<br>hexo clean 清除缓存</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;关于hexo&quot;&gt;&lt;a href=&quot;#关于hexo&quot; class=&quot;headerlink&quot; title=&quot;关于hexo&quot;&gt;&lt;/a&gt;关于hexo&lt;/h5&gt;&lt;p&gt;hexo是一个快速、简洁且高效的博客框架,Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>next主题配置以及如何部署到github上</title>
    <link href="http://yoursite.com/2020/03/06/next/"/>
    <id>http://yoursite.com/2020/03/06/next/</id>
    <published>2020-03-06T14:12:59.000Z</published>
    <updated>2020-04-06T03:52:50.653Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a>next主题配置</h4><a id="more"></a><p>通过修改next主题下的_config.yml的scheme字段，配置不同的风格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line"># scheme: Gemini</span><br></pre></td></tr></table></figure><h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><p>通过修改next主题下的_config.yml的menu字段，选定显示的菜单项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  categories: &#x2F;categories</span><br><span class="line">  about: &#x2F;about</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  #commonweal: &#x2F;404.html</span><br></pre></td></tr></table></figure><p>其中，home代表主页，categories代表分类页，about代表关于页面，archives代表归档页，commonweal代表404页面（page not found时候显示的页面）。</p><h3 id="页面汉化"><a href="#页面汉化" class="headerlink" title="页面汉化"></a>页面汉化</h3><p>next主题下的language文件夹下的文件进行修改，若当前语言是简体中文，直接修改language/zh-Hans.yml里的对应字段即可。</p><h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>在主题下的source/images/下放置头像文件avatar.png即可。</p><h3 id="侧栏设置"><a href="#侧栏设置" class="headerlink" title="侧栏设置"></a>侧栏设置</h3><p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        &#x2F;&#x2F;靠左放置</span><br><span class="line">  #position: right      &#x2F;&#x2F;靠右放置</span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  #display: post        &#x2F;&#x2F;默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">  display: always       &#x2F;&#x2F;在所有页面中都显示</span><br><span class="line">  #display: hide        &#x2F;&#x2F;在所有页面中都隐藏（可以手动展开）</span><br><span class="line">  #display: remove      &#x2F;&#x2F;完全移除</span><br><span class="line"></span><br><span class="line">  offset: 12            &#x2F;&#x2F;文章间距（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  b2t: false            &#x2F;&#x2F;返回顶部按钮（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  scrollpercent: true   &#x2F;&#x2F;返回顶部按钮的百分比</span><br></pre></td></tr></table></figure><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><p>1、先安装 hexo-generator-feed 插件 <code>npm install hexo-generator-feed --save</code><br>2、打开 站点配置文件 找到Extensions在下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># RSS订阅</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &#39; &#39;</span><br></pre></td></tr></table></figure><p>3、打开 主题配置文件 找到rss,设置为 <code>rss: /atom.xml</code></p><h3 id="添加分类模块の添加标签模块即其他模块"><a href="#添加分类模块の添加标签模块即其他模块" class="headerlink" title="添加分类模块の添加标签模块即其他模块"></a>添加分类模块の添加标签模块即其他模块</h3><p>1、新建一个分类页面 <code>hexo new page categories</code><br>2、你会发现你的source文件夹下有了categorcies/index.md，打开index.md文件将title设置title: 分类<br>3、打开 主题配置文件 找到menu，将categorcies取消注释<br>4、把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的类中<br>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: 分类文章标题</span><br><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure><p>1、新建一个标签页面 <code>hexo new page tags</code><br>2、你会发现你的source文件夹下有了tags/index.md，打开index.md文件将title设置为title: 标签<br>3、打开 主题配置文件 找到menu，将tags取消注释<br>4、把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中<br>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签文章标题</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其他模块也类似<br><strong>添加关于模块</strong><br>1、新建一个关于页面<code>hexo new page about</code><br>2、你会发现你的source文件夹下有了about/index.md，打开index.md文件即可编辑关于你的信息，以随便编辑。<br>3、打开 主题配置文件 找到menu，将about取消注释</p><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>1、安装 hexo-generator-searchdb 插件<br><code>npm install hexo-generator-searchdb --save</code><br>2、打开 站点配置文件 找到Extensions在下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>3、打开 主题配置文件 找到Local search，将enable设置为true</p><h3 id="添加阅读全文按钮"><a href="#添加阅读全文按钮" class="headerlink" title="添加阅读全文按钮"></a>添加阅读全文按钮</h3><p>因为在你的博客主页的文章会有很多内容，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加<code>&lt;!--more--&gt;</code></p><h3 id="修改作者头像并旋转"><a href="#修改作者头像并旋转" class="headerlink" title="修改作者头像并旋转"></a>修改作者头像并旋转</h3><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 头像圆形 *&#x2F;</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*&#x2F;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  &#x2F;* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*&#x2F;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* Z 轴旋转动画 *&#x2F;</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何自己给博客添加样式"><a href="#如何自己给博客添加样式" class="headerlink" title="如何自己给博客添加样式"></a>如何自己给博客添加样式</h3><p>打开blog/themes/hexo-theme-next/source/css/_custom/custom.styl可自行修改样式 如果样式应用不上就在样式后面添加 !important即可</p><h3 id="将博客与Github关联"><a href="#将博客与Github关联" class="headerlink" title="将博客与Github关联"></a>将博客与Github关联</h3><h5 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h5><blockquote><p>首先注册一个github账号，注册时填写的username要谨慎</p></blockquote><ol><li>创建一个储存库，名称规则为:  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username.github.io</span><br></pre></td></tr></table></figure><ol start="2"><li>设置Git的user name和email  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;quieta&quot;</span><br><span class="line">git config --global user.email &quot;&#x3D;434299971@qq.com&quot;</span><br></pre></td></tr></table></figure><h5 id="为github-设置ssh-keys"><a href="#为github-设置ssh-keys" class="headerlink" title="为github 设置ssh keys"></a>为github 设置ssh keys</h5><ol><li>检查极其上是否已经存在id_rsa.pub文件  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><ol start="2"><li><p>不存在的话使其生成 <code>ssh-keygen -t rsa -C &quot;434299971@163.com</code>一路回车即可。  </p></li><li><p>生成完后会提示路径 找到路径对应位置打开复制id_rsa.pub文件内容，在github的settings中，点选SSH keys，添加一个key，将内容粘贴进去。  </p></li><li><p>测试是否添加成功，在刚刚的机器上输入  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><ol start="5"><li>配置Deployment  </li></ol><p>编辑hexo/config.yml文件如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure><ol start="6"><li>安装依赖   </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>其中repository的地址就是你刚刚创建的仓库的https地址。<br>(注:每个属性值前面记得加空格，不然会报错的)</p><ol start="7"><li>部署  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g 生成</span><br><span class="line">hexo d 部署到github</span><br></pre></td></tr></table></figure><p>部署成功后，可通过 <a href="http://quieta.github.io" target="_blank" rel="noopener">http://quieta.github.io</a> 进行访问，其中将quieta替换为你自己的username即可<br>不过访问速度可能会很慢</p><h4 id="解决github访问很慢"><a href="#解决github访问很慢" class="headerlink" title="解决github访问很慢"></a>解决github访问很慢</h4><p>访问很慢的原因:访问很慢的原因: dns解析的问题,即github的CDN域名遭到了DNS污染，导致无法连接使用 github 的加速分发服务器，才使得国内访问速度很慢。<br><strong>解决办法</strong><br>1.修改本地host文件,进行绕过cdn直接解析<br> 查询github的ip地址 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">ip查询</a>打开之后 查询github.com以及github.global.ssl.fastly.net<br>2.将这两个host添加到本地host文件格式如下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询到的ip  github.com </span><br><span class="line">查询到的ip  github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p>然后进入 C:\Windows\System32\drivers\etc\host <em>注意使用管理员打开,否则无法保存</em><br>3.保存之后最好刷新一下本地的dns缓存<br>win + r -&gt;cmd-&gt;ipconfig /flushdns  然后再次尝试访问github,发现这次的打开速度快了很多 ok,问题解决!</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;next主题配置&quot;&gt;&lt;a href=&quot;#next主题配置&quot; class=&quot;headerlink&quot; title=&quot;next主题配置&quot;&gt;&lt;/a&gt;next主题配置&lt;/h4&gt;
    
    </summary>
    
    <content src="http://yoursite.com/http://q80egzbfm.bkt.clouddn.com/http://q80egzbfm.bkt.clouddn.com/picGO20200331120447.png" type="image" />
    
    
      <category term="next" scheme="http://yoursite.com/categories/next/"/>
    
    
      <category term="懒" scheme="http://yoursite.com/tags/%E6%87%92/"/>
    
  </entry>
  
  <entry>
    <title>htmlのcss笔记</title>
    <link href="http://yoursite.com/2020/02/24/html%E3%81%AEcss/"/>
    <id>http://yoursite.com/2020/02/24/html%E3%81%AEcss/</id>
    <published>2020-02-24T13:56:54.170Z</published>
    <updated>2020-04-01T06:08:20.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="第一部分html"><a href="#第一部分html" class="headerlink" title="第一部分html"></a>第一部分html</h4><h5 id="html概述"><a href="#html概述" class="headerlink" title="html概述"></a>html概述</h5><ul><li><p>认识HTML：</p><ul><li><code>html</code>不是一种编程语言，是一种标志语言</li><li>标记语言是由一套标识标签组成的</li><li><code>html</code>使用标签来描述网页</li></ul></li></ul><a id="more"></a><ul><li><code>html</code>结构：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逻辑代码 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逻辑代码底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery/jquery-2.1.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;head&gt;</code>中添加信息</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"smile@kang.cool"</span>&gt;</span>------作者</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"hello"</span>&gt;</span>------网页描述</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"a,b,c"</span>&gt;</span>------关键字,“，”分隔</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Wed, 26 Feb 1997 08：21：57 GMT"</span>&gt;</span>------设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span>------禁止浏览器从本地机的缓存中调阅页面内容</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Window-target"</span> <span class="attr">content</span>=<span class="string">"_top"</span>&gt;</span>------用来防止别人在框架里调用你的页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5;URL=http://kahn1990.com/"</span>&gt;</span>------跳转页面，5指时间停留5秒 网页搜索机器人向导。用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"none"</span>&gt;</span>------content的参数有all,none,index,noindex,follow,nofollow，默认是all</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"Shortcut Icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span>&gt;</span>------收藏图标</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache, must-revalidate"</span>&gt;</span>------网页不会被缓存</span><br></pre></td></tr></table></figure><ul><li><p>不成对出现的标签<br><code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;meta&gt;</code> <code>&lt;img&gt;</code>  <code>&lt;input..&gt;</code>  <code>&lt;option..&gt;</code>  <code>&lt;link&gt;</code></p><ul><li>特殊符号：<ul><li><code>&amp;nbsp</code>; —-&gt;空格</li><li><code>&amp;gt</code>; —&gt;大于号</li><li><code>&amp;lt</code>；—&lt;小于号</li><li><code>&amp;quot</code>；—&gt;引号</li><li><code>&amp;copy</code>;–&gt;版权号</li></ul></li></ul></li></ul><hr><h4 id="第一章-html基本标签"><a href="#第一章-html基本标签" class="headerlink" title="第一章 html基本标签"></a>第一章 html基本标签</h4><hr><ul><li><p><code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code>标签</p></li><li><p><code>&lt;h1&gt;&lt;/h1</code>—-<code>&lt;h6&gt;&lt;/h6&gt;</code>仅仅用于标题文本，不要为了产生粗体文本使用它们</p></li><li><p><code>&lt;p&gt;</code>标签  段落标签</p></li><li><p><code>&lt;strong&gt;&lt;b&gt;</code>标签</p><ul><li>都会让文字产生加粗效果<ul><li><code>&lt;strong&gt;</code>用于强调文本，强度更深，表示重要文本—&gt;用于<code>SEO</code>优化</li><li><code>&lt;b&gt;</code>只是视觉加粗效果—&gt;单纯为了产生加粗</li></ul></li></ul></li><li><p><code>&lt;em&gt;</code> <code>&lt;i&gt;</code>标签</p><ul><li><code>em</code>用于强调文本</li><li><code>i</code>只是视觉斜体效果</li><li><code>&lt;strong&gt;</code>比<code>&lt;em&gt;</code>强调更强</li></ul></li><li><p><code>span</code>标签</p><ul><li>对被用来组合文档中的行内元素</li><li>注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化</li></ul></li><li><p><code>&lt;pre&gt;</code>标签</p><ul><li>文字的格式按源码的排版来显示，我们称之为预处理格式</li></ul></li><li><p><code>&lt;a&gt;</code>标签—&gt;他有一个必不可少的属性 href </p><ul><li><code>target</code>属性：</li><li><code>_self</code>(在原来页面打开) </li><li><code>_blank</code>（新窗口打开）</li><li><code>_top</code>（打开时忽略所有的框架） </li><li><code>_parent</code>（在父窗口中打开）</li></ul></li><li><p>创建锚点和锚链接</p><ul><li>锚点也是一种超链接，是页面内进行跳转的超链接<pre><code>- 第一步：创建锚点 `&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt;`- 第二步：使用创建好的锚点名称 `&lt;a href=&quot;#锚点名称&quot;&gt;内容&lt;/a&gt;`</code></pre></li></ul></li><li><p><code>marquee</code>标签</p><ul><li>可以创建一个内容滚动效果<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">"down"</span> <span class="attr">loop</span>=<span class="string">"4"</span> <span class="attr">onmouseover</span>=<span class="string">this.stop()</span> <span class="attr">onmouseout</span>=<span class="string">this.start()</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>direction</code> 表示滚动方向，取值有（left,right,up,down,默认left）</li><li><code>loop</code>表示滚动循环的次数，默认为无限循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onmouseover=<span class="keyword">this</span>.stop()  onmouseover=<span class="keyword">this</span>.start()  scrollamout=<span class="string">"1"</span>(滚动速度)</span><br></pre></td></tr></table></figure></li><li><p>表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动</p></li></ul><hr><h4 id="第二章-img图片标签与路径"><a href="#第二章-img图片标签与路径" class="headerlink" title="第二章 img图片标签与路径"></a>第二章 img图片标签与路径</h4><hr><ul><li><p>图片标签与路径：</p><ul><li>常见图片格式 <code>jpg</code> <code>png</code> <code>gif</code></li><li><code>Gif</code>     （只支持全透明）</li><li><code>Jpeg</code> /<code>jpg</code>     </li><li><code>Png</code> 半/全透明都支持</li></ul></li><li><p>图片标签写法 ：</p><ul><li><code>&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;</code></li></ul></li><li><p>图片四要素：</p><ul><li><code>src=&quot;&quot;</code>        图片路径</li><li><code>alt=&quot;&quot;</code>       图片含义</li><li><code>width=&quot;&quot;</code>     图片宽度 和图片大小保持一致</li><li><code>height=&quot;&quot;</code>     图片高度 和图片大小保持一致</li><li><code>title=&quot;&quot;</code></li></ul></li><li><p>路径知识：</p><ul><li><p>相对路径、绝对路径：</p><ul><li>相对路径：(Relative Path) 相对于该文件的路径；</li><li>绝对路径：(Absolute Path) 从磁盘出发的路径； </li></ul></li><li><p><code>&lt;img src=&quot;&quot; …… align=&quot;&quot; /&gt;</code> <code>align</code>属性–设置图片与后面文字的位置关系<br>值–<code>top</code>、<code>bottom</code>、<code>middle</code>、<code>absmiddle</code>、<code>left</code>、<code>right</code></p></li></ul></li><li><p>在静态页面中：</p><ul><li><p><code>/</code>开头表示根目录；</p></li><li><p><code>./</code>表示当前目录；（斜画线前面一个点）</p></li><li><p><code>../</code>上级目录；（斜画线前面两个点）</p></li><li><p>直接用文件名不带/也表示同一目录</p></li></ul><ul><li>这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。</li></ul></li></ul><hr><h4 id="第三章-三种列表的讲解"><a href="#第三章-三种列表的讲解" class="headerlink" title="第三章 三种列表的讲解"></a>第三章 三种列表的讲解</h4><hr><ul><li>三种列表的知识讲解：<ul><li><code>&lt;ul&gt;</code>无序列表<ul><li>无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><ul><li><ol>有序列表  - 有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 `<ol>` 标签。每个列表项始于 `<li> `标签。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">   &lt;li&gt;内容一&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;内容二&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;内容三&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><ul><li><p>列表符号</p><ul><li><p>无序列表-列表符号:</p><ul><li><code>type=&quot;circle&quot;</code>  空心圆 <code>type=“disc”</code> 实心圆  默认值 <code>type=&quot;square&quot;</code> 方块符</li></ul></li><li><p>有序列表-列表符号</p><ul><li><code>type=&quot;A&quot;</code>    A B C D</li><li><code>type=&quot;a&quot;</code>    a b c d</li><li><code>type=&quot;1&quot;</code>    1 2 3 4  默认值type=”I”    I II III type=”i”     i ii iii</li></ul></li><li><p>列表嵌套</p></li><li><p>无序列表-嵌套</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li&gt;柚子</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li&gt;沙田柚&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;蜜柚&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;荔枝&lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;苹果&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><ul><li>有序列表-嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line"> &lt;li&gt;茶</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li&gt;红茶&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;绿茶&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;果汁&lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;牛奶&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><ul><li>定义列表<ul><li>定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个定义列表项以 <code>&lt;dt&gt;</code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;  </span><br><span class="line">     &lt;dt&gt;pc网页制作&lt;&#x2F;dt&gt;  </span><br><span class="line">     &lt;dd&gt;学习DIV+CSS JS JQ 项目实战&lt;&#x2F;dd&gt;  </span><br><span class="line">     &lt;dt&gt;手机网页制作&lt;&#x2F;dt&gt;  </span><br><span class="line">     &lt;dd&gt;手机网页制作实战&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>dd</code>是对<code>dt</code>的解释</p><ul><li><code>&lt; dl&gt;&lt; /dl&gt;</code>用来创建一个普通的列表,</li><li><code>&lt; dt&gt;&lt; /dt&gt;</code>用来创建列表中的上层项目，</li><li><code>&lt; dd&gt;&lt; /dd&gt;</code>用来创建列表中最下层项目，</li><li><code>&lt; dt&gt;&lt; /dt&gt;</code>和<code>&lt; dd&gt;&lt; /dd&gt;</code>都必须放在<code>&lt; dl&gt;&lt; /dl&gt;</code>标志对之间。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;中国城市&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;北京 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;上海 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;广州 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;美国城市&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;华盛顿 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;芝加哥 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;纽约 &lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure><ul><li><code>dl</code>是d<code>efinition list</code>的缩写</li><li><code>dt</code>是<code>definition title</code>的缩写</li><li><code>dd</code>是d<code>efinition description</code>的缩写</li></ul><ul><li><code>list-style</code>属性具有三个属性分量：</li><li><code>list-style-position</code> ：设置列表项图标的位置，位于文本内或者文本外</li><li><code>list-style-type</code>： 设置列表项图标的类型</li><li><code>list-style-image</code>：使用图像设置列表项图标</li></ul><hr><h4 id="第四章-表单元素-上"><a href="#第四章-表单元素-上" class="headerlink" title="第四章 表单元素(上)"></a>第四章 表单元素(上)</h4><hr><ul><li><p>表单标签:</p><ul><li><p><code>&lt;form&gt;</code>表单标签</p><ul><li><code>&lt;form&gt;</code>表单是一个包含表单元素的区域，包括起来的都是表单的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> &lt;input type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>HTML标签 - <code>Action</code>和确认按钮： </p><ul><li>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;html.do&quot; method&#x3D;&quot;get&quot;&gt;    </span><br><span class="line">        username:  &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;   </span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提  交&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>HTML</code>标签 - 隐藏域隐藏标签：</p></li><li><p>隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;        </span><br><span class="line">     &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;hid&quot; value&#x3D;&quot;value&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;input&gt;</code>标签的掌握</p><ul><li><p>常用<code>type</code>类型：</p><ul><li><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; /&gt;</code></li><li><code>type=&quot;text&quot;</code>       单行文本输入框</li><li><code>type=&quot;password&quot;</code>    密码（<code>maxlength=&quot;&quot;</code>）</li><li><code>type=&quot;radio&quot;</code>     单项选择（<code>checked=&quot;checked&quot;</code>） </li><li><code>type=&quot;checkbox&quot;</code>   多项选择  </li><li><code>type=&quot;button&quot;</code>    按钮</li><li><code>type=&quot;submit&quot;</code>    提交 <code>type=&quot;image&quot;</code>图片提交</li><li><code>type=&quot;file&quot;</code>    上传文件</li><li><code>type=&quot;reset&quot;</code>重置</li><li><code>type=&quot;hidden&quot;</code>    隐藏</li></ul></li></ul></li><li><p>关于表单中的设置默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;今天心情不错&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name&#x3D;&quot;&quot; &gt;</span><br><span class="line"> &lt;option  value&#x3D;&quot;&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line"> &lt;option  value&#x3D;&quot;&quot; selected&#x3D;&quot;selected&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">&lt;select&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>textarea</code>没有默认值</p></li><li><p><code>&lt;label&gt;</code>标签的使用</p><ul><li><p><code>&lt;label&gt;&lt;/label&gt;</code></p><ul><li><code>label</code> 元素不会向用户呈现任何特殊效果。</li><li>不过，它为鼠标用户改进了可用性。</li><li>如果您在 <code>label</code> 元素内点击文本，就会触发此控件。</li><li>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</li></ul></li><li><p><code>&lt;label&gt;</code> 标签的<code>for</code> 属性应当与相关元素的 <code>id</code>属性相同。</p></li><li><p>例子：（重要—注册表单–用户体验–必做）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;单向选择&lt;&#x2F;p&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;male&quot;&gt;男：&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; id&#x3D;&quot;male&quot;&#x2F;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;nv&quot;&gt;女：&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot;checked&#x3D;&quot;check&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="第五章-表单和表格-下"><a href="#第五章-表单和表格-下" class="headerlink" title="第五章 表单和表格(下)"></a>第五章 表单和表格(下)</h4><hr><ul><li><p>表单和表格标签：</p><ul><li><code>&lt;textarea&gt;</code>文本域标签</li><li><code>&lt;textarea&gt;</code>标签：</li><li><code>&lt;textarea&gt;&lt;/textarea&gt;</code>是文本域标签，可以在其中插入一段文字内容，它有两个常用属性<code>rows</code>和<code>cols</code></li></ul></li><li><p>注意：</p><ul><li><code>rows</code>表示这个文本域有多少行</li><li><code>cols</code>表示这个文本域有多少列</li></ul></li><li><p>除了这两个属性它还有<code>readonly</code>（只读，文本域的内容无法改变，相当于协议）和<code>title</code>（鼠标放上提示）</p></li><li><p><code>&lt;select&gt;</code>标签的掌握</p><ul><li>注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 <code>&lt;select&gt;</code> 表单数据提交给服务器时包括 <code>name</code>属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;      </span><br><span class="line">    &lt;select name&#x3D;&quot;&quot;  id&#x3D;&quot;&quot;&gt;</span><br><span class="line">         &lt;option value&#x3D;&quot;1&quot;&gt;1月&lt;&#x2F;option&gt;  </span><br><span class="line">          &lt;option value&#x3D;&quot;2&quot;&gt;2月&lt;&#x2F;option&gt;      </span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常用到的属性：<code>disabled=“disabled”  name=&quot;sel&quot;  size=&quot;2&quot;</code></p></li></ul><ul><li><p><code>&lt;table&gt;</code>表格标签</p></li><li><p><code>&lt;table&gt;</code>表格标签：<code>&lt;table&gt;</code>是表格标签，可以用它定义一个表格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure></li><li><p>注意：<code>&lt;table&gt;</code>的<code>border</code>属性不能少</p></li></ul><ul><li><p><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code>标签的使用</p><ul><li><p><code>&lt;tr&gt;</code>行标签：</p><ul><li><code>&lt;tr&gt;</code>可以定义表格中的一行，一个&lt;<code>tr&gt;&lt;/tr&gt;</code>表示一行。</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;td&gt;</code>单元格标签:</p><ul><li><code>&lt;td&gt;</code>可以定义表格中的一个单元格，<code>&lt;td&gt;&lt;/td&gt;</code>表示一个单元格。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td &gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><ul><li><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：</li><li><code>border-collapse:collapse</code>;</li><li><code>colspan</code>左右合并</li><li><code>rowspan</code>上下合并</li></ul></li></ul></li></ul><p><strong>第一部分总结</strong>：</p><ul><li><p>非可视化标签：<code>head</code>  <code>meta</code>  <code>style</code>  <code>scrpit.</code>..</p></li><li><p>可视化标签：<code>img</code>  <code>div</code> <code>span</code> <code>a</code> <code>ul</code> <code>li</code>…</p></li><li><p>只有可视化标签，才能用<code>css</code>改变它</p></li><li><p>单标签：<code>meta</code>  <code>link</code>  <code>base</code>  <code>img</code>  <code>input</code> <code>br</code> <code>hr</code></p></li><li><p>双标签：<code>html</code> <code>head</code> <code>body</code>  <code>div</code>  <code>a</code>  <code>p</code>  <code>span</code> ..<code>ul</code> <code>li</code> <code>ol</code> <code>dl</code> ….</p></li><li><p><strong>常用可视化标签</strong></p><ul><li>** <code>div</code>** <ul><li>一般用它来布局</li></ul></li><li><strong>a</strong>  超链接标签<ul><li><code>href</code>*属性：设置跳转的网页地址</li><li><code>target</code>属性：设置跳转的目标</li><li>结论：凡事页面可以点击跳转或者表单提交的文字，都用<code>a</code>标签</li></ul></li><li><strong><code>img</code></strong><ul><li><code>src</code>*属性用来设置图片的url数据</li><li><code>alt</code>提供给搜索引擎搜索的</li><li><code>width</code></li><li><code>height</code></li><li>结论 ：显示图片</li></ul></li><li><strong>ul li</strong><ul><li>列表</li><li>结论：只要将来设计页面中有固定样式的列表，就用ul和li</li></ul></li><li><strong><code>table</code> <code>caption</code> <code>tr</code> <code>td (th)</code></strong><ul><li>慢慢已经被淘汰了 被ul li代替</li><li>如果是合并竖排的就是合并行（<code>rowspan</code>）</li><li>如果是合并横排的就是合并列（<code>colspan</code>）</li></ul></li></ul></li></ul><hr><p><strong>HTML部分导图总结</strong></p><hr><ul><li><a href="http://www.html5star.com/manual/html5label-meaning/" target="_blank" rel="noopener">HTML5标签集合</a></li></ul><p><img src="https://i.loli.net/2020/03/21/X7i4rUKj2blTFvs.jpg" alt=""></p><p><img src="https://i.loli.net/2020/03/21/gNev6XI7ZaTHJdA.png" alt=""></p><p><img src="https://i.loli.net/2020/03/21/rdujGsQNaLgewKn.jpg" alt=""></p><hr><h3 id="第二部分-CSS"><a href="#第二部分-CSS" class="headerlink" title="第二部分 CSS"></a>第二部分 CSS</h3><hr><h4 id="第八章-css基础知识"><a href="#第八章-css基础知识" class="headerlink" title="第八章 css基础知识"></a>第八章 css基础知识</h4><hr><ul><li><p><code>css</code>基础知识：</p><ul><li><code>css</code>样式表的定义</li><li><code>css</code>：（Cascading Style Sheets）层叠样式表；</li></ul></li><li><p>分类及位置：内部样式<code>-head</code>区域<code>style</code>标签里面</p><ul><li>外部样式-<code>link</code>调用</li><li>内联样式-标签元素里面</li></ul></li><li><p><code>css</code>内的注释：/<code>*</code>注释内容<code>*</code>/</p></li><li><p><code>css</code>样式表的语法</p><ul><li><p><code>CSS</code>规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。</p></li><li><p>盒子名或者标签名{属性:值;}</p></li><li><p><strong>CSS中几种颜色的表示方法</strong></p><ul><li><strong>用颜色名表示</strong><ul><li>有17个预先确定的颜色，它们是<ul><li><code>aqua</code>, <code>black</code>, <code>blue</code>, <code>fuchsia</code>, <code>gray</code>, <code>green</code>, <code>lime</code>, <code>maroon</code>, <code>navy</code>,<br>　　<code>olive</code>, <code>orange,</code> <code>purple</code>, <code>red</code>, <code>silver</code>, <code>teal</code>, <code>white</code>, and <code>yellow</code></li></ul></li></ul></li></ul><ul><li><p><strong>用十六进制的颜色值表示(红、绿、蓝)</strong></p><ul><li><code>#FF0000</code>或者<code>#F00</code> </li></ul></li><li><p><strong>用rgb(r,g,b)函数表示</strong></p><ul><li>如：<code>rgb(255,255,0)</code></li></ul></li><li><p><strong>用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)</strong></p><ul><li>如：<code>hsl(120,100%,100%)</code>,色调0代表红色，<code>120</code>代表绿色，<code>240</code>代表<br>蓝色 </li></ul></li><li><p>*<em>用<code>rgba(r,g,b,a)</code>函数表示 *</em></p><ul><li>其中<code>a</code>表示的是改颜色的透明度，取值范围是<code>0~1</code>，其中<code>0</code>代表完全透明</li></ul></li><li><p><strong>用hsla(Hue,Saturation,Lightness,alpha)函数表示</strong></p><ul><li>色调、饱和度、亮度、透明度 </li></ul></li><li><p>例子</p></li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute;top:0px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:gray;"</span>&gt;</span>background-color:gray<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#F00;"</span>&gt;</span>background-color:#F00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#ffff00;"</span>&gt;</span>background-color:#ffff00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:rgb(255,0,255);"</span>&gt;</span>background-color:rgb(255,0,255)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:hsl(120,80%,50%);"</span>&gt;</span>background-color:hsl(120,80%,50%)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:rgba(255,0,255,0.5);"</span>&gt;</span>background-color:rgba(255,0,255,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:hsla(120,80%,50%,0.5);"</span>&gt;</span>background-color:hsla(120,80%,50%,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-39e61a813f637282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>内部样式表<ul><li>当单个页面需要设置样式时，就应该使用内部样式表。</li><li>使用 <code>&lt;style&gt;&lt;/style&gt;</code>标签在文档<code>&lt;head&gt;&lt;/head&gt;</code>里面定义内部样式表</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;style type&#x3D;&quot;text&#x2F;css&quot; &gt;</span><br><span class="line">  p&#123;color:red;&#125;</span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><ul><li><p>从外部引入到样式分为两种：（注意写在<code>head</code>标签里面）  </p></li><li><p>当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个<code>css</code>文件，然后引用到我们的页面中。</p></li><li><p><code>Link</code>样式表式：  <code>&lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)&gt;</code></p></li><li><p><code>Html</code>式：  <code>&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css.css&quot;);&gt;&lt;/style&gt;</code> </p></li></ul><ul><li><p>内联样式表（优先级高）</p><ul><li><p>写在标签里面的样式</p></li><li><p>如：<code>&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</code></p></li></ul></li><li><p>表示给<code>p</code>标签里面的文字颜色设置为红色</p></li><li><p>区别：外链样式与导入样式</p><ul><li><p><code>link</code>标签是属于<code>xhtml</code>范畴，而<code>@import</code>则是<code>css2.1</code>中特有的。<code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它的事情，比如定义<code>RSS</code>，定义<code>rel</code>连接属性等，<code>@import</code>就只能加载<code>CSS</code>了。 </p></li><li><p>加载的顺序的区别，<code>link</code>加载的<code>css</code>时，是一种并行(没有尝试是否是这样)加载<code>CSS</code>方式，而<code>@impor</code>则在整个页面加载完成后才加载。</p></li><li><p>兼容性的区别，因<code>@import``CSS2.1</code>才特有的，所以对于不兼容<code>CSS2.1</code>的浏览器来说，无效。</p></li><li><p>在样式控制上(比如动态改变网页的布局时,使用<code>javascript</code>操作<code>DOM</code>)的区别，此时<code>@import</code>就无能为力了。</p></li></ul></li></ul><hr><ul><li><p><strong>样式的优先级补充</strong></p><ul><li>相同权值情况下，<code>CSS</code>样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：<ul><li><code>内联样式表（标签内部）</code> &gt; <code>嵌入样式表（当前文件中）</code>&gt; <code>外部样式表（外部文件中）</code></li></ul></li></ul></li><li><p>权值不同时，浏览器是根据权值来判断使用哪种<code>css</code>样式的，哪种样式权值高就使用哪种样式</p></li><li><p>层叠优先级是:</p><ul><li><code>浏览器缺省</code>&lt; <code>外部样式表</code> &lt; <code>内部样式表</code> &lt; <code>内联样式</code></li></ul></li><li><p>其中样式表又有:<code>类选择器</code> &lt; <code>类派生选择器</code>&lt;<code>ID选择器</code> &lt; <code>ID派生选择器</code></p></li><li><p>派生选择器以前叫上下文选择器，所以完整的层叠优先级是:</p><ul><li><code>浏览器缺省</code> &lt;<code>外部样式表</code> &lt; <code>外部样式表类选择器</code> &lt; <code>外部样式表类派生选择器</code>&lt; <code>外部样式表ID选择器</code> &lt; <code>外部样式表ID派生选择器</code>&lt; <code>内部样式表</code> &lt; <code>内部样式表类选择器</code> &lt; <code>内部样式表类派生选择器</code> &lt; <code>内部样式表ID选择器</code> &lt; <code>内部样式表ID派生选择器</code> &lt; <code>内联样式</code>…共<code>12</code>个优先级</li></ul></li><li><p>另外，如果同一个元素在没有其他样式的作用影响下，其<code>Class</code>定义了多个并以空格分开，其优先级顺序为：</p><ul><li>一个元素同时应用多个<code>class</code>，后定义的优先（即近者优先），加上<code>!important</code>者最优先！</li></ul></li><li><p>选择器权重</p><table><thead><tr><th>选择器</th><th>权重值</th></tr></thead><tbody><tr><td>!important</td><td>infinity（正无穷）</td></tr><tr><td>行间样式</td><td>1000</td></tr><tr><td>id选择器</td><td>100</td></tr><tr><td>class、属性、伪类选择器</td><td>10</td></tr><tr><td>标签选择器、伪元素选择器</td><td>1</td></tr><tr><td>通配符选择器</td><td>0</td></tr></tbody></table></li></ul><hr><h4 id="第九章-css选择器-上"><a href="#第九章-css选择器-上" class="headerlink" title="第九章 css选择器(上)"></a>第九章 css选择器(上)</h4><ul><li><p><code>css</code>选择器：</p><ul><li><code>class</code>类选择器可以重复利用    </li><li><code>id</code>选择器唯一</li></ul></li><li><p>标签选择器</p><ul><li>什么是选择器：css选择器就是要改变样式的对象</li></ul></li><li><p>选择器<code>{属性:值;属性:值;}</code></p></li><li><p>标签选择器：页面中所有的标签都是一个选择器  <code>p{color:red;}</code></p></li><li><p>通配符选择器 *</p><ul><li>选择全部的元素 以 <code>*</code> 开头，如: <code>*{color:#0f0;}</code></li></ul></li><li><p><code>ID</code>选择器</p><ul><li>选择<code>id</code>命名的元素 以 <code>#</code> 开头   <code>#p1{color:#0f0;}</code></li></ul></li><li><p>类选择器</p><ul><li><code>class</code>选择器，选择<code>clas</code>命名的元素 以<code>.</code>开头  <code>.first{color:#00f;}</code></li></ul></li><li><p><code>css</code>代码写完后上线前要经过压缩处理 </p></li><li><p>本地和服务器分两个<code>css</code>版本（备份）</p></li><li><p>压缩后注释都清除，空间体积减少</p></li><li><p>群组选择器</p><ul><li>选择多个元素,以逗号隔开 <code>#main,.first,span,a,h1{color:red;}</code></li></ul></li><li><p>包含选择器</p><ul><li>选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开<code>p</code>   <ul><li><code>span{color:red;}</code></li></ul></li></ul></li><li><p>属性选择器</p><ul><li>选择包含某一属性的元素</li><li><code>a[title]{color:red;}</code>  选择包含<code>title</code>的<code>a</code>标签</li><li><code>a[title][href]{color:red;}</code> 选择包含<code>title</code>和<code>href</code>的<code>a</code>标签</li></ul></li><li><p><code>&gt;</code> <code>+</code> 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）</p><ul><li><code>p &gt; span{color:red;}</code></li></ul></li><li><p>相邻兄弟选择器：只选择后面的相邻兄弟元素</p><ul><li><code>p + span{color:red;}</code></li></ul></li></ul><hr><h4 id="第十章-css选择器-下"><a href="#第十章-css选择器-下" class="headerlink" title="第十章 css选择器(下)"></a>第十章 css选择器(下)</h4><hr><ul><li><p><code>&lt;a&gt;</code>伪类选择器</p><ul><li><p><code>a:link {color:#FF0000;}</code>    /* 超链接未访问时的状态 */ （只用于a标签）</p></li><li><p><code>a:visited {color:#00FF00;}</code>    /* 超链接访问过后的状态 */ （只用于a标签）</p></li><li><p><code>a:hover {color:#FF00FF;}</code>/* 鼠标悬停状态</p></li><li><p><code>*/</code>（可和其他标签结合一起用）</p></li><li><p><code>a:active {color:#0000FF;}</code>    /* 激活状态，鼠标按下状态 */</p></li><li><p><strong>注意</strong></p><ul><li>伪类选择器的排序很重要，<code>a:link</code> <code>a:visited</code> <code>a:hover</code> <code>a:active</code>，记作<code>lvha</code></li></ul></li></ul></li><li><p>输入伪类选择器（针对表单）</p><ul><li><code>input:focus{color:red;}</code>      /* 键盘输入焦点 */</li></ul></li><li><p>位置伪类选择器（针对表单）</p><ul><li><code>p:first-child{color:red;}</code>     /<code>* 第一个p *</code>/</li><li><code>p:last-child{color:red;}</code>     /<code>* 最后一个p *</code>/</li></ul></li><li><p>伪元素选择器</p><ul><li><code>:before</code> 在元素之前添加内容。</li><li><code>:after</code> 在元素之后添加内容。</li></ul></li><li><p><code>css</code>优先规则</p><ul><li>内联样式表-&gt; <code>ID</code> 选择器—&gt; <code>Class</code> 类选择器-&gt;标签选择器</li></ul></li></ul><hr><h4 id="第十一章-背景属性"><a href="#第十一章-背景属性" class="headerlink" title="第十一章 背景属性"></a>第十一章 背景属性</h4><hr><ul><li><p>背景属性：</p><ul><li><p>背景的添加 ：</p></li><li><p>背景颜色的添加:</p><ul><li><code>background:red;</code></li><li><code>backgronnd-color:red;</code></li></ul></li><li><p>背景图片的添加：</p><ul><li><code>background:url(“images/1.jpg”);</code></li><li><code>backgronnd-image:url(“images/1.jpg”);</code></li></ul></li><li><p>背景的平铺</p></li><li><p>什么是平铺？平铺就是图片是否重复出现</p><ul><li>不平铺：<code>background-repeat:no-repeat;</code></li><li>水平方向平铺：<code>background-repeat:repeat-x;</code></li><li>垂直方向平铺：<code>background-repeat:repeat-y;</code></li><li>完全平铺：默认为完全平铺</li></ul></li><li><p>背景图片的定位</p><ul><li>背景图片的定位就是可以设置显示背景图片的位置，通过属性<code>background-position</code>来实现</li><li><code>background-position</code>的取值可为英文单词或者数值和百分值。</li><li><code>background-positon</code>的英文单词取值</li><li><code>top left</code>                   </li><li><code>top  center</code>                   </li><li><code>top  right</code></li><li><code>center left</code>            </li><li><code>center  center</code>                   </li><li><code>center right</code></li><li><code>bottom left</code>           </li><li><code>bottom  center</code>    </li><li><code>ottom right</code></li></ul></li><li><p><code>background-positon</code>的数值取值     </p><ul><li><code>background-position:x  y;</code>  </li></ul></li><li><p><code>positon</code>的百分值取值     </p><ul><li><code>background-position:x%  y%;</code> </li></ul></li><li><p>背景图片的大小</p><ul><li>背景图片的大小可以通过属性<code>background-size</code>来设置<code>background-size</code>的取值可为数值和百分值。</li></ul></li><li><p><code>background-size</code>的数值取值     </p><ul><li><code>background-size:x  y;</code>  </li></ul></li><li><p><code>background-size</code>的数值取值     </p><ul><li><code>background-size:x%  y%;</code></li></ul></li><li><p>背景图片的滚动</p><ul><li><p>背景图片是否随着内容的滚动而滚动由<code>background-attachment</code>设置</p></li><li><p><code>background-attachment:fixed;</code>  固定，不随内容的滚动而滚动    </p></li><li><p><code>background-attachment:scroll;</code> 滚动，随内容的滚动而滚动</p></li></ul></li></ul></li></ul><hr><h4 id="第十二章-文字文本属性"><a href="#第十二章-文字文本属性" class="headerlink" title="第十二章 文字文本属性"></a>第十二章 文字文本属性</h4><hr><ul><li><p><code>css</code>文字文本属性：</p><ul><li><p><strong>文字属性</strong></p><ul><li><code>color:red;</code>    文字颜色</li><li><code>font-size:12px</code>;    文字大小</li><li><code>font-weight:“bold”</code>    文字粗细(<code>bold/normal</code>)</li><li><code>font-family:“宋体”</code>    文字字体</li><li><code>font-variant:small-caps</code>小写字母以大写字母显示</li></ul></li></ul></li></ul><ul><li><p><strong>文本属性</strong></p><ul><li><code>text-align:center;</code>   文本对齐(<code>right</code>/<code>left</code>/<code>center</code>)</li><li><code>line-height:10px;</code> 行间距(可通过它实现文本的垂直居中)</li><li><code>text-indent:20px;</code>  首行缩进</li><li><code>text-decoration:none;</code> <ul><li>文本线(<code>none</code>/<code>underline</code>/<code>overline</code>/<code>line-through</code>)</li></ul></li><li><code>letter-spacing</code>:   字间距</li></ul></li></ul><hr><h4 id="第十三章-盒子模型"><a href="#第十三章-盒子模型" class="headerlink" title="第十三章 盒子模型"></a>第十三章 盒子模型</h4><hr><ul><li><p><strong>盒子模型</strong></p><ul><li>盒子模型就是一个有高度和宽度的矩形区域</li><li>所有<code>html</code>标签都是盒子模型</li><li><code>div</code>标签自定义盒子模型</li></ul></li><li><p>所有的标签都是盒子模型</p><ul><li><code>class</code>和<code>id</code>的主要差别是：<code>class</code>用于元素组（类似的元素，或者可以理解为某一类元素），而<code>id</code>用于标识单独的唯一的元素。</li></ul></li><li><p><strong>盒子模型的组成</strong></p><ul><li>盒子模型组成部分：<ul><li>自身内容：<code>width</code>、h<code>eight</code> 宽高</li><li>内边距：   <code>padding</code></li><li>盒子边框： <code>border</code> 边框线</li><li>与其他盒子距离：  <code>margin</code>外边距</li><li>内容+内边距+边框+外边距=面积</li></ul></li></ul></li><li><p><code>border</code> 边框</p><ul><li>常见写法  <code>border:1px solid #f00;</code></li></ul></li><li><p>单独属性：</p><ul><li><code>border-width</code>:</li><li><code>border-style:</code> <ul><li><code>dotted</code> 点状虚线</li><li><code>dashed</code>（虚线）</li><li><code>solid</code>（实线）</li><li><code>double</code>（双实线）</li></ul></li><li><code>border-color</code> (颜色)</li></ul></li><li><p><code>padding</code> 内边距</p><ul><li><p>值：<code>像素</code>/<code>厘米</code>等长度单位、百分比</p><ul><li><code>padding:10px;</code>                      上下左右</li><li><code>padding:10px 10px;</code>                 上下  左右</li><li><code>padding:10px 10px 10px;</code>         上 左右 下</li><li><code>padding:10px 10px 10px 10px;</code> 上 右 下 左（设置4个点–&gt;顺时针方向）</li></ul></li></ul></li><li><p>单独属性：</p><ul><li><code>padding-top:</code></li><li><code>padding-right:</code></li><li><code>padding-bottom:</code></li><li><code>padding-left:</code></li></ul></li><li><p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据<code>width</code>和<code>height</code>减小</p></li><li><p>margin 外边距</p><ul><li><p>值：与<code>padding</code>相同</p></li><li><p>单独属性：与<code>padding</code>相同</p></li></ul></li><li><p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p></li></ul><hr><p><strong>补充盒子模型内容</strong></p><hr><ul><li><p><strong>标准盒子模型</strong></p><ul><li>盒子模型是<code>css</code>中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 <code>ie</code>盒子模型和标准 <code>w3c</code> 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</li></ul></li></ul><p><img src="https://i.loli.net/2020/03/21/lFZEpMj6PHfOBbA.jpg" alt=""></p><ul><li><p>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content</code>部分不包含其他部分</p></li><li><p>** IE盒子模型**</p></li></ul><p><img src="https://i.loli.net/2020/03/21/lXHLSOETkMqaVhQ.jpg" alt=""></p><ul><li><p>从上图可以看到 <code>ie</code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></p></li><li><p>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border</code>和 <code>padding</code></p></li><li><p><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></p></li><li><p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p></li><li><p>例：</p><ul><li>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding</code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></li></ul></li><li><p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c</code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p></li><li><p>假如不加<code>doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie</code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff</code>会采用标准<code>w3c</code> 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</p></li><li><p>反之，假如加上了 <code>doctype</code> 声明，那么所有浏览器都会采用标准 <code>w3c</code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</p></li></ul><hr><ul><li>用 <code>jquery</code> 做的例子来证实一下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;你用的盒子模型是？&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot; src&#x3D;&quot;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot;&gt;</span><br><span class="line">var sbox &#x3D; $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>　上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html public &quot;-&#x2F;&#x2F;w3c&#x2F;&#x2F;dtd xhtml 1.0 transitional&#x2F;&#x2F;en&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;tr&#x2F;xhtml1&#x2F;dtd&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;你用的盒子模型是标准w3c盒子模型&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot; src&#x3D;&quot;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot;&gt;</span><br><span class="line">var sbox &#x3D; $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>　代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype</code>声明。在所有浏览器中都显示“标准 <code>w3c</code>盒子模型”</li></ul><ul><li><p>所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</p></li><li><p>扩展</p><ul><li><a href="http://www.jianshu.com/p/e2eb0d8c9de6" target="_blank" rel="noopener">学会使用box-sizing布局</a></li></ul></li></ul><hr><h4 id="第十四章-块元素、行元素与溢出"><a href="#第十四章-块元素、行元素与溢出" class="headerlink" title="第十四章 块元素、行元素与溢出"></a>第十四章 块元素、行元素与溢出</h4><hr><ul><li><p>基本概念</p><ul><li>块级元素：默认情况下独占一行的元素，可控制宽高、上下边距；</li><li>行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距</li></ul></li><li><p>行块转换</p><ul><li><code>display:none</code>;  不显示</li><li><code>display:block</code>; 变成块级元素</li><li><code>display:inline</code>; 变成行级元素</li><li><code>display:inline-block</code>; 以块级元素样式展示，以行级元素样式排列</li></ul></li><li><p>溢出</p><ul><li><code>overflow:hidden</code>;   溢出隐藏</li><li><code>overflow:scroll</code>;   内容会被修剪，浏览器会显示滚动条</li><li><code>overflow:auto</code>;   如果内容被修剪，则产生滚动条</li></ul></li><li><p>文本不换行：<code>white-space:nowrap</code>;</p></li><li><p>长单词换行：<code>word-wrap:break-word</code>;</p></li></ul><ul><li><p>行内元素和快级元素小结</p><ul><li><p>一、<strong>块级元素</strong>：block element</p><ul><li><p>每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（<code>float</code>浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；</p></li><li><p>块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。</p></li><li><p><code>DIV</code> 是最常用的块级元素，元素样式的<code>display:block</code>都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。</p></li></ul></li><li><p>二、<strong>行内元素</strong>：inline element</p><ul><li>也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 <code>SPAN</code>元素，<code>IFRAME</code>元素和元素样式的<code>display : inline</code>的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。</li></ul></li><li><p>三、<strong>block（块）元素的特点:</strong></p><ul><li>①、总是在新行上开始；</li><li>②、高度，行高以及外边距和内边距都可控制；</li><li>③、宽度缺省是它的容器的100%，除非设定一个宽度。</li><li>④、它可以容纳内联元素和其他块元素</li></ul></li><li><p>四、<strong>inline元素的特点</strong></p><ul><li>①、和其他元素都在一行上；</li><li>②、高，行高及外边距和内边距不可改变；</li><li>③、宽度就是它的文字或图片的宽度，不可改变</li><li>④、内联元素只能容纳文本或者其他内联元素</li></ul></li><li><p><strong>对行内元素，需要注意如下</strong>:</p><ul><li>设置宽度<code>width</code> 无效。 设置高度<code>height</code>无效，可以通过<code>line-height</code>来设置。 设置<code>margin</code></li><li>只有左右<code>margin</code>有效，上下无效。</li><li>设置<code>padding</code>只有左右<code>padding</code>有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。</li></ul></li><li><p>五、<strong>常见的块状元素</strong></p><ul><li><code>address</code> – 地址</li><li><code>blockquote</code> – 块引用</li><li><code>center</code> – 举中对齐块</li><li><code>dir</code> – 目录列表</li><li><code>div</code> – 常用块级容易，也是<code>CSS layout</code>的主要标签</li><li><code>dl</code> – 定义列表</li><li><code>fieldset</code> – <code>form</code>控制组</li><li><code>form</code> – 交互表单</li><li><code>h1</code> – 大标题</li><li><code>h2</code> – 副标题</li><li><code>h3</code> – 3级标题</li><li><code>h4</code> – 4级标题</li><li><code>h5</code> – 5级标题</li><li><code>h6</code> – 6级标题</li><li><code>hr</code> – 水平分隔线</li><li><code>isindex</code> – <code>input prompt</code></li><li><code>menu</code> – 菜单列表</li><li><code>noframes</code> – <code>frames</code>可选内容，（对于不支持frame的浏览器显示此区块内容</li><li><code>noscript</code> – 可选脚本内容（对于不支持<code>script</code>的浏览器显示此内容）</li><li><code>ol</code> – 有序表单</li><li><code>p</code> – 段落</li><li><code>pre</code> – 格式化文本</li><li><code>table</code> – 表格</li><li><code>ul</code> – 无序列表</li></ul></li><li><p>六、<strong>常见的内联元素</strong></p><ul><li><code>a</code> – 锚点</li><li><code>abbr</code> – 缩写</li><li><code>acronym</code> – 首字</li><li><code>b</code> – 粗体(不推荐)</li><li><code>bdo</code> – <code>bidi override</code></li><li><code>big</code> – 大字体</li><li><code>br</code> – 换行</li><li><code>cite</code> – 引用</li><li><code>code</code> – 计算机代码(在引用源码的时候需要)</li><li><code>dfn</code> – 定义字段</li><li><code>em</code> – 强调</li><li><code>font</code> – 字体设定(不推荐)</li><li><code>i</code> – 斜体</li><li><code>img</code> – 图片</li><li><code>input</code> – 输入框</li><li><code>kbd</code> – 定义键盘文本</li><li><code>label</code> – 表格标签</li><li><code>q</code> – 短引用</li><li><code>s</code> – 中划线(不推荐)</li><li><code>samp</code> – 定义范例计算机代码</li><li><code>select</code> – 项目选择</li><li><code>small</code> – 小字体文本</li><li><code>span</code> – 常用内联容器，定义文本内区块</li><li><code>strike</code> – 中划线</li><li><code>strong</code> – 粗体强调</li><li><code>sub</code> – 下标</li><li><code>sup</code> – 上标</li><li><code>textarea</code> – 多行文本输入框</li><li><code>tt</code> – 电传文本</li><li><code>u</code> – 下划线</li></ul></li><li><p>七，<strong>可变元素</strong></p><ul><li>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</li><li><code>applet</code> - <code>java applet</code></li><li><code>button</code> - 按钮</li><li><code>del</code>- 删除文本</li><li><code>iframe</code> - <code>inline frame</code></li><li><code>ins</code> - 插入的文本</li><li><code>map</code> - 图片区块(<code>map</code>)</li><li><code>object</code> - <code>object</code>对象</li><li><code>script</code> - 客户端脚本</li></ul></li><li><p>八、<strong>行内元素与块级元素有什么不同</strong></p><ul><li><p>区别一：</p><ul><li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li><li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li></ul></li><li><p>区别二：</p><ul><li>块级：块级元素可以设置宽高</li><li>行内：行内元素不可以设置宽高</li></ul></li><li><p>区别三：</p><ul><li>块级：块级元素可以设置<code>margin</code>，<code>padding</code></li><li>行内：行内元素水平方向的<code>margin-left;</code> <code>margin-right;</code></li></ul></li><li><p><code>padding-left;</code> <code>padding-right</code>;可以生效。但是竖直方向的<code>margin-bottom</code>; <code>margin-top</code>; <code>padding-top</code>; <code>padding-bottom</code>;却不能生效。</p></li><li><p>区别四：</p><ul><li>块级：<code>display:block</code>;</li><li>行内：<code>display:inline</code>;</li></ul></li></ul></li><li><p>替换元素有如下：（和<code>img</code>一样的设置方法）</p><ul><li><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code></li><li><code>&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容</li></ul></li></ul></li><li><p>可以通过修改<code>display</code>属性来切换块级元素和行内元素</p></li></ul><hr><h4 id="第十五章-定位"><a href="#第十五章-定位" class="headerlink" title="第十五章 定位"></a>第十五章 定位</h4><hr><ul><li><p><code>static</code>静态定位（不对它的位置进行改变，在哪里就在那里）</p><ul><li>默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>,<code>bottom,</code>  <code>left, right</code> 或者 <code>z-index</code> 声明）。</li></ul></li><li><p><code>fixed</code>固定定位（参照物–浏览器窗口）—做 弹窗广告用到</p><ul><li>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code>以及 <code>&quot;bottom&quot;</code>属性进行规定。 </li></ul></li><li><p><code>relative</code>（相对定位 ）（参照物以他本身）</p><ul><li>生成相对定位的元素，相对于其正常位置进行定位。</li></ul></li><li><p><code>absolute</code>（绝对定位）(除了<code>static</code>都可以，找到参照物–&gt;与它最近的已经有定位的父元素进行定位)</p><ul><li>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。</li><li>元素的位置通过 “<code>left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code> 以及 <code>&quot;bottom&quot;</code> 属性进行规定</li></ul></li><li><p>z-index</p><ul><li><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li><li>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</li></ul></li><li><p>一切皆为框</p><ul><li>块级元素: <code>div</code>、<code>h1</code>或<code>p</code>元素 即：显示为一块内容称之为 “块框“ ;</li><li>行内元素: <code>span</code>,<code>strong</code>,<code>a</code>等元素 即：内容显示在行中称 “行内框”;</li><li>使用display属性改变成框的类型 即：<code>display:block</code>; 让行内元素设置为块级元素，<code>display:none;</code> 没有框</li></ul></li><li><p>相对定位：</p><ul><li>如果对一个元素进行相对定位，它将出现在它所在的位置上。 </li><li>通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动</li><li><code>.adv_relative {  position: relative;  left: 30px;  top: 20px; }</code></li></ul></li><li><p>绝对定位：</p><ul><li>元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 <code>.adv_absolute {  position: absolute;  left: 30px;  top: 20px; }</code></li></ul></li></ul><hr><p><img src="https://sm.ms/image/pY4EImKq962zk73" alt=""><br><img src="https://sm.ms/image/5OFrU4sKBSTCnjY" alt=""></p><hr><h4 id="第十六章-框架"><a href="#第十六章-框架" class="headerlink" title="第十六章 框架"></a>第十六章 框架</h4><hr><ul><li><p><code>frameset</code>框架：</p><ul><li><code>&lt;frameset&gt;</code> —-  用来定义一个框架；双标签<br>不能和  <code>&lt;body&gt;</code>  一起使用</li></ul></li><li><p><code>rows</code>、<code>cols</code>属性</p><ul><li><code>rows</code> 定义行表示框架有多少行（取值 <code>px</code>/<code>%</code>/ <code>*</code> ）</li><li><code>cols</code>   定义列表示框架有多少列（取值<code>px</code>/ <code>%</code>/ <code>*</code> ）</li></ul></li><li><p>frame子框架</p><ul><li><p>&lt;<code>frame</code>&gt;  —-  表示框架中的某一个部分；单标签，要跟结束标志</p><ul><li><code>src</code> 显示的网页的路径</li><li><code>name</code> 框架名</li><li><code>frameborder</code>  边框线（取值 0 / 1）</li></ul></li><li><p>&lt;<code>noframes</code>&gt;属性</p></li><li><p>&lt;<code>noframes</code>&gt; 提供不支持框架的浏览器显示<code>body</code>的内容；双标签</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset&gt;</span><br><span class="line">     &lt;frame  src&#x3D;“”  &#x2F;&gt;</span><br><span class="line">     &lt;frame  src&#x3D;“” &#x2F;&gt;</span><br><span class="line">     &lt;frame  src&#x3D;“” &#x2F;&gt;</span><br><span class="line">     &lt;noframes&gt;</span><br><span class="line">      &lt;body&gt;内容&lt;&#x2F;body&gt;</span><br><span class="line">     &lt;&#x2F;noframes&gt;</span><br><span class="line">&lt;&#x2F;frameset&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;iframe&gt;</code>内联框架<ul><li><code>iframe</code>元素会创建包含另外一个文档的内联框架（即行内框架）</li><li>允许和 <code>body</code> 一起使用</li><li><code>width</code> 宽（取值 px / %）</li><li><code>height</code> 高（取值 px / %）</li><li><code>name</code> 框架名</li><li><code>frameborder</code> 边框线（取值 0 / 1）</li><li><code>src</code> 显示的网页的路径</li></ul></li></ul><hr><h4 id="第十七章-css高级属性"><a href="#第十七章-css高级属性" class="headerlink" title="第十七章 css高级属性"></a>第十七章 css高级属性</h4><hr><ul><li><code>opacity</code>透明属性<ul><li><code>opacity</code><ul><li>对于<code>IE6/7/</code>，使用<code>filter:alpha(opacity:值;</code>)  值为<code>0-100</code></li><li>对于<code>Webkit</code>，<code>Opera</code>，<code>Firefox</code>，<code>IE9+</code>，使用<code>opacity</code>:值; 值为<code>0-1</code></li><li>对于早期火狐，使用<code>-moz-opacity</code>:值; 值为<code>0-1</code></li><li>所以写透明属性时，一般写法是</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    opacity:0.5;</span><br><span class="line">   filter:alpha(opacity：50);&#x2F;*0-100*&#x2F;</span><br><span class="line">   -moz-opacity:0.5;&#x2F;*取值0-1*&#x2F;--&gt;针对早起版本的火狐兼容问题的解决</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>border-radius</code>圆角边框属性</p><ul><li>向 <code>div</code> 元素添加圆角边框<ul><li><code>border-radius:10px</code>;</li></ul></li></ul></li><li><p><code>box-shadow</code>阴影属性</p><ul><li><p><code>box-shadow</code>属性向框添加阴影效果,后面跟4个参数。</p></li><li><p><code>box-shadow:0px   0px   10px   #000;</code></p></li></ul></li><li><p><code>&lt;embed&gt;</code>属性</p><ul><li><p>是<code>HTML5</code>中新增的标签,媒体嵌入插件标签，可以通过<code>&lt;embed&gt;</code>插入音频或视频</p></li><li><p><code>&lt;embed src=“media/music.mp3” /&gt;</code></p></li><li><p>格式<code>.mid</code> <code>.wav</code> <code>.mp3</code>等</p></li></ul></li></ul><hr><hr><p><img src="https://i.loli.net/2020/03/21/pgk4fQ1SGOIM3XF.png" alt=""></p><hr><ul><li><a href="https://yunpan.cn/cM9va2bHD4wwu" target="_blank" rel="noopener">原文件下载地址</a>   访问密码 342a</li></ul><hr><p><img src="https://sm.ms/image/lbNGRYjHdFIKTuL" alt=""></p><hr><ul><li><code>css</code>常见简写</li></ul><p><img src="https://sm.ms/image/O4vVuzCb2MIQYNe" alt="css简写速查"></p><hr><h3 id="第三部分-附录"><a href="#第三部分-附录" class="headerlink" title="第三部分 附录"></a>第三部分 附录</h3><hr><h4 id="附录一-CSS书写规范"><a href="#附录一-CSS书写规范" class="headerlink" title="附录一 CSS书写规范"></a>附录一 CSS书写规范</h4><blockquote><p>为了欺骗W3C的验证工具,可将代码分为两个文件，一个是针对所有浏览器,一个只针对IE。即将所有符合W3C的代码写到一个文件中,而一些IE中必须而又不能通过W3C验证的代码（如:cursor:hand;）放到另一个文件中，再用下面的方法导入</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放置所有浏览器样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只放置IE必须，而不能通过w3c的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]</span></span><br><span class="line"><span class="comment">    &lt;link rel="stylesheet" href=""&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>CSS样式新建或修改尽量遵循以下原则</p><p>根据新建样式的适用范围分为三级：全站级、产品级、页面级。 尽量通过继承和层叠重用已有样式。 不要轻易改动全站级CSS。改动后，要经过全面测试。</p><hr><ul><li><p>属性显示顺序（规范写法）</p><ul><li>显示属性</li><li>元素位置</li><li>元素属性</li><li>元素内容属性</li></ul></li><li><p>CSS书写顺序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line"><span class="comment">/* 显示属性 */</span></span><br><span class="line">    display || visibility</span><br><span class="line">    <span class="selector-tag">list-style</span></span><br><span class="line">    position top || right || bottom || left</span><br><span class="line">    <span class="selector-tag">z-index</span></span><br><span class="line">    <span class="selector-tag">clear</span></span><br><span class="line">    <span class="selector-tag">float</span></span><br><span class="line"><span class="comment">/* 自身属性 */</span></span><br><span class="line">    width max-width || min-width</span><br><span class="line">    height max-height || min-height</span><br><span class="line">    overflow || clip</span><br><span class="line">    <span class="selector-tag">margin</span></span><br><span class="line">    <span class="selector-tag">padding</span></span><br><span class="line">    <span class="selector-tag">outline</span></span><br><span class="line">    <span class="selector-tag">border</span></span><br><span class="line">    <span class="selector-tag">background</span></span><br><span class="line"><span class="comment">/* 文本属性 */</span></span><br><span class="line">    <span class="selector-tag">color</span></span><br><span class="line">    <span class="selector-tag">font</span></span><br><span class="line">    <span class="selector-tag">text-overflow</span></span><br><span class="line">    <span class="selector-tag">text-align</span></span><br><span class="line">    <span class="selector-tag">text-indent</span></span><br><span class="line">    <span class="selector-tag">line-height</span></span><br><span class="line">    <span class="selector-tag">white-space</span></span><br><span class="line">    <span class="selector-tag">vertical-align</span></span><br><span class="line">    <span class="selector-tag">cursor</span></span><br><span class="line">    <span class="selector-tag">content</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li><li><p>兼容多个浏览器时，将标准属性写在底部</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-moz-border-radius: 15px; &#x2F;* Firefox *&#x2F;</span><br><span class="line">-webkit-border-radius: 15px; &#x2F;* Safari和Chrome *&#x2F;</span><br><span class="line">border-radius: 15px; &#x2F;* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 *&#x2F;&#x2F;标准属性</span><br></pre></td></tr></table></figure><ul><li>使用选择器时，命名比较短的词汇或者缩写的不允许直接定义样式</li></ul><p><code>.hd,.bd,.td{};//如这些命名</code></p><ul><li>可用上级节点进行限定</li></ul><p><code>.recommend-mod .hd</code></p><ul><li>多选择器规则之间换行，即当样式针对多个选择器时每个选择器占一行。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-class">.btn</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-class">.btn</span>,</span><br><span class="line">input[type="button"] &#123;…&#125;;</span><br></pre></td></tr></table></figure><ul><li>优化CSS选择器</li></ul><p><code>#header a { color: #444; };/*CSS选择器是从右边到左边进行匹配*/</code></p><p>浏览器将检查整个文档中的所有链接和每个链接的父元素，并遍历文档树去查找ID为header的祖先元素，如果找不到header将追溯到文档的根节点，解决方法如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">避免使用通配规则和相邻兄弟选择符、子选择符,、后代选择符、属性选择符等选择器</span><br><span class="line">不要限定<span class="selector-tag">id</span>选择符，如<span class="selector-tag">div</span><span class="selector-id">#header</span>（提权的除外）</span><br><span class="line">不要限定类选择器，如<span class="selector-tag">ul</span><span class="selector-class">.recommend</span>（提权的除外）</span><br><span class="line">不要使用 <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> 这样长的选择符</span><br><span class="line">避免使用标签子选择符，如<span class="selector-id">#header</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>使用z-index属性尽量z-index的值不要超过150（通用组的除外），页面中的元素内容的z-index不能超过10（提示框等模块除外但维持在150以下），不允许直接使用（999~9999）之间大值。 尽量避免使用CSS Hack</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">property</span><span class="selector-pseudo">:value</span>; <span class="comment">/* 所有浏览器 */</span></span><br><span class="line">+<span class="selector-tag">property</span><span class="selector-pseudo">:value</span>; <span class="comment">/* IE7 */</span></span><br><span class="line">_<span class="selector-tag">property</span><span class="selector-pseudo">:value</span>; <span class="comment">/* IE6 */</span></span><br><span class="line">*<span class="selector-tag">property</span><span class="selector-pseudo">:value</span>; <span class="comment">/* IE6/7 */</span></span><br><span class="line"><span class="selector-tag">property</span><span class="selector-pseudo">:value</span>\9; <span class="comment">/* IE6/7/8/9，即所有IE浏览器 */</span></span><br><span class="line"></span><br><span class="line">\* html selector &#123; … &#125;; /* IE6 */</span><br><span class="line">\*:first-child+html selector &#123; … &#125;; /* IE7 */</span><br><span class="line">html&gt;body selector &#123; … &#125;; /* 非IE6 */</span><br><span class="line"><span class="keyword">@-moz-document</span> url-prefix() &#123; … &#125;; <span class="comment">/* firefox */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span><span class="number">0</span>) &#123; … &#125;; <span class="comment">/* saf3+/chrome1+ */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span><span class="number">10000</span>),<span class="keyword">not</span> all <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span><span class="number">0</span>) &#123; … &#125;; <span class="comment">/* opera */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-device-width:</span> <span class="number">480px</span>) &#123; … &#125;; <span class="comment">/* iPhone/mobile webkit */</span></span><br></pre></td></tr></table></figure><p>避免使用低效的选择器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body &gt; * &#123;…&#125;;</span><br><span class="line">ul &gt; li &gt; a &#123;…&#125;;</span><br><span class="line">#footer &gt; h3 &#123;…&#125;;</span><br><span class="line">ul#top_blue_nav &#123;…&#125;;</span><br><span class="line">#searbar span.submit a &#123; … &#125;; /* 反面示例 */</span><br></pre></td></tr></table></figure><p>六个不要三个避免一个使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">不要在标签上直接写样式</span><br><span class="line">不要在<span class="selector-tag">CSS</span>中使用<span class="selector-tag">expression</span></span><br><span class="line">不要在<span class="selector-tag">CSS</span>中使用<span class="keyword">@import</span></span><br><span class="line">不要在CSS中使用!important</span><br><span class="line">不要在CSS中使用“*”选择符</span><br><span class="line">不要将CSS样式写为单行</span><br><span class="line">避免使用filter</span><br><span class="line">避免使用行内（inline）样式</span><br><span class="line">避免使用“*”设置&#123;<span class="selector-tag">margin</span>: 0; <span class="selector-tag">padding</span>: 0;&#125;</span><br><span class="line">使用<span class="selector-tag">after</span>或<span class="selector-tag">overflow</span>的方式清浮动</span><br></pre></td></tr></table></figure><p>减少使用影响性能的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">position:absolute;</span><br><span class="line">float:left;&#x2F;&#x2F;如这些定位或浮动属性</span><br></pre></td></tr></table></figure><p>减少在CSS中使用滤镜表达式和图片repeat,尤其在body当中,渲染性能极差, 如果需要用repeat的话,图片的宽或高不能少于8px</p><hr><h4 id="附录二-DIV命名规范"><a href="#附录二-DIV命名规范" class="headerlink" title="附录二 DIV命名规范"></a>附录二 DIV命名规范</h4><hr><ul><li><p>企业<code>DIV</code>使用频率高的命名方法</p></li><li><p><strong>网页内容类</strong></p><ul><li><p>标题: <code>title</code></p><ul><li>摘要: <code>summary</code></li><li>箭头： <code>arrow</code></li><li>商标： <code>label</code></li><li>网站标志： <code>logo</code></li><li>转角/圆角：<code>corner</code></li><li>横幅广告： <code>banner</code></li><li>子菜单： <code>subMenu</code></li><li>搜索： <code>search</code></li><li>搜索框： <code>searchBox</code></li><li>登录： <code>login</code></li><li>登录条：<code>loginbar</code></li><li>工具条： <code>toolbar</code></li><li>下拉： <code>drop</code></li><li>标签页： <code>tab</code></li><li>当前的： <code>current</code></li><li>列表： <code>list</code></li><li>滚动： <code>scroll</code></li><li>服务： <code>service</code></li><li>提示信息： <code>msg</code></li><li>热点：<code>hot</code></li><li>新闻： <code>news</code></li><li>小技巧： <code>tips</code></li><li>下载： <code>download</code></li><li>栏目标题： <code>title</code></li><li>热点： <code>hot</code></li><li>加入：<code>joinus</code></li><li>注册： <code>regsiter</code></li><li>指南： <code>guide</code></li><li>友情链接： <code>friendlink</code></li><li>状态： <code>status</code></li><li>版权： <code>copyright</code></li><li>按钮： <code>btn</code></li><li>合作伙伴： <code>partner</code></li><li>投票： <code>vote</code></li><li>左右中：<code>left</code>  <code>right</code>  <code>center</code></li></ul><hr></li><li><p>注释的写法: <code>/* Footer */</code> 内容区<code>/* End Footer */</code></p></li></ul></li><li><p><strong>id的命名:</strong></p><ul><li><p>页面结构</p><ul><li>容器: <code>container</code></li><li>页头：<code>header</code></li><li>内容：<code>content</code>/<code>container</code></li><li>页面主体：<code>main</code></li><li>页尾：<code>footer</code></li><li>导航：<code>nav</code></li><li>侧栏：<code>sidebar</code></li><li>栏目：<code>column</code></li><li>页面外围控制整体布局宽度：<code>wrapper</code></li><li>左右中：<code>left</code> <code>right</code> <code>center</code></li></ul></li></ul><hr><ul><li><p>导航</p><ul><li>导航：<code>nav</code></li><li>主导航：<code>mainbav</code></li><li>子导航：<code>subnav</code></li><li>顶导航：<code>topnav</code></li><li>边导航：<code>sidebar</code></li><li>左导航：<code>leftsidebar</code></li><li>右导航：<code>rightsidebar</code></li><li>菜单：<code>menu</code></li><li>子菜单：<code>submenu</code></li><li>标题: <code>title</code></li><li>摘要: <code>summary</code></li></ul></li></ul><hr><ul><li><p>功能</p><ul><li>标志：<code>logo</code></li><li>广告：<code>banner</code></li><li>登陆：<code>login</code></li><li>登录条：<code>loginbar</code></li><li>注册：<code>regsiter</code></li><li>搜索：<code>search</code></li><li>功能区：<code>shop</code></li><li>标题：<code>title</code></li><li>加入：<code>joinus</code></li><li>状态：<code>status</code></li><li>按钮：<code>btn</code></li><li>滚动：<code>scroll</code></li><li>标签页：<code>tab</code></li><li>文章列表：<code>list</code></li><li>提示信息：<code>msg</code></li><li>当前的:<code>current</code></li><li>小技巧：<code>tips</code></li><li>图标: <code>icon</code></li><li>注释：<code>note</code></li><li>指南：<code>guild</code></li><li>服务：<code>service</code></li><li>热点：<code>hot</code></li><li>新闻：<code>news</code></li><li>下载：<code>download</code></li><li>投票：<code>vote</code></li><li>合作伙伴：<code>partner</code></li><li>友情链接：<code>link</code></li><li>版权：<code>copyright</code></li></ul></li></ul><hr><ul><li><p><strong><code>class</code>的命名:</strong></p><ul><li><p>颜色:使用颜色的名称或者16进制代码,如</p><ul><li><code>.red { color: red; }</code></li><li><code>.f60 { color: #f60; }</code></li><li><code>.ff8600 { color: #ff8600; }</code></li></ul></li><li><p>字体大小,直接使用”font+字体大小”作为名称,如</p><ul><li><code>.font12px { font-size: 12px; }</code></li><li><code>.font9px {font-size: 9pt; }</code></li></ul></li><li><p>对齐样式,使用对齐目标的英文名称,如</p><ul><li><code>.left { float:left; }</code></li><li><code>.bottom { float:bottom; }</code></li></ul></li><li><p>标题栏样式,使用”类别+功能”的方式命名,如</p><ul><li><code>.barnews { }</code></li><li><code>.barproduct { }</code></li></ul></li></ul><hr><ul><li><p><strong>注意事项::</strong></p><ul><li>一律小写;</li><li>尽量用英文;</li><li>不加中杠和下划线;</li><li>尽量不缩写，除非一看就明白的单词.</li></ul></li></ul><hr></li></ul></li><li><p><strong>推荐的 <code>CSS</code> 书写顺序：</strong></p><ul><li><p>显示属性</p><ul><li><code>display</code></li><li><code>list-style</code></li><li><code>position</code></li><li><code>float</code></li><li><code>clear</code></li></ul></li><li><p>自身属性</p><ul><li><code>width</code></li><li><code>height</code></li><li><code>margin</code></li><li><code>padding</code></li><li><code>border</code></li><li><code>background</code></li></ul></li><li><p>文本属性</p><ul><li><code>color</code></li><li><code>font</code></li><li><code>text-decoration</code></li><li><code>text-align</code></li><li><code>vertical-align</code></li><li><code>white-space</code></li><li><code>other text</code></li><li><code>content</code>    </li></ul></li></ul></li></ul><hr><h4 id="附录三-CSS精灵"><a href="#附录三-CSS精灵" class="headerlink" title="附录三 CSS精灵"></a>附录三 CSS精灵</h4><hr><ul><li><strong>CSS精灵原理以及应用</strong><ul><li><code>CSS</code>雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。<ul><li>该图片使用<code>CSS</code>   <code>background和background-position</code>属性渲染，这也就意味着你的标签变得更加复杂了，图片是在<code>CSS</code>中定义，而非<code>&lt;img&gt;</code>标签。</li></ul></li></ul></li><li><strong>一个简单的例子</strong>：<ul><li>一张图片作出一个按钮的三个状态</li><li>一个链接用<code>CSS</code>做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，<code>a:link</code>，<code>a:hover</code>，<code>a:active</code> <code>&lt;a class=&quot;button&quot; href=&quot;#&quot;&gt;链接&lt;/a&gt;</code></li><li>加入右侧的图片为：<code>200px 65px</code>的三个按钮图拼合而成的图片<code>button.png</code>，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用<code>CSS</code>进行定义。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">    display:block; </span><br><span class="line">    width:200px; </span><br><span class="line">    height:65px; </span><br><span class="line">    line-height:65px; &#x2F;*定义状态*&#x2F;</span><br><span class="line">    text-indent:-2015px; &#x2F;*隐藏文字*&#x2F;</span><br><span class="line">    background-image:url(button.png); &#x2F;*定义背景图片*&#x2F;</span><br><span class="line">    background-position:0 0;</span><br><span class="line">    &#x2F;*定义链接的普通状态，此时图像显示的是顶上的部分*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover &#123;</span><br><span class="line">    background-position:0 -66px;</span><br><span class="line">    &#x2F;*定义链接的滑过状态，此时显示的为中间部分，向下取负值*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">a:active &#123;</span><br><span class="line">    background-position:0 -132px;                      </span><br><span class="line">    &#x2F;*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更多的<code>CSS</code>雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值<ul><li>如：<code>background:url(nav.png) -180px 24pxno-repeat</code>; 来达到更精确的定位</li></ul></li><li><strong>优点：</strong><ul><li>减少加载网页图片时对服务器的请求次数</li><li>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</li><li>提高页面的加载速度</li><li><code>sprite</code>技术的其中一个好处是图片的加载时间(在有许多 <code>sprite</code> 时，单张图片的加载时间)。由所需图片拼成的一张 <code>GIF</code>图片的尺寸会明显小于所有图片拼合前的大小。单张的 <code>GIF</code>只有相关的一个色表，而单独分割的每一张 <code>GIF</code> 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 <code>JPEG</code> 或者 <code>PNG</code> <code>sprite</code> 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</li><li>减少鼠标滑过的一些<code>bug</code></li><li><code>IE6</code>不会主动预加载鼠标滑过即<code>a:hover</code>中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用<code>CSS</code>雪碧，由于一张图片即可，所以不会出现这种现象。</li></ul></li><li><strong>不足：</strong><ul><li><code>CSS</code>雪碧的最大问题是内存使用</li><li>影响浏览器的缩放功能</li><li>拼图维护比较麻烦</li><li>使<code>CSS</code>的编写变得困难</li><li><code>CSS</code> 雪碧调用的图片不能被打印</li><li>错误得使用 <code>Sprites</code> 影响可访问性</li></ul></li></ul><h4 id="附录四-一些tips解决方案"><a href="#附录四-一些tips解决方案" class="headerlink" title="附录四 一些tips解决方案"></a>附录四 一些tips解决方案</h4><hr><h5 id="页面优化实践"><a href="#页面优化实践" class="headerlink" title="页面优化实践"></a>页面优化实践</h5><hr><ul><li><p>从下面的几个方面可以进行页面的优化：</p><ul><li>减少请求数</li><li>图片合并</li><li><code>CSS</code>文件合并</li><li>减少内联样式</li><li>避免在 <code>CSS</code>中使用 <code>import</code></li><li>减少文件大小</li><li>选择适合的图片格式</li><li>图片压缩</li><li><code>CSS</code> 值缩写（<code>Shorthand Property</code>)</li><li>文件压缩</li><li>页面性能</li><li>调整文件加载顺序</li><li>减少标签数量</li><li>调整选择器长度</li><li>尽量使用<code>CSS</code> 制作显示表现</li><li>增强代码可读性与可维护性</li><li>规范化</li><li>语义化</li><li>模块化</li></ul></li></ul><h5 id="写DIV-CSS-的一些常识"><a href="#写DIV-CSS-的一些常识" class="headerlink" title="写DIV+CSS 的一些常识"></a>写DIV+CSS 的一些常识</h5><hr><ul><li><p>不要使用过小的图片做背景平铺</p><ul><li>这就是为何很多人都不用 <code>1px</code> 的原因，这才知晓。宽高 <code>1px</code> 的图片平铺出一个宽高 <code>200px</code> 的区域，需要 <code>200200=40, 000</code> 次，占用资源</li></ul></li><li><p>无边框</p><ul><li>推荐的写法是 <code>border:none</code>;，哈哈，我一直在用这个。 <code>border:0;</code> 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源</li></ul></li><li><p>慎用 通配符</p><ul><li>所谓通配符，就是将<code>CSS</code> 中的所有标签均初始化，不管用的不用的，过时的先进的，一视同仁，这样，大大的占用资源。要有选择的初始化标签。</li></ul></li><li><p><code>CSS</code>的十六进制颜色代码缩写</p><ul><li>习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考证。</li></ul></li><li><p>样式放头上，脚本放脚下。不内嵌，只外链</p></li><li><p>坚决不用 <code>CSS</code>表达式</p></li><li><p>使用 引用样式表，而不是通过<code>@import</code> 导入。</p></li><li><p>一般来说，<code>PNG</code>比 <code>GIF</code> 要小，小得多。再者，<code>GIF</code> 中有多少颜色是被浪费的，很值得优化。</p></li><li><p>千万不要在 <code>HTML</code>中缩放图片，一者不好看，二者占资源。</p></li><li><p>正文字体最好用偶数</p><ul><li><code>12px</code>、<code>14px</code>、<code>16px</code>，效果非常好。特例，<code>15px</code>。</li></ul></li><li><p><code>block</code>、<code>ul</code>、<code>ol</code>等上下留出至少一倍行距，左侧至少两倍行距，右侧随意。</p></li><li><p>段落之间，至少要有一倍行距</p></li><li><p>强行指定某些元素的 <code>line-height</code>，正文 <code>1.6</code>倍于文字大小，标题<code>1.3</code>倍。</p></li><li><p>中文标点用全角</p><ul><li>英文夹杂在中文中，左右空格，半角。</li></ul></li><li><p>中文字体的粗体和斜体，远离较好</p></li></ul><h5 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h5><hr><ul><li>雅虎工程师提供的<code>CSS</code>初始化示例代码【仅供参考】<ul><li>可以在<code>html</code>头文件中直接引用，从而避免浏览器的不兼容带来的错误。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span> &#123; </span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>; </span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#555</span>; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>; </span><br><span class="line">    <span class="attribute">font-family</span>: Verdana, Arial, Helvetica, sans-serif; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">caption</span> &#123; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, </span><br><span class="line"><span class="selector-tag">h2</span>, </span><br><span class="line"><span class="selector-tag">h3</span>, </span><br><span class="line"><span class="selector-tag">h4</span>, </span><br><span class="line"><span class="selector-tag">h5</span>, </span><br><span class="line"><span class="selector-tag">h6</span> &#123; </span><br><span class="line">    <span class="attribute">font-weight</span>:normal; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>, </span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">cite</span>, </span><br><span class="line"><span class="selector-tag">code</span>, </span><br><span class="line"><span class="selector-tag">dfn</span>, </span><br><span class="line"><span class="selector-tag">em</span>, </span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">th</span>, </span><br><span class="line"><span class="selector-tag">var</span> &#123; </span><br><span class="line">    <span class="attribute">font-style</span>:normal; </span><br><span class="line">    <span class="attribute">font-weight</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#555</span>; </span><br><span class="line">    <span class="attribute">text-decoration</span>:none; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line">    <span class="attribute">text-decoration</span>:underline; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span> &#123; </span><br><span class="line">    <span class="attribute">list-style</span>:none; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>, </span><br><span class="line"><span class="selector-tag">textarea</span>, </span><br><span class="line"><span class="selector-tag">select</span>, </span><br><span class="line"><span class="selector-tag">button</span> &#123; </span><br><span class="line">    <span class="attribute">font</span>:<span class="number">14px</span> Verdana,Helvetica,Arial,sans-serif; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; </span><br><span class="line">    <span class="attribute">border-collapse</span>:collapse; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>; </span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>; </span><br><span class="line">    <span class="attribute">clear</span>:both; </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; </span><br><span class="line">    *zoom:1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mobile meta</code>标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">320,target-densitydpi</span>=<span class="string">dpi_value,initial-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”/</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>表格不被撑开</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table-layout</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line"><span class="selector-tag">word-break</span>: <span class="selector-tag">break-all</span>;</span><br><span class="line"><span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span>;</span><br></pre></td></tr></table></figure><ul><li>不设宽高居中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”abc”</span> <span class="attr">style</span>=<span class="string">”display:table;text-align:center;width:100%;height:100%;”</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">”background:#f00;</span> <span class="attr">display:table-cell</span>; <span class="attr">vertical-align:middle</span>;”&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”item1″</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>透明度的兼容代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filter:alpha(opacity=50); /*1-100*/</span><br><span class="line"><span class="selector-tag">-moz-opacity</span><span class="selector-pseudo">:0.5</span>; <span class="comment">/*0-1.0*/</span></span><br><span class="line"><span class="selector-tag">-khtml-opacity</span><span class="selector-pseudo">:0.5</span>; <span class="comment">/*0-1.0*/</span></span><br><span class="line"><span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>; <span class="comment">/*0-1.0*/</span></span><br></pre></td></tr></table></figure><ul><li>文字溢出点点省略</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br></pre></td></tr></table></figure><ul><li><p>清除浮动的几种方法</p><ul><li><p>方法一：<code>投机取巧法</code> – 不推荐</p><ul><li>直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强</li></ul></li><li><p>方法二：<code>overflow + zoom</code>方法  –不推荐<br> <code>.fix{overflow:hidden; zoom:1;}</code></p><ul><li>此方法优点在于代码简洁，涵盖所有浏览器</li></ul></li><li><p>方法三：<code>after + zoom</code>方法 -推荐–此方法可以说是综合起来最好的方法了</p><ul><li><code>clearfix</code>只应用在包含浮动子元素的父级元素上</li></ul></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.fix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>:block; </span><br><span class="line">     <span class="attribute">content</span>:<span class="string">'clear'</span>; </span><br><span class="line">     <span class="attribute">clear</span>:both;</span><br><span class="line">     <span class="attribute">line-height</span>:<span class="number">0</span>; </span><br><span class="line">     <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更多代码片段详情<ul><li><a href="http://www.jianshu.com/p/e878122a92a3" target="_blank" rel="noopener">实用的60个CSS代码片段</a></li></ul></li></ul><h5 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h5><hr><ul><li><p>自动继承属性：</p><ul><li><code>color</code></li><li><code>font</code></li><li><code>text-align</code></li><li><code>list-style</code><br>…</li></ul></li><li><p>非继承属性：</p><ul><li><code>background</code></li><li><code>border</code></li><li><code>position</code><br>…</li></ul></li><li><p>具有破坏性的元素：</p><ul><li><code>float</code></li><li><code>display:none;</code></li><li><code>position:absoblute/fixed/sticky;</code></li></ul></li><li><p>具有包裹性的元素：</p><ul><li><p><code>display:inline-block/table-cell</code></p></li><li><p><code>position:absolute/fixed/sticky</code></p></li><li><p><code>overflow:hidden/scroll</code></p></li></ul></li><li><p>消除图片底部间隙的方法</p><ul><li><p>图片块状化-无基线对齐<br><code>img{display:block;}</code></p></li><li><p>图片底线对齐<br><code>img{vertical-align:bottom;}</code></p></li><li><p>行高足够小 - 基线位置上移<br><code>.box{line-height:0;}</code></p></li></ul></li></ul><h5 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h5><hr><ul><li><p>BFC</p><ul><li>BFC全称<code>”Block Formatting Context”</code> 中文为“块级格式化上下文”</li></ul><ul><li><p>记住这么一句话：<code>BFC</code>元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素</p></li><li><p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</p></li><li><p>扩展阅读</p><ul><li><a href="https://github.com/dwqs/blog/issues/22" target="_blank" rel="noopener">CSS中的BFC</a></li></ul></li></ul></li><li><p>优雅降级(<code>graceful degradation</code>)</p><ul><li>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li></ul></li><li><p>渐进增强 <code>progressive enhancement</code>：</p><ul><li>是在浏览器开启<code>JavaScript</code>功能后，如果浏览器版本不支持某些  <code>JavaScript</code>  能力，我们解决这种问题的方式</li></ul></li><li><p>平稳退化</p><ul><li>是在浏览器没有<code>JavaScript</code>功能，或没有开启<code>JavaScript</code>功能情况下，我们解决这种问题的方式；</li></ul></li></ul><h5 id="方案荟萃扩展阅读"><a href="#方案荟萃扩展阅读" class="headerlink" title="方案荟萃扩展阅读"></a>方案荟萃扩展阅读</h5><hr><ul><li><p><strong>关于布局</strong></p><ul><li><a href="http://www.qianduan.net/css-to-achieve-the-vertical-center-of-the-five-kinds-of-methods/" target="_blank" rel="noopener">垂直居中</a></li><li><a href="http://codepen.io/shshaw/full/gEiDt" target="_blank" rel="noopener">css完全居中</a></li><li><a href="http://www.w3cplus.com/collective-5.html" target="_blank" rel="noopener">居中之美</a></li><li><a href="http://www.zhihu.com/question/35290742#answer-20340542" target="_blank" rel="noopener">网页中的底部foot定位</a></li><li><a href="http://www.webhek.com/css-100-percent-height" target="_blank" rel="noopener">页面高度100%</a></li><li><a href="https://github.com/phoetry/textareaAutoHeight" target="_blank" rel="noopener">textarea高度自适应</a></li><li><a href="http://dotdotdot.frebsite.nl/" target="_blank" rel="noopener">多行溢出省略</a></li><li><a href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/" target="_blank" rel="noopener">Retina屏1px线</a></li><li><a href="https://github.com/philipwalton/flexbugs" target="_blank" rel="noopener">Flexbugs</a></li></ul></li><li><p><strong>其他</strong></p><ul><li><a href="http://www.stepday.com/topic/?690" target="_blank" rel="noopener">IF IE ENDIF条件判断之IE10</a></li><li><a href="http://www.zhihu.com/question/20158063" target="_blank" rel="noopener">Chrome 翻译插件</a></li><li><a href="http://blog.netsh.org/posts/website-retina_1779.netsh.html" target="_blank" rel="noopener">网页retina优化</a></li><li><a href="http://segmentfault.com/a/1190000002407912" target="_blank" rel="noopener">常用meta</a></li><li><a href="http://www.cnblogs.com/mq0036/p/3531848.html" target="_blank" rel="noopener">树状菜单</a></li><li><a href="http://www.w3ctrain.com/2015/07/24/comprehensive-guide-when-to-use-em-vs-rem/" target="_blank" rel="noopener">em vs rem</a></li><li><a href="https://github.com/classicemi/blog/issues/3#issuecomment-113861251" target="_blank" rel="noopener">css vs js</a></li><li><a href="http://www.w3cplus.com/solution/index/index.html" target="_blank" rel="noopener">css解决方案（w3cplus）</a></li><li><a href="http://riccardoscalco.github.io/textures/" target="_blank" rel="noopener">Textures生成纹理</a></li><li><a href="http://una.im/CSSgram/" target="_blank" rel="noopener">CSSgram</a></li><li><a href="http://zmoazeni.github.io/csscss/" target="_blank" rel="noopener">Csscss（检查重复声明等）</a></li></ul></li></ul><h4 id="附录五-部分工具资源"><a href="#附录五-部分工具资源" class="headerlink" title="附录五 部分工具资源"></a>附录五 部分工具资源</h4><hr><ul><li><a href="http://blog.poetries.top/2016/03/14/Emmet%EF%BC%9AHTML-CSS%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/" target="_blank" rel="noopener">学会使用Emmet插件快速编码</a></li><li><a href="http://blog.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#more" target="_blank" rel="noopener">Emmet常用快捷键</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md" target="_blank" rel="noopener">Sublime专题</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md" target="_blank" rel="noopener">Sublime常用插件总结</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md" target="_blank" rel="noopener">Front-End -Develop -Tools</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md" target="_blank" rel="noopener">ToolsBox-自己整理的一份工具列表</a></li></ul><h4 id="附录六-编码规范"><a href="#附录六-编码规范" class="headerlink" title="附录六 编码规范"></a>附录六 编码规范</h4><hr><ul><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md" target="_blank" rel="noopener">编码规范</a></li><li><a href="http://front-end-standards.com/" target="_blank" rel="noopener">前端规范</a></li><li><a href="https://github.com/poetries/mywiki/wiki/web-develop-standard" target="_blank" rel="noopener">web develop standard</a></li><li><a href="http://codecloud.net/5622.html" target="_blank" rel="noopener">Web 前端开发规范文档</a></li><li><a href="http://zhibimo.com/read/Ashu/front-end-style-guide/index.html" target="_blank" rel="noopener">前端开发规范手册</a></li></ul><h4 id="附录七-进阶学习"><a href="#附录七-进阶学习" class="headerlink" title="附录七 进阶学习"></a>附录七 进阶学习</h4><hr><ul><li><a href="http://www.jianshu.com/p/1e638b7da640" target="_blank" rel="noopener">DOM编程之API学习</a></li><li><a href="http://www.jianshu.com/p/1f2314552e23" target="_blank" rel="noopener">JavaScript基础学习</a></li></ul><h4 id="附录八-其他资源"><a href="#附录八-其他资源" class="headerlink" title="附录八 其他资源"></a>附录八 其他资源</h4><hr><ul><li><a href="https://github.com/poetries/mywiki" target="_blank" rel="noopener">Github上前端学习资源汇总</a></li><li><a href="https://github.com/poetries/mywiki/tree/master/front-end" target="_blank" rel="noopener">WEB 前端开发学习笔记</a></li><li><a href="https://github.com/poetries/mywiki/wiki/%E6%94%B6%E9%9B%86%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">前端开发工具箱</a></li><li><a href="https://segmentfault.com/a/1190000006689923" target="_blank" rel="noopener">148个资源让你成为CSS专家</a></li><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局-经典必看</a></li></ul><h4 id="附录九-常见问题"><a href="#附录九-常见问题" class="headerlink" title="附录九 常见问题"></a>附录九 常见问题</h4><hr><ul><li><p>前端指路</p><ul><li><a href="http://www.w3cplus.com/css/write-to-front-end-developer-interview.html" target="_blank" rel="noopener">写给前端面试者（w3cplus）</a></li><li><a href="http://jiongks.name/blog/how-to-become-a-great-front-end-engineer/" target="_blank" rel="noopener">如何成为一名卓越的前端工程师（勾三股四博客）</a></li><li><a href="http://www.epubit.com.cn/article/144" target="_blank" rel="noopener">什么是全栈工程师</a></li><li><a href="https://uptodate.frontendrescue.org/zh/" target="_blank" rel="noopener">如何跟上前端开发的最新前沿</a></li><li><a href="http://blog.jobbole.com/12749/" target="_blank" rel="noopener">浏览器的工作原理</a></li><li><a href="http://www.zhihu.com/question/20269059#answer-19718763" target="_blank" rel="noopener">移动前端开发和 Web 前端开发的区别</a></li><li><a href="http://segmentfault.com/q/1010000003723038?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly" target="_blank" rel="noopener">大型网站CSS编写与维护</a></li><li><a href="http://segmentfault.com/q/1010000003059724" target="_blank" rel="noopener">CSS核心技术关键字</a></li></ul></li><li><p>性能/规范/实践</p><ul><li><a href="http://www.chinaw3c.org/how-to-read-spec-wxx.html" target="_blank" rel="noopener">如何阅读W3c规范(王晓轩)</a></li><li><a href="http://www.chinaw3c.org/how-to-read-spec-gb.html" target="_blank" rel="noopener">如何阅读W3c规范(高博)</a></li><li><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">雅虎web性能优化军规</a></li><li><a href="http://browserdiet.com/zh/" target="_blank" rel="noopener">权威前端性能指南</a></li><li><a href="http://www.html-js.com/article/Front-end-home-best-practice-in-front-of-the-web-high-performance-CSS" target="_blank" rel="noopener">高性能css</a></li></ul></li><li><p>一些问答社区</p><ul><li><a href="https://www.quora.com/" target="_blank" rel="noopener">quora</a></li><li><a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a></li><li><a href="http://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></li><li><a href="http://www.html-js.com/qa" target="_blank" rel="noopener">前端乱炖问答区</a></li><li><a href="http://segmentfault.com/questions/newest" target="_blank" rel="noopener">segmentfault问答区</a></li></ul></li></ul><h4 id="附录十-职业规划和前景"><a href="#附录十-职业规划和前景" class="headerlink" title="附录十 职业规划和前景"></a>附录十 职业规划和前景</h4><hr><ul><li><p><strong>职业方向规划定位：</strong></p><ul><li><code>web</code>前端开发工程师</li><li><code>web</code>网站架构师</li><li>自己创业</li><li>转岗管理或其他<!--more--></li></ul></li><li><p><strong><code>web</code>前端开发的前景展望：</strong></p><ul><li>未来<code>IT</code>行业企业需求最多的人才</li><li>结合最新的<code>html5</code>抢占移动端的市场</li><li>自己创业做老板</li><li>随着互联网的普及<code>web</code>开发成为企业的宠儿和核心</li></ul></li><li><p><strong><code>web</code>职业发展目标：</strong></p><ul><li><p>第一、梳理知识架构</p><ul><li>负责内容的<code>HTML</code></li><li>负责外观的<code>css</code>（层叠样式表）</li><li>负责行为的<code>js</code></li><li><code>ps</code>切图</li></ul></li><li><p>第二、分解目标（起步阶段、提升阶段、成型阶段）</p><ul><li><p>起步阶段：</p><ul><li>基本知识的掌握</li><li>常用工具的掌握</li><li>沟通技巧的掌握（围绕客户的需求）</li><li>良好的开发习惯（加注释、对齐方式）</li></ul></li><li><p>提升阶段：</p><ul><li>熟悉掌握<code>HTML</code>基本标签和属性</li><li>熟练掌握<code>css</code>的基本语法和使用</li><li>浏览器兼容和w3c标准的掌握</li><li>结合<code>html</code>+<code>css</code>+<code>js</code>开始系统项目的开发</li></ul></li><li><p>成型阶段：</p><ul><li>精通<code>DIV</code>+<code>CCS</code>布局</li><li>精通<code>css</code>样式表控制<code>html</code>标签</li><li>熟悉运用<code>js</code>制作动态网站的效果</li><li>能独立开发完成网站</li></ul></li></ul></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一部分html&quot;&gt;&lt;a href=&quot;#第一部分html&quot; class=&quot;headerlink&quot; title=&quot;第一部分html&quot;&gt;&lt;/a&gt;第一部分html&lt;/h4&gt;&lt;h5 id=&quot;html概述&quot;&gt;&lt;a href=&quot;#html概述&quot; class=&quot;headerlink&quot; title=&quot;html概述&quot;&gt;&lt;/a&gt;html概述&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;认识HTML：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt;不是一种编程语言，是一种标志语言&lt;/li&gt;
&lt;li&gt;标记语言是由一套标识标签组成的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt;使用标签来描述网页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="htmlのcss" scheme="http://yoursite.com/categories/html%E3%81%AEcss/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
